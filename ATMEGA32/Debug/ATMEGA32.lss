
ATMEGA32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fbc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002fbc  00003030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000027f0  00000000  00000000  00003048  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001290  00000000  00000000  00005838  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000089c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000098ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a65c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000aa49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b217  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <main>
      7a:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 d1 17 	jmp	0x2fa2	; 0x2fa2 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_SetPinDirection>:
#include "DIO_INTERFACE.h"



void DIO_SetPinDirection(u8 Port , u8 Pin , u8 Direction)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <DIO_SetPinDirection+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <DIO_SetPinDirection+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	6a 83       	std	Y+2, r22	; 0x02
     b48:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	28 2f       	mov	r18, r24
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	3d 83       	std	Y+5, r19	; 0x05
     b52:	2c 83       	std	Y+4, r18	; 0x04
     b54:	8c 81       	ldd	r24, Y+4	; 0x04
     b56:	9d 81       	ldd	r25, Y+5	; 0x05
     b58:	81 30       	cpi	r24, 0x01	; 1
     b5a:	91 05       	cpc	r25, r1
     b5c:	09 f4       	brne	.+2      	; 0xb60 <DIO_SetPinDirection+0x2a>
     b5e:	47 c0       	rjmp	.+142    	; 0xbee <DIO_SetPinDirection+0xb8>
     b60:	2c 81       	ldd	r18, Y+4	; 0x04
     b62:	3d 81       	ldd	r19, Y+5	; 0x05
     b64:	22 30       	cpi	r18, 0x02	; 2
     b66:	31 05       	cpc	r19, r1
     b68:	2c f4       	brge	.+10     	; 0xb74 <DIO_SetPinDirection+0x3e>
     b6a:	8c 81       	ldd	r24, Y+4	; 0x04
     b6c:	9d 81       	ldd	r25, Y+5	; 0x05
     b6e:	00 97       	sbiw	r24, 0x00	; 0
     b70:	71 f0       	breq	.+28     	; 0xb8e <DIO_SetPinDirection+0x58>
     b72:	cb c0       	rjmp	.+406    	; 0xd0a <DIO_SetPinDirection+0x1d4>
     b74:	2c 81       	ldd	r18, Y+4	; 0x04
     b76:	3d 81       	ldd	r19, Y+5	; 0x05
     b78:	22 30       	cpi	r18, 0x02	; 2
     b7a:	31 05       	cpc	r19, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <DIO_SetPinDirection+0x4a>
     b7e:	67 c0       	rjmp	.+206    	; 0xc4e <DIO_SetPinDirection+0x118>
     b80:	8c 81       	ldd	r24, Y+4	; 0x04
     b82:	9d 81       	ldd	r25, Y+5	; 0x05
     b84:	83 30       	cpi	r24, 0x03	; 3
     b86:	91 05       	cpc	r25, r1
     b88:	09 f4       	brne	.+2      	; 0xb8c <DIO_SetPinDirection+0x56>
     b8a:	91 c0       	rjmp	.+290    	; 0xcae <DIO_SetPinDirection+0x178>
     b8c:	be c0       	rjmp	.+380    	; 0xd0a <DIO_SetPinDirection+0x1d4>
	{
		case DIO_PORTA: 
		if(Direction == DIO_INPUT) 
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	88 23       	and	r24, r24
     b92:	a9 f4       	brne	.+42     	; 0xbbe <DIO_SetPinDirection+0x88>
		{ 
			CLR_BIT(DDRA_REG,Pin);
     b94:	aa e3       	ldi	r26, 0x3A	; 58
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	ea e3       	ldi	r30, 0x3A	; 58
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	48 2f       	mov	r20, r24
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	28 2f       	mov	r18, r24
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	02 2e       	mov	r0, r18
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <DIO_SetPinDirection+0x7c>
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	0a 94       	dec	r0
     bb4:	e2 f7       	brpl	.-8      	; 0xbae <DIO_SetPinDirection+0x78>
     bb6:	80 95       	com	r24
     bb8:	84 23       	and	r24, r20
     bba:	8c 93       	st	X, r24
     bbc:	a6 c0       	rjmp	.+332    	; 0xd0a <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <DIO_SetPinDirection+0x90>
     bc4:	a2 c0       	rjmp	.+324    	; 0xd0a <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRA_REG,Pin);
     bc6:	aa e3       	ldi	r26, 0x3A	; 58
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	ea e3       	ldi	r30, 0x3A	; 58
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	48 2f       	mov	r20, r24
     bd2:	8a 81       	ldd	r24, Y+2	; 0x02
     bd4:	28 2f       	mov	r18, r24
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	02 2e       	mov	r0, r18
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <DIO_SetPinDirection+0xae>
     be0:	88 0f       	add	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	0a 94       	dec	r0
     be6:	e2 f7       	brpl	.-8      	; 0xbe0 <DIO_SetPinDirection+0xaa>
     be8:	84 2b       	or	r24, r20
     bea:	8c 93       	st	X, r24
     bec:	8e c0       	rjmp	.+284    	; 0xd0a <DIO_SetPinDirection+0x1d4>
		}  
		break;
		case DIO_PORTB: 
		if(Direction == DIO_INPUT) 
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	88 23       	and	r24, r24
     bf2:	a9 f4       	brne	.+42     	; 0xc1e <DIO_SetPinDirection+0xe8>
		{ 
			CLR_BIT(DDRB_REG,Pin);
     bf4:	a7 e3       	ldi	r26, 0x37	; 55
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e7 e3       	ldi	r30, 0x37	; 55
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	48 2f       	mov	r20, r24
     c00:	8a 81       	ldd	r24, Y+2	; 0x02
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	02 2e       	mov	r0, r18
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <DIO_SetPinDirection+0xdc>
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	0a 94       	dec	r0
     c14:	e2 f7       	brpl	.-8      	; 0xc0e <DIO_SetPinDirection+0xd8>
     c16:	80 95       	com	r24
     c18:	84 23       	and	r24, r20
     c1a:	8c 93       	st	X, r24
     c1c:	76 c0       	rjmp	.+236    	; 0xd0a <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	81 30       	cpi	r24, 0x01	; 1
     c22:	09 f0       	breq	.+2      	; 0xc26 <DIO_SetPinDirection+0xf0>
     c24:	72 c0       	rjmp	.+228    	; 0xd0a <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRB_REG,Pin);
     c26:	a7 e3       	ldi	r26, 0x37	; 55
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e7 e3       	ldi	r30, 0x37	; 55
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	48 2f       	mov	r20, r24
     c32:	8a 81       	ldd	r24, Y+2	; 0x02
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	02 2e       	mov	r0, r18
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_SetPinDirection+0x10e>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <DIO_SetPinDirection+0x10a>
     c48:	84 2b       	or	r24, r20
     c4a:	8c 93       	st	X, r24
     c4c:	5e c0       	rjmp	.+188    	; 0xd0a <DIO_SetPinDirection+0x1d4>
		}  
		break;
		case DIO_PORTC: 
		if(Direction == DIO_INPUT) 
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	88 23       	and	r24, r24
     c52:	a9 f4       	brne	.+42     	; 0xc7e <DIO_SetPinDirection+0x148>
		{ 
			CLR_BIT(DDRC_REG,Pin);
     c54:	a4 e3       	ldi	r26, 0x34	; 52
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e4 e3       	ldi	r30, 0x34	; 52
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	48 2f       	mov	r20, r24
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 2e       	mov	r0, r18
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <DIO_SetPinDirection+0x13c>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	0a 94       	dec	r0
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <DIO_SetPinDirection+0x138>
     c76:	80 95       	com	r24
     c78:	84 23       	and	r24, r20
     c7a:	8c 93       	st	X, r24
     c7c:	46 c0       	rjmp	.+140    	; 0xd0a <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	09 f0       	breq	.+2      	; 0xc86 <DIO_SetPinDirection+0x150>
     c84:	42 c0       	rjmp	.+132    	; 0xd0a <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRC_REG,Pin);
     c86:	a4 e3       	ldi	r26, 0x34	; 52
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e4 e3       	ldi	r30, 0x34	; 52
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	48 2f       	mov	r20, r24
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 2e       	mov	r0, r18
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <DIO_SetPinDirection+0x16e>
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	0a 94       	dec	r0
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <DIO_SetPinDirection+0x16a>
     ca8:	84 2b       	or	r24, r20
     caa:	8c 93       	st	X, r24
     cac:	2e c0       	rjmp	.+92     	; 0xd0a <DIO_SetPinDirection+0x1d4>
		}  
		break;
		case DIO_PORTD: 
		if(Direction == DIO_INPUT) 
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	88 23       	and	r24, r24
     cb2:	a9 f4       	brne	.+42     	; 0xcde <DIO_SetPinDirection+0x1a8>
		{ 
			CLR_BIT(DDRD_REG,Pin);
     cb4:	a1 e3       	ldi	r26, 0x31	; 49
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e1 e3       	ldi	r30, 0x31	; 49
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	48 2f       	mov	r20, r24
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	02 2e       	mov	r0, r18
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <DIO_SetPinDirection+0x19c>
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	0a 94       	dec	r0
     cd4:	e2 f7       	brpl	.-8      	; 0xcce <DIO_SetPinDirection+0x198>
     cd6:	80 95       	com	r24
     cd8:	84 23       	and	r24, r20
     cda:	8c 93       	st	X, r24
     cdc:	16 c0       	rjmp	.+44     	; 0xd0a <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	81 30       	cpi	r24, 0x01	; 1
     ce2:	99 f4       	brne	.+38     	; 0xd0a <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRD_REG,Pin);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <DIO_SetPinDirection+0x1cc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <DIO_SetPinDirection+0x1c8>
     d06:	84 2b       	or	r24, r20
     d08:	8c 93       	st	X, r24
		default:
		// " Port or Pin or Direction not valid "
		break;
	}
	
}
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <DIO_SetPinValue>:

void DIO_SetPinValue    (u8 Port , u8 Pin , u8 Value )
{
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <DIO_SetPinValue+0x6>
     d20:	00 d0       	rcall	.+0      	; 0xd22 <DIO_SetPinValue+0x8>
     d22:	0f 92       	push	r0
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	89 83       	std	Y+1, r24	; 0x01
     d2a:	6a 83       	std	Y+2, r22	; 0x02
     d2c:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	3d 83       	std	Y+5, r19	; 0x05
     d36:	2c 83       	std	Y+4, r18	; 0x04
     d38:	8c 81       	ldd	r24, Y+4	; 0x04
     d3a:	9d 81       	ldd	r25, Y+5	; 0x05
     d3c:	81 30       	cpi	r24, 0x01	; 1
     d3e:	91 05       	cpc	r25, r1
     d40:	09 f4       	brne	.+2      	; 0xd44 <DIO_SetPinValue+0x2a>
     d42:	47 c0       	rjmp	.+142    	; 0xdd2 <DIO_SetPinValue+0xb8>
     d44:	2c 81       	ldd	r18, Y+4	; 0x04
     d46:	3d 81       	ldd	r19, Y+5	; 0x05
     d48:	22 30       	cpi	r18, 0x02	; 2
     d4a:	31 05       	cpc	r19, r1
     d4c:	2c f4       	brge	.+10     	; 0xd58 <DIO_SetPinValue+0x3e>
     d4e:	8c 81       	ldd	r24, Y+4	; 0x04
     d50:	9d 81       	ldd	r25, Y+5	; 0x05
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	71 f0       	breq	.+28     	; 0xd72 <DIO_SetPinValue+0x58>
     d56:	cb c0       	rjmp	.+406    	; 0xeee <DIO_SetPinValue+0x1d4>
     d58:	2c 81       	ldd	r18, Y+4	; 0x04
     d5a:	3d 81       	ldd	r19, Y+5	; 0x05
     d5c:	22 30       	cpi	r18, 0x02	; 2
     d5e:	31 05       	cpc	r19, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <DIO_SetPinValue+0x4a>
     d62:	67 c0       	rjmp	.+206    	; 0xe32 <DIO_SetPinValue+0x118>
     d64:	8c 81       	ldd	r24, Y+4	; 0x04
     d66:	9d 81       	ldd	r25, Y+5	; 0x05
     d68:	83 30       	cpi	r24, 0x03	; 3
     d6a:	91 05       	cpc	r25, r1
     d6c:	09 f4       	brne	.+2      	; 0xd70 <DIO_SetPinValue+0x56>
     d6e:	91 c0       	rjmp	.+290    	; 0xe92 <DIO_SetPinValue+0x178>
     d70:	be c0       	rjmp	.+380    	; 0xeee <DIO_SetPinValue+0x1d4>
	{
		case DIO_PORTA: 
		if(Value == DIO_HIGH)
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	81 30       	cpi	r24, 0x01	; 1
     d76:	a1 f4       	brne	.+40     	; 0xda0 <DIO_SetPinValue+0x86>
		{ 
			SET_BIT(PORTA_REG,Pin);
     d78:	ab e3       	ldi	r26, 0x3B	; 59
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	eb e3       	ldi	r30, 0x3B	; 59
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	48 2f       	mov	r20, r24
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	02 2e       	mov	r0, r18
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <DIO_SetPinValue+0x7c>
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	0a 94       	dec	r0
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <DIO_SetPinValue+0x78>
     d9a:	84 2b       	or	r24, r20
     d9c:	8c 93       	st	X, r24
     d9e:	a7 c0       	rjmp	.+334    	; 0xeee <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	88 23       	and	r24, r24
     da4:	09 f0       	breq	.+2      	; 0xda8 <DIO_SetPinValue+0x8e>
     da6:	a3 c0       	rjmp	.+326    	; 0xeee <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTA_REG,Pin);
     da8:	ab e3       	ldi	r26, 0x3B	; 59
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	eb e3       	ldi	r30, 0x3B	; 59
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 2e       	mov	r0, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <DIO_SetPinValue+0xac>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <DIO_SetPinValue+0xa8>
     dca:	80 95       	com	r24
     dcc:	84 23       	and	r24, r20
     dce:	8c 93       	st	X, r24
     dd0:	8e c0       	rjmp	.+284    	; 0xeee <DIO_SetPinValue+0x1d4>
		}  
		break;
		case DIO_PORTB: 
		if(Value == DIO_HIGH)
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	a1 f4       	brne	.+40     	; 0xe00 <DIO_SetPinValue+0xe6>
		{ 
			SET_BIT(PORTB_REG,Pin);
     dd8:	a8 e3       	ldi	r26, 0x38	; 56
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e8 e3       	ldi	r30, 0x38	; 56
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 2e       	mov	r0, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_SetPinValue+0xdc>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_SetPinValue+0xd8>
     dfa:	84 2b       	or	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	77 c0       	rjmp	.+238    	; 0xeee <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	88 23       	and	r24, r24
     e04:	09 f0       	breq	.+2      	; 0xe08 <DIO_SetPinValue+0xee>
     e06:	73 c0       	rjmp	.+230    	; 0xeee <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTB_REG,Pin);
     e08:	a8 e3       	ldi	r26, 0x38	; 56
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e8 e3       	ldi	r30, 0x38	; 56
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <DIO_SetPinValue+0x10c>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <DIO_SetPinValue+0x108>
     e2a:	80 95       	com	r24
     e2c:	84 23       	and	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	5e c0       	rjmp	.+188    	; 0xeee <DIO_SetPinValue+0x1d4>
		}  
		break;
		case DIO_PORTC: 
		if(Value == DIO_HIGH)
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	a1 f4       	brne	.+40     	; 0xe60 <DIO_SetPinValue+0x146>
		{ 
			SET_BIT(PORTC_REG,Pin);
     e38:	a5 e3       	ldi	r26, 0x35	; 53
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e5 e3       	ldi	r30, 0x35	; 53
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <DIO_SetPinValue+0x13c>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <DIO_SetPinValue+0x138>
     e5a:	84 2b       	or	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	47 c0       	rjmp	.+142    	; 0xeee <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	88 23       	and	r24, r24
     e64:	09 f0       	breq	.+2      	; 0xe68 <DIO_SetPinValue+0x14e>
     e66:	43 c0       	rjmp	.+134    	; 0xeee <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTC_REG,Pin);
     e68:	a5 e3       	ldi	r26, 0x35	; 53
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e5 e3       	ldi	r30, 0x35	; 53
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <DIO_SetPinValue+0x16c>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <DIO_SetPinValue+0x168>
     e8a:	80 95       	com	r24
     e8c:	84 23       	and	r24, r20
     e8e:	8c 93       	st	X, r24
     e90:	2e c0       	rjmp	.+92     	; 0xeee <DIO_SetPinValue+0x1d4>
		}  
		break;
		case DIO_PORTD: 
		if(Value == DIO_HIGH)
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	a1 f4       	brne	.+40     	; 0xec0 <DIO_SetPinValue+0x1a6>
		{ 
			SET_BIT(PORTD_REG,Pin);
     e98:	a2 e3       	ldi	r26, 0x32	; 50
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e2 e3       	ldi	r30, 0x32	; 50
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 2e       	mov	r0, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <DIO_SetPinValue+0x19c>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <DIO_SetPinValue+0x198>
     eba:	84 2b       	or	r24, r20
     ebc:	8c 93       	st	X, r24
     ebe:	17 c0       	rjmp	.+46     	; 0xeee <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	88 23       	and	r24, r24
     ec4:	a1 f4       	brne	.+40     	; 0xeee <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTD_REG,Pin);
     ec6:	a2 e3       	ldi	r26, 0x32	; 50
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e2 e3       	ldi	r30, 0x32	; 50
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 2e       	mov	r0, r18
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <DIO_SetPinValue+0x1ca>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	0a 94       	dec	r0
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <DIO_SetPinValue+0x1c6>
     ee8:	80 95       	com	r24
     eea:	84 23       	and	r24, r20
     eec:	8c 93       	st	X, r24
		default:
		// " Port or Pin or Value not valid "
		break;
	}
	
}
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <DIO_GetPinValue>:

u8   DIO_GetPinValue    (u8 Port , u8 Pin )
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	00 d0       	rcall	.+0      	; 0xf04 <DIO_GetPinValue+0x6>
     f04:	00 d0       	rcall	.+0      	; 0xf06 <DIO_GetPinValue+0x8>
     f06:	0f 92       	push	r0
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	8a 83       	std	Y+2, r24	; 0x02
     f0e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Value;
	switch(Port)
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	3d 83       	std	Y+5, r19	; 0x05
     f18:	2c 83       	std	Y+4, r18	; 0x04
     f1a:	4c 81       	ldd	r20, Y+4	; 0x04
     f1c:	5d 81       	ldd	r21, Y+5	; 0x05
     f1e:	41 30       	cpi	r20, 0x01	; 1
     f20:	51 05       	cpc	r21, r1
     f22:	41 f1       	breq	.+80     	; 0xf74 <DIO_GetPinValue+0x76>
     f24:	8c 81       	ldd	r24, Y+4	; 0x04
     f26:	9d 81       	ldd	r25, Y+5	; 0x05
     f28:	82 30       	cpi	r24, 0x02	; 2
     f2a:	91 05       	cpc	r25, r1
     f2c:	34 f4       	brge	.+12     	; 0xf3a <DIO_GetPinValue+0x3c>
     f2e:	2c 81       	ldd	r18, Y+4	; 0x04
     f30:	3d 81       	ldd	r19, Y+5	; 0x05
     f32:	21 15       	cp	r18, r1
     f34:	31 05       	cpc	r19, r1
     f36:	61 f0       	breq	.+24     	; 0xf50 <DIO_GetPinValue+0x52>
     f38:	52 c0       	rjmp	.+164    	; 0xfde <DIO_GetPinValue+0xe0>
     f3a:	4c 81       	ldd	r20, Y+4	; 0x04
     f3c:	5d 81       	ldd	r21, Y+5	; 0x05
     f3e:	42 30       	cpi	r20, 0x02	; 2
     f40:	51 05       	cpc	r21, r1
     f42:	51 f1       	breq	.+84     	; 0xf98 <DIO_GetPinValue+0x9a>
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	9d 81       	ldd	r25, Y+5	; 0x05
     f48:	83 30       	cpi	r24, 0x03	; 3
     f4a:	91 05       	cpc	r25, r1
     f4c:	b9 f1       	breq	.+110    	; 0xfbc <DIO_GetPinValue+0xbe>
     f4e:	47 c0       	rjmp	.+142    	; 0xfde <DIO_GetPinValue+0xe0>
	{
		case DIO_PORTA: Value = GET_BIT(PINA_REG,Pin); break;
     f50:	e9 e3       	ldi	r30, 0x39	; 57
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	88 2f       	mov	r24, r24
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	a9 01       	movw	r20, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_GetPinValue+0x6a>
     f64:	55 95       	asr	r21
     f66:	47 95       	ror	r20
     f68:	8a 95       	dec	r24
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_GetPinValue+0x66>
     f6c:	ca 01       	movw	r24, r20
     f6e:	81 70       	andi	r24, 0x01	; 1
     f70:	89 83       	std	Y+1, r24	; 0x01
     f72:	35 c0       	rjmp	.+106    	; 0xfde <DIO_GetPinValue+0xe0>
		case DIO_PORTB: Value = GET_BIT(PINB_REG,Pin); break;
     f74:	e6 e3       	ldi	r30, 0x36	; 54
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	a9 01       	movw	r20, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_GetPinValue+0x8e>
     f88:	55 95       	asr	r21
     f8a:	47 95       	ror	r20
     f8c:	8a 95       	dec	r24
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_GetPinValue+0x8a>
     f90:	ca 01       	movw	r24, r20
     f92:	81 70       	andi	r24, 0x01	; 1
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	23 c0       	rjmp	.+70     	; 0xfde <DIO_GetPinValue+0xe0>
		case DIO_PORTC: Value = GET_BIT(PINC_REG,Pin); break;
     f98:	e3 e3       	ldi	r30, 0x33	; 51
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	88 2f       	mov	r24, r24
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	a9 01       	movw	r20, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_GetPinValue+0xb2>
     fac:	55 95       	asr	r21
     fae:	47 95       	ror	r20
     fb0:	8a 95       	dec	r24
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_GetPinValue+0xae>
     fb4:	ca 01       	movw	r24, r20
     fb6:	81 70       	andi	r24, 0x01	; 1
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	11 c0       	rjmp	.+34     	; 0xfde <DIO_GetPinValue+0xe0>
		case DIO_PORTD: Value = GET_BIT(PIND_REG,Pin); break;
     fbc:	e0 e3       	ldi	r30, 0x30	; 48
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	a9 01       	movw	r20, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <DIO_GetPinValue+0xd6>
     fd0:	55 95       	asr	r21
     fd2:	47 95       	ror	r20
     fd4:	8a 95       	dec	r24
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <DIO_GetPinValue+0xd2>
     fd8:	ca 01       	movw	r24, r20
     fda:	81 70       	andi	r24, 0x01	; 1
     fdc:	89 83       	std	Y+1, r24	; 0x01
		default:
		break;
	}
	return Value;
     fde:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <DIO_SetPortDirection>:

void DIO_SetPortDirection(u8 Port , u8 Direction)
{
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <DIO_SetPortDirection+0x6>
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <DIO_SetPortDirection+0x8>
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	89 83       	std	Y+1, r24	; 0x01
     ffe:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	3c 83       	std	Y+4, r19	; 0x04
    1008:	2b 83       	std	Y+3, r18	; 0x03
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	9c 81       	ldd	r25, Y+4	; 0x04
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	91 05       	cpc	r25, r1
    1012:	d1 f0       	breq	.+52     	; 0x1048 <DIO_SetPortDirection+0x58>
    1014:	2b 81       	ldd	r18, Y+3	; 0x03
    1016:	3c 81       	ldd	r19, Y+4	; 0x04
    1018:	22 30       	cpi	r18, 0x02	; 2
    101a:	31 05       	cpc	r19, r1
    101c:	2c f4       	brge	.+10     	; 0x1028 <DIO_SetPortDirection+0x38>
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	9c 81       	ldd	r25, Y+4	; 0x04
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	61 f0       	breq	.+24     	; 0x103e <DIO_SetPortDirection+0x4e>
    1026:	1e c0       	rjmp	.+60     	; 0x1064 <DIO_SetPortDirection+0x74>
    1028:	2b 81       	ldd	r18, Y+3	; 0x03
    102a:	3c 81       	ldd	r19, Y+4	; 0x04
    102c:	22 30       	cpi	r18, 0x02	; 2
    102e:	31 05       	cpc	r19, r1
    1030:	81 f0       	breq	.+32     	; 0x1052 <DIO_SetPortDirection+0x62>
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	9c 81       	ldd	r25, Y+4	; 0x04
    1036:	83 30       	cpi	r24, 0x03	; 3
    1038:	91 05       	cpc	r25, r1
    103a:	81 f0       	breq	.+32     	; 0x105c <DIO_SetPortDirection+0x6c>
    103c:	13 c0       	rjmp	.+38     	; 0x1064 <DIO_SetPortDirection+0x74>
	{
		case DIO_PORTA: DDRA_REG = Direction; break;
    103e:	ea e3       	ldi	r30, 0x3A	; 58
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	80 83       	st	Z, r24
    1046:	0e c0       	rjmp	.+28     	; 0x1064 <DIO_SetPortDirection+0x74>
		case DIO_PORTB: DDRB_REG = Direction; break;
    1048:	e7 e3       	ldi	r30, 0x37	; 55
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	80 83       	st	Z, r24
    1050:	09 c0       	rjmp	.+18     	; 0x1064 <DIO_SetPortDirection+0x74>
		case DIO_PORTC: DDRC_REG = Direction; break;
    1052:	e4 e3       	ldi	r30, 0x34	; 52
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	80 83       	st	Z, r24
    105a:	04 c0       	rjmp	.+8      	; 0x1064 <DIO_SetPortDirection+0x74>
		case DIO_PORTD: DDRD_REG = Direction; break;
    105c:	e1 e3       	ldi	r30, 0x31	; 49
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	80 83       	st	Z, r24
		default:
		break;
	}
}
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <DIO_SetPortValue>:


void DIO_SetPortValue    (u8 Port , u8 Value   )
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	00 d0       	rcall	.+0      	; 0x1078 <DIO_SetPortValue+0x6>
    1078:	00 d0       	rcall	.+0      	; 0x107a <DIO_SetPortValue+0x8>
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	89 83       	std	Y+1, r24	; 0x01
    1080:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	3c 83       	std	Y+4, r19	; 0x04
    108a:	2b 83       	std	Y+3, r18	; 0x03
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	91 05       	cpc	r25, r1
    1094:	d1 f0       	breq	.+52     	; 0x10ca <DIO_SetPortValue+0x58>
    1096:	2b 81       	ldd	r18, Y+3	; 0x03
    1098:	3c 81       	ldd	r19, Y+4	; 0x04
    109a:	22 30       	cpi	r18, 0x02	; 2
    109c:	31 05       	cpc	r19, r1
    109e:	2c f4       	brge	.+10     	; 0x10aa <DIO_SetPortValue+0x38>
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	9c 81       	ldd	r25, Y+4	; 0x04
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	61 f0       	breq	.+24     	; 0x10c0 <DIO_SetPortValue+0x4e>
    10a8:	1e c0       	rjmp	.+60     	; 0x10e6 <DIO_SetPortValue+0x74>
    10aa:	2b 81       	ldd	r18, Y+3	; 0x03
    10ac:	3c 81       	ldd	r19, Y+4	; 0x04
    10ae:	22 30       	cpi	r18, 0x02	; 2
    10b0:	31 05       	cpc	r19, r1
    10b2:	81 f0       	breq	.+32     	; 0x10d4 <DIO_SetPortValue+0x62>
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	9c 81       	ldd	r25, Y+4	; 0x04
    10b8:	83 30       	cpi	r24, 0x03	; 3
    10ba:	91 05       	cpc	r25, r1
    10bc:	81 f0       	breq	.+32     	; 0x10de <DIO_SetPortValue+0x6c>
    10be:	13 c0       	rjmp	.+38     	; 0x10e6 <DIO_SetPortValue+0x74>
	{
		case DIO_PORTA: PORTA_REG = Value; break;
    10c0:	eb e3       	ldi	r30, 0x3B	; 59
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	80 83       	st	Z, r24
    10c8:	0e c0       	rjmp	.+28     	; 0x10e6 <DIO_SetPortValue+0x74>
		case DIO_PORTB: PORTB_REG = Value; break;
    10ca:	e8 e3       	ldi	r30, 0x38	; 56
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	80 83       	st	Z, r24
    10d2:	09 c0       	rjmp	.+18     	; 0x10e6 <DIO_SetPortValue+0x74>
		case DIO_PORTC: PORTC_REG = Value; break;
    10d4:	e5 e3       	ldi	r30, 0x35	; 53
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	80 83       	st	Z, r24
    10dc:	04 c0       	rjmp	.+8      	; 0x10e6 <DIO_SetPortValue+0x74>
		case DIO_PORTD: PORTD_REG = Value; break;
    10de:	e2 e3       	ldi	r30, 0x32	; 50
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	80 83       	st	Z, r24
		default:
		break;
	}
}
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <STEPER_voidInit>:
#include "STEPER_PRIVET.h"



void STEPER_voidInit(void)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62

	DIO_SetPinDirection(BLUE_WIRE,DIO_OUTPUT);
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	67 e0       	ldi	r22, 0x07	; 7
    1100:	41 e0       	ldi	r20, 0x01	; 1
    1102:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinDirection>
	DIO_SetPinDirection(ORANGE_WIRE,DIO_OUTPUT);
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	64 e0       	ldi	r22, 0x04	; 4
    110a:	41 e0       	ldi	r20, 0x01	; 1
    110c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinDirection>
	DIO_SetPinDirection(YELLOW_WIRE,DIO_OUTPUT);
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	65 e0       	ldi	r22, 0x05	; 5
    1114:	41 e0       	ldi	r20, 0x01	; 1
    1116:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinDirection>
	DIO_SetPinDirection(RED_WIRE,DIO_OUTPUT);
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	66 e0       	ldi	r22, 0x06	; 6
    111e:	41 e0       	ldi	r20, 0x01	; 1
    1120:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinDirection>

}
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <STEPER_voidFullStep>:
void STEPER_voidFullStep(void)
{
    112a:	0f 93       	push	r16
    112c:	1f 93       	push	r17
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	c6 54       	subi	r28, 0x46	; 70
    1138:	d0 40       	sbci	r29, 0x00	; 0
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinValue(BLUE_WIRE,DIO_HIGH);
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	67 e0       	ldi	r22, 0x07	; 7
    1148:	41 e0       	ldi	r20, 0x01	; 1
    114a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_LOW);
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	64 e0       	ldi	r22, 0x04	; 4
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_LOW);
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	65 e0       	ldi	r22, 0x05	; 5
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_LOW);
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	66 e0       	ldi	r22, 0x06	; 6
    1166:	40 e0       	ldi	r20, 0x00	; 0
    1168:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
    116c:	fe 01       	movw	r30, r28
    116e:	ed 5b       	subi	r30, 0xBD	; 189
    1170:	ff 4f       	sbci	r31, 0xFF	; 255
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	90 e8       	ldi	r25, 0x80	; 128
    1176:	ab eb       	ldi	r26, 0xBB	; 187
    1178:	b4 e4       	ldi	r27, 0x44	; 68
    117a:	80 83       	st	Z, r24
    117c:	91 83       	std	Z+1, r25	; 0x01
    117e:	a2 83       	std	Z+2, r26	; 0x02
    1180:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1182:	8e 01       	movw	r16, r28
    1184:	01 5c       	subi	r16, 0xC1	; 193
    1186:	1f 4f       	sbci	r17, 0xFF	; 255
    1188:	fe 01       	movw	r30, r28
    118a:	ed 5b       	subi	r30, 0xBD	; 189
    118c:	ff 4f       	sbci	r31, 0xFF	; 255
    118e:	60 81       	ld	r22, Z
    1190:	71 81       	ldd	r23, Z+1	; 0x01
    1192:	82 81       	ldd	r24, Z+2	; 0x02
    1194:	93 81       	ldd	r25, Z+3	; 0x03
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	4a ef       	ldi	r20, 0xFA	; 250
    119c:	54 e4       	ldi	r21, 0x44	; 68
    119e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	f8 01       	movw	r30, r16
    11a8:	80 83       	st	Z, r24
    11aa:	91 83       	std	Z+1, r25	; 0x01
    11ac:	a2 83       	std	Z+2, r26	; 0x02
    11ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11b0:	fe 01       	movw	r30, r28
    11b2:	ff 96       	adiw	r30, 0x3f	; 63
    11b4:	60 81       	ld	r22, Z
    11b6:	71 81       	ldd	r23, Z+1	; 0x01
    11b8:	82 81       	ldd	r24, Z+2	; 0x02
    11ba:	93 81       	ldd	r25, Z+3	; 0x03
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e8       	ldi	r20, 0x80	; 128
    11c2:	5f e3       	ldi	r21, 0x3F	; 63
    11c4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    11c8:	88 23       	and	r24, r24
    11ca:	2c f4       	brge	.+10     	; 0x11d6 <STEPER_voidFullStep+0xac>
		__ticks = 1;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	9e af       	std	Y+62, r25	; 0x3e
    11d2:	8d af       	std	Y+61, r24	; 0x3d
    11d4:	46 c0       	rjmp	.+140    	; 0x1262 <STEPER_voidFullStep+0x138>
	else if (__tmp > 65535)
    11d6:	fe 01       	movw	r30, r28
    11d8:	ff 96       	adiw	r30, 0x3f	; 63
    11da:	60 81       	ld	r22, Z
    11dc:	71 81       	ldd	r23, Z+1	; 0x01
    11de:	82 81       	ldd	r24, Z+2	; 0x02
    11e0:	93 81       	ldd	r25, Z+3	; 0x03
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	3f ef       	ldi	r19, 0xFF	; 255
    11e6:	4f e7       	ldi	r20, 0x7F	; 127
    11e8:	57 e4       	ldi	r21, 0x47	; 71
    11ea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    11ee:	18 16       	cp	r1, r24
    11f0:	64 f5       	brge	.+88     	; 0x124a <STEPER_voidFullStep+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f2:	fe 01       	movw	r30, r28
    11f4:	ed 5b       	subi	r30, 0xBD	; 189
    11f6:	ff 4f       	sbci	r31, 0xFF	; 255
    11f8:	60 81       	ld	r22, Z
    11fa:	71 81       	ldd	r23, Z+1	; 0x01
    11fc:	82 81       	ldd	r24, Z+2	; 0x02
    11fe:	93 81       	ldd	r25, Z+3	; 0x03
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	40 e2       	ldi	r20, 0x20	; 32
    1206:	51 e4       	ldi	r21, 0x41	; 65
    1208:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	bc 01       	movw	r22, r24
    1212:	cd 01       	movw	r24, r26
    1214:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	9e af       	std	Y+62, r25	; 0x3e
    121e:	8d af       	std	Y+61, r24	; 0x3d
    1220:	0f c0       	rjmp	.+30     	; 0x1240 <STEPER_voidFullStep+0x116>
    1222:	88 ec       	ldi	r24, 0xC8	; 200
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	9c af       	std	Y+60, r25	; 0x3c
    1228:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    122a:	8b ad       	ldd	r24, Y+59	; 0x3b
    122c:	9c ad       	ldd	r25, Y+60	; 0x3c
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	f1 f7       	brne	.-4      	; 0x122e <STEPER_voidFullStep+0x104>
    1232:	9c af       	std	Y+60, r25	; 0x3c
    1234:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1236:	8d ad       	ldd	r24, Y+61	; 0x3d
    1238:	9e ad       	ldd	r25, Y+62	; 0x3e
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	9e af       	std	Y+62, r25	; 0x3e
    123e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1240:	8d ad       	ldd	r24, Y+61	; 0x3d
    1242:	9e ad       	ldd	r25, Y+62	; 0x3e
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	69 f7       	brne	.-38     	; 0x1222 <STEPER_voidFullStep+0xf8>
    1248:	16 c0       	rjmp	.+44     	; 0x1276 <STEPER_voidFullStep+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    124a:	fe 01       	movw	r30, r28
    124c:	ff 96       	adiw	r30, 0x3f	; 63
    124e:	60 81       	ld	r22, Z
    1250:	71 81       	ldd	r23, Z+1	; 0x01
    1252:	82 81       	ldd	r24, Z+2	; 0x02
    1254:	93 81       	ldd	r25, Z+3	; 0x03
    1256:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	9e af       	std	Y+62, r25	; 0x3e
    1260:	8d af       	std	Y+61, r24	; 0x3d
    1262:	8d ad       	ldd	r24, Y+61	; 0x3d
    1264:	9e ad       	ldd	r25, Y+62	; 0x3e
    1266:	9a af       	std	Y+58, r25	; 0x3a
    1268:	89 af       	std	Y+57, r24	; 0x39
    126a:	89 ad       	ldd	r24, Y+57	; 0x39
    126c:	9a ad       	ldd	r25, Y+58	; 0x3a
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	f1 f7       	brne	.-4      	; 0x126e <STEPER_voidFullStep+0x144>
    1272:	9a af       	std	Y+58, r25	; 0x3a
    1274:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1500);
	DIO_SetPinValue(BLUE_WIRE,DIO_LOW);
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	67 e0       	ldi	r22, 0x07	; 7
    127a:	40 e0       	ldi	r20, 0x00	; 0
    127c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_HIGH);
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	64 e0       	ldi	r22, 0x04	; 4
    1284:	41 e0       	ldi	r20, 0x01	; 1
    1286:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_LOW);
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	65 e0       	ldi	r22, 0x05	; 5
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_LOW);
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	66 e0       	ldi	r22, 0x06	; 6
    1298:	40 e0       	ldi	r20, 0x00	; 0
    129a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e8       	ldi	r25, 0x80	; 128
    12a2:	ab eb       	ldi	r26, 0xBB	; 187
    12a4:	b4 e4       	ldi	r27, 0x44	; 68
    12a6:	8d ab       	std	Y+53, r24	; 0x35
    12a8:	9e ab       	std	Y+54, r25	; 0x36
    12aa:	af ab       	std	Y+55, r26	; 0x37
    12ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ae:	6d a9       	ldd	r22, Y+53	; 0x35
    12b0:	7e a9       	ldd	r23, Y+54	; 0x36
    12b2:	8f a9       	ldd	r24, Y+55	; 0x37
    12b4:	98 ad       	ldd	r25, Y+56	; 0x38
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	4a ef       	ldi	r20, 0xFA	; 250
    12bc:	54 e4       	ldi	r21, 0x44	; 68
    12be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	89 ab       	std	Y+49, r24	; 0x31
    12c8:	9a ab       	std	Y+50, r25	; 0x32
    12ca:	ab ab       	std	Y+51, r26	; 0x33
    12cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12ce:	69 a9       	ldd	r22, Y+49	; 0x31
    12d0:	7a a9       	ldd	r23, Y+50	; 0x32
    12d2:	8b a9       	ldd	r24, Y+51	; 0x33
    12d4:	9c a9       	ldd	r25, Y+52	; 0x34
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e8       	ldi	r20, 0x80	; 128
    12dc:	5f e3       	ldi	r21, 0x3F	; 63
    12de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12e2:	88 23       	and	r24, r24
    12e4:	2c f4       	brge	.+10     	; 0x12f0 <STEPER_voidFullStep+0x1c6>
		__ticks = 1;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	98 ab       	std	Y+48, r25	; 0x30
    12ec:	8f a7       	std	Y+47, r24	; 0x2f
    12ee:	3f c0       	rjmp	.+126    	; 0x136e <STEPER_voidFullStep+0x244>
	else if (__tmp > 65535)
    12f0:	69 a9       	ldd	r22, Y+49	; 0x31
    12f2:	7a a9       	ldd	r23, Y+50	; 0x32
    12f4:	8b a9       	ldd	r24, Y+51	; 0x33
    12f6:	9c a9       	ldd	r25, Y+52	; 0x34
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	3f ef       	ldi	r19, 0xFF	; 255
    12fc:	4f e7       	ldi	r20, 0x7F	; 127
    12fe:	57 e4       	ldi	r21, 0x47	; 71
    1300:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1304:	18 16       	cp	r1, r24
    1306:	4c f5       	brge	.+82     	; 0x135a <STEPER_voidFullStep+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1308:	6d a9       	ldd	r22, Y+53	; 0x35
    130a:	7e a9       	ldd	r23, Y+54	; 0x36
    130c:	8f a9       	ldd	r24, Y+55	; 0x37
    130e:	98 ad       	ldd	r25, Y+56	; 0x38
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e2       	ldi	r20, 0x20	; 32
    1316:	51 e4       	ldi	r21, 0x41	; 65
    1318:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	bc 01       	movw	r22, r24
    1322:	cd 01       	movw	r24, r26
    1324:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	98 ab       	std	Y+48, r25	; 0x30
    132e:	8f a7       	std	Y+47, r24	; 0x2f
    1330:	0f c0       	rjmp	.+30     	; 0x1350 <STEPER_voidFullStep+0x226>
    1332:	88 ec       	ldi	r24, 0xC8	; 200
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	9e a7       	std	Y+46, r25	; 0x2e
    1338:	8d a7       	std	Y+45, r24	; 0x2d
    133a:	8d a5       	ldd	r24, Y+45	; 0x2d
    133c:	9e a5       	ldd	r25, Y+46	; 0x2e
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <STEPER_voidFullStep+0x214>
    1342:	9e a7       	std	Y+46, r25	; 0x2e
    1344:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1346:	8f a5       	ldd	r24, Y+47	; 0x2f
    1348:	98 a9       	ldd	r25, Y+48	; 0x30
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	98 ab       	std	Y+48, r25	; 0x30
    134e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1350:	8f a5       	ldd	r24, Y+47	; 0x2f
    1352:	98 a9       	ldd	r25, Y+48	; 0x30
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	69 f7       	brne	.-38     	; 0x1332 <STEPER_voidFullStep+0x208>
    1358:	14 c0       	rjmp	.+40     	; 0x1382 <STEPER_voidFullStep+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    135a:	69 a9       	ldd	r22, Y+49	; 0x31
    135c:	7a a9       	ldd	r23, Y+50	; 0x32
    135e:	8b a9       	ldd	r24, Y+51	; 0x33
    1360:	9c a9       	ldd	r25, Y+52	; 0x34
    1362:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	98 ab       	std	Y+48, r25	; 0x30
    136c:	8f a7       	std	Y+47, r24	; 0x2f
    136e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1370:	98 a9       	ldd	r25, Y+48	; 0x30
    1372:	9c a7       	std	Y+44, r25	; 0x2c
    1374:	8b a7       	std	Y+43, r24	; 0x2b
    1376:	8b a5       	ldd	r24, Y+43	; 0x2b
    1378:	9c a5       	ldd	r25, Y+44	; 0x2c
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <STEPER_voidFullStep+0x250>
    137e:	9c a7       	std	Y+44, r25	; 0x2c
    1380:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1500);
	DIO_SetPinValue(BLUE_WIRE,DIO_LOW);
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	67 e0       	ldi	r22, 0x07	; 7
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_LOW);
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	64 e0       	ldi	r22, 0x04	; 4
    1390:	40 e0       	ldi	r20, 0x00	; 0
    1392:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_HIGH);
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	65 e0       	ldi	r22, 0x05	; 5
    139a:	41 e0       	ldi	r20, 0x01	; 1
    139c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_LOW);
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	66 e0       	ldi	r22, 0x06	; 6
    13a4:	40 e0       	ldi	r20, 0x00	; 0
    13a6:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e8       	ldi	r25, 0x80	; 128
    13ae:	ab eb       	ldi	r26, 0xBB	; 187
    13b0:	b4 e4       	ldi	r27, 0x44	; 68
    13b2:	8f a3       	std	Y+39, r24	; 0x27
    13b4:	98 a7       	std	Y+40, r25	; 0x28
    13b6:	a9 a7       	std	Y+41, r26	; 0x29
    13b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ba:	6f a1       	ldd	r22, Y+39	; 0x27
    13bc:	78 a5       	ldd	r23, Y+40	; 0x28
    13be:	89 a5       	ldd	r24, Y+41	; 0x29
    13c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	4a ef       	ldi	r20, 0xFA	; 250
    13c8:	54 e4       	ldi	r21, 0x44	; 68
    13ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	8b a3       	std	Y+35, r24	; 0x23
    13d4:	9c a3       	std	Y+36, r25	; 0x24
    13d6:	ad a3       	std	Y+37, r26	; 0x25
    13d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13da:	6b a1       	ldd	r22, Y+35	; 0x23
    13dc:	7c a1       	ldd	r23, Y+36	; 0x24
    13de:	8d a1       	ldd	r24, Y+37	; 0x25
    13e0:	9e a1       	ldd	r25, Y+38	; 0x26
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e8       	ldi	r20, 0x80	; 128
    13e8:	5f e3       	ldi	r21, 0x3F	; 63
    13ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13ee:	88 23       	and	r24, r24
    13f0:	2c f4       	brge	.+10     	; 0x13fc <STEPER_voidFullStep+0x2d2>
		__ticks = 1;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	9a a3       	std	Y+34, r25	; 0x22
    13f8:	89 a3       	std	Y+33, r24	; 0x21
    13fa:	3f c0       	rjmp	.+126    	; 0x147a <STEPER_voidFullStep+0x350>
	else if (__tmp > 65535)
    13fc:	6b a1       	ldd	r22, Y+35	; 0x23
    13fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1400:	8d a1       	ldd	r24, Y+37	; 0x25
    1402:	9e a1       	ldd	r25, Y+38	; 0x26
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	3f ef       	ldi	r19, 0xFF	; 255
    1408:	4f e7       	ldi	r20, 0x7F	; 127
    140a:	57 e4       	ldi	r21, 0x47	; 71
    140c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1410:	18 16       	cp	r1, r24
    1412:	4c f5       	brge	.+82     	; 0x1466 <STEPER_voidFullStep+0x33c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1414:	6f a1       	ldd	r22, Y+39	; 0x27
    1416:	78 a5       	ldd	r23, Y+40	; 0x28
    1418:	89 a5       	ldd	r24, Y+41	; 0x29
    141a:	9a a5       	ldd	r25, Y+42	; 0x2a
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e2       	ldi	r20, 0x20	; 32
    1422:	51 e4       	ldi	r21, 0x41	; 65
    1424:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	bc 01       	movw	r22, r24
    142e:	cd 01       	movw	r24, r26
    1430:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	9a a3       	std	Y+34, r25	; 0x22
    143a:	89 a3       	std	Y+33, r24	; 0x21
    143c:	0f c0       	rjmp	.+30     	; 0x145c <STEPER_voidFullStep+0x332>
    143e:	88 ec       	ldi	r24, 0xC8	; 200
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	98 a3       	std	Y+32, r25	; 0x20
    1444:	8f 8f       	std	Y+31, r24	; 0x1f
    1446:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1448:	98 a1       	ldd	r25, Y+32	; 0x20
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	f1 f7       	brne	.-4      	; 0x144a <STEPER_voidFullStep+0x320>
    144e:	98 a3       	std	Y+32, r25	; 0x20
    1450:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1452:	89 a1       	ldd	r24, Y+33	; 0x21
    1454:	9a a1       	ldd	r25, Y+34	; 0x22
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	9a a3       	std	Y+34, r25	; 0x22
    145a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145c:	89 a1       	ldd	r24, Y+33	; 0x21
    145e:	9a a1       	ldd	r25, Y+34	; 0x22
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	69 f7       	brne	.-38     	; 0x143e <STEPER_voidFullStep+0x314>
    1464:	14 c0       	rjmp	.+40     	; 0x148e <STEPER_voidFullStep+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1466:	6b a1       	ldd	r22, Y+35	; 0x23
    1468:	7c a1       	ldd	r23, Y+36	; 0x24
    146a:	8d a1       	ldd	r24, Y+37	; 0x25
    146c:	9e a1       	ldd	r25, Y+38	; 0x26
    146e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	9a a3       	std	Y+34, r25	; 0x22
    1478:	89 a3       	std	Y+33, r24	; 0x21
    147a:	89 a1       	ldd	r24, Y+33	; 0x21
    147c:	9a a1       	ldd	r25, Y+34	; 0x22
    147e:	9e 8f       	std	Y+30, r25	; 0x1e
    1480:	8d 8f       	std	Y+29, r24	; 0x1d
    1482:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1484:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	f1 f7       	brne	.-4      	; 0x1486 <STEPER_voidFullStep+0x35c>
    148a:	9e 8f       	std	Y+30, r25	; 0x1e
    148c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1500);
	DIO_SetPinValue(BLUE_WIRE,DIO_LOW);
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	67 e0       	ldi	r22, 0x07	; 7
    1492:	40 e0       	ldi	r20, 0x00	; 0
    1494:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_LOW);
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	64 e0       	ldi	r22, 0x04	; 4
    149c:	40 e0       	ldi	r20, 0x00	; 0
    149e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_LOW);
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	65 e0       	ldi	r22, 0x05	; 5
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_HIGH);
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	66 e0       	ldi	r22, 0x06	; 6
    14b0:	41 e0       	ldi	r20, 0x01	; 1
    14b2:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	90 e8       	ldi	r25, 0x80	; 128
    14ba:	ab eb       	ldi	r26, 0xBB	; 187
    14bc:	b4 e4       	ldi	r27, 0x44	; 68
    14be:	89 8f       	std	Y+25, r24	; 0x19
    14c0:	9a 8f       	std	Y+26, r25	; 0x1a
    14c2:	ab 8f       	std	Y+27, r26	; 0x1b
    14c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c6:	69 8d       	ldd	r22, Y+25	; 0x19
    14c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	4a ef       	ldi	r20, 0xFA	; 250
    14d4:	54 e4       	ldi	r21, 0x44	; 68
    14d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	8d 8b       	std	Y+21, r24	; 0x15
    14e0:	9e 8b       	std	Y+22, r25	; 0x16
    14e2:	af 8b       	std	Y+23, r26	; 0x17
    14e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14e6:	6d 89       	ldd	r22, Y+21	; 0x15
    14e8:	7e 89       	ldd	r23, Y+22	; 0x16
    14ea:	8f 89       	ldd	r24, Y+23	; 0x17
    14ec:	98 8d       	ldd	r25, Y+24	; 0x18
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e8       	ldi	r20, 0x80	; 128
    14f4:	5f e3       	ldi	r21, 0x3F	; 63
    14f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14fa:	88 23       	and	r24, r24
    14fc:	2c f4       	brge	.+10     	; 0x1508 <STEPER_voidFullStep+0x3de>
		__ticks = 1;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	9c 8b       	std	Y+20, r25	; 0x14
    1504:	8b 8b       	std	Y+19, r24	; 0x13
    1506:	3f c0       	rjmp	.+126    	; 0x1586 <STEPER_voidFullStep+0x45c>
	else if (__tmp > 65535)
    1508:	6d 89       	ldd	r22, Y+21	; 0x15
    150a:	7e 89       	ldd	r23, Y+22	; 0x16
    150c:	8f 89       	ldd	r24, Y+23	; 0x17
    150e:	98 8d       	ldd	r25, Y+24	; 0x18
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	3f ef       	ldi	r19, 0xFF	; 255
    1514:	4f e7       	ldi	r20, 0x7F	; 127
    1516:	57 e4       	ldi	r21, 0x47	; 71
    1518:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    151c:	18 16       	cp	r1, r24
    151e:	4c f5       	brge	.+82     	; 0x1572 <STEPER_voidFullStep+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1520:	69 8d       	ldd	r22, Y+25	; 0x19
    1522:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1524:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1526:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e2       	ldi	r20, 0x20	; 32
    152e:	51 e4       	ldi	r21, 0x41	; 65
    1530:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	bc 01       	movw	r22, r24
    153a:	cd 01       	movw	r24, r26
    153c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	9c 8b       	std	Y+20, r25	; 0x14
    1546:	8b 8b       	std	Y+19, r24	; 0x13
    1548:	0f c0       	rjmp	.+30     	; 0x1568 <STEPER_voidFullStep+0x43e>
    154a:	88 ec       	ldi	r24, 0xC8	; 200
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	9a 8b       	std	Y+18, r25	; 0x12
    1550:	89 8b       	std	Y+17, r24	; 0x11
    1552:	89 89       	ldd	r24, Y+17	; 0x11
    1554:	9a 89       	ldd	r25, Y+18	; 0x12
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	f1 f7       	brne	.-4      	; 0x1556 <STEPER_voidFullStep+0x42c>
    155a:	9a 8b       	std	Y+18, r25	; 0x12
    155c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155e:	8b 89       	ldd	r24, Y+19	; 0x13
    1560:	9c 89       	ldd	r25, Y+20	; 0x14
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	9c 8b       	std	Y+20, r25	; 0x14
    1566:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1568:	8b 89       	ldd	r24, Y+19	; 0x13
    156a:	9c 89       	ldd	r25, Y+20	; 0x14
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	69 f7       	brne	.-38     	; 0x154a <STEPER_voidFullStep+0x420>
    1570:	14 c0       	rjmp	.+40     	; 0x159a <STEPER_voidFullStep+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1572:	6d 89       	ldd	r22, Y+21	; 0x15
    1574:	7e 89       	ldd	r23, Y+22	; 0x16
    1576:	8f 89       	ldd	r24, Y+23	; 0x17
    1578:	98 8d       	ldd	r25, Y+24	; 0x18
    157a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	9c 8b       	std	Y+20, r25	; 0x14
    1584:	8b 8b       	std	Y+19, r24	; 0x13
    1586:	8b 89       	ldd	r24, Y+19	; 0x13
    1588:	9c 89       	ldd	r25, Y+20	; 0x14
    158a:	98 8b       	std	Y+16, r25	; 0x10
    158c:	8f 87       	std	Y+15, r24	; 0x0f
    158e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1590:	98 89       	ldd	r25, Y+16	; 0x10
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	f1 f7       	brne	.-4      	; 0x1592 <STEPER_voidFullStep+0x468>
    1596:	98 8b       	std	Y+16, r25	; 0x10
    1598:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1500);
	DIO_SetPinValue(BLUE_WIRE,DIO_HIGH);
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	67 e0       	ldi	r22, 0x07	; 7
    159e:	41 e0       	ldi	r20, 0x01	; 1
    15a0:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_LOW);
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	64 e0       	ldi	r22, 0x04	; 4
    15a8:	40 e0       	ldi	r20, 0x00	; 0
    15aa:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_LOW);
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	65 e0       	ldi	r22, 0x05	; 5
    15b2:	40 e0       	ldi	r20, 0x00	; 0
    15b4:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_LOW);
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	66 e0       	ldi	r22, 0x06	; 6
    15bc:	40 e0       	ldi	r20, 0x00	; 0
    15be:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	90 e8       	ldi	r25, 0x80	; 128
    15c6:	ab eb       	ldi	r26, 0xBB	; 187
    15c8:	b4 e4       	ldi	r27, 0x44	; 68
    15ca:	8b 87       	std	Y+11, r24	; 0x0b
    15cc:	9c 87       	std	Y+12, r25	; 0x0c
    15ce:	ad 87       	std	Y+13, r26	; 0x0d
    15d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	4a ef       	ldi	r20, 0xFA	; 250
    15e0:	54 e4       	ldi	r21, 0x44	; 68
    15e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	8f 83       	std	Y+7, r24	; 0x07
    15ec:	98 87       	std	Y+8, r25	; 0x08
    15ee:	a9 87       	std	Y+9, r26	; 0x09
    15f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15f2:	6f 81       	ldd	r22, Y+7	; 0x07
    15f4:	78 85       	ldd	r23, Y+8	; 0x08
    15f6:	89 85       	ldd	r24, Y+9	; 0x09
    15f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e8       	ldi	r20, 0x80	; 128
    1600:	5f e3       	ldi	r21, 0x3F	; 63
    1602:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1606:	88 23       	and	r24, r24
    1608:	2c f4       	brge	.+10     	; 0x1614 <STEPER_voidFullStep+0x4ea>
		__ticks = 1;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	9e 83       	std	Y+6, r25	; 0x06
    1610:	8d 83       	std	Y+5, r24	; 0x05
    1612:	3f c0       	rjmp	.+126    	; 0x1692 <STEPER_voidFullStep+0x568>
	else if (__tmp > 65535)
    1614:	6f 81       	ldd	r22, Y+7	; 0x07
    1616:	78 85       	ldd	r23, Y+8	; 0x08
    1618:	89 85       	ldd	r24, Y+9	; 0x09
    161a:	9a 85       	ldd	r25, Y+10	; 0x0a
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	3f ef       	ldi	r19, 0xFF	; 255
    1620:	4f e7       	ldi	r20, 0x7F	; 127
    1622:	57 e4       	ldi	r21, 0x47	; 71
    1624:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1628:	18 16       	cp	r1, r24
    162a:	4c f5       	brge	.+82     	; 0x167e <STEPER_voidFullStep+0x554>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162c:	6b 85       	ldd	r22, Y+11	; 0x0b
    162e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1630:	8d 85       	ldd	r24, Y+13	; 0x0d
    1632:	9e 85       	ldd	r25, Y+14	; 0x0e
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e2       	ldi	r20, 0x20	; 32
    163a:	51 e4       	ldi	r21, 0x41	; 65
    163c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	bc 01       	movw	r22, r24
    1646:	cd 01       	movw	r24, r26
    1648:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	9e 83       	std	Y+6, r25	; 0x06
    1652:	8d 83       	std	Y+5, r24	; 0x05
    1654:	0f c0       	rjmp	.+30     	; 0x1674 <STEPER_voidFullStep+0x54a>
    1656:	88 ec       	ldi	r24, 0xC8	; 200
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	9c 83       	std	Y+4, r25	; 0x04
    165c:	8b 83       	std	Y+3, r24	; 0x03
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	9c 81       	ldd	r25, Y+4	; 0x04
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <STEPER_voidFullStep+0x538>
    1666:	9c 83       	std	Y+4, r25	; 0x04
    1668:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	9e 81       	ldd	r25, Y+6	; 0x06
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	9e 83       	std	Y+6, r25	; 0x06
    1672:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1674:	8d 81       	ldd	r24, Y+5	; 0x05
    1676:	9e 81       	ldd	r25, Y+6	; 0x06
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	69 f7       	brne	.-38     	; 0x1656 <STEPER_voidFullStep+0x52c>
    167c:	14 c0       	rjmp	.+40     	; 0x16a6 <STEPER_voidFullStep+0x57c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167e:	6f 81       	ldd	r22, Y+7	; 0x07
    1680:	78 85       	ldd	r23, Y+8	; 0x08
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	9a 85       	ldd	r25, Y+10	; 0x0a
    1686:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	9e 83       	std	Y+6, r25	; 0x06
    1690:	8d 83       	std	Y+5, r24	; 0x05
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	9e 81       	ldd	r25, Y+6	; 0x06
    1696:	9a 83       	std	Y+2, r25	; 0x02
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	9a 81       	ldd	r25, Y+2	; 0x02
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	f1 f7       	brne	.-4      	; 0x169e <STEPER_voidFullStep+0x574>
    16a2:	9a 83       	std	Y+2, r25	; 0x02
    16a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);
}
    16a6:	ca 5b       	subi	r28, 0xBA	; 186
    16a8:	df 4f       	sbci	r29, 0xFF	; 255
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	08 95       	ret

000016be <STEPER_voidHalfStep>:

void STEPER_voidHalfStep(void)
{
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	ce 57       	subi	r28, 0x7E	; 126
    16cc:	d0 40       	sbci	r29, 0x00	; 0
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinValue(BLUE_WIRE,DIO_HIGH);
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	67 e0       	ldi	r22, 0x07	; 7
    16dc:	41 e0       	ldi	r20, 0x01	; 1
    16de:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_LOW);
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	64 e0       	ldi	r22, 0x04	; 4
    16e6:	40 e0       	ldi	r20, 0x00	; 0
    16e8:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_LOW);
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	65 e0       	ldi	r22, 0x05	; 5
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_HIGH);
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	66 e0       	ldi	r22, 0x06	; 6
    16fa:	41 e0       	ldi	r20, 0x01	; 1
    16fc:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
    1700:	fe 01       	movw	r30, r28
    1702:	e5 58       	subi	r30, 0x85	; 133
    1704:	ff 4f       	sbci	r31, 0xFF	; 255
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	90 e8       	ldi	r25, 0x80	; 128
    170a:	ab eb       	ldi	r26, 0xBB	; 187
    170c:	b4 e4       	ldi	r27, 0x44	; 68
    170e:	80 83       	st	Z, r24
    1710:	91 83       	std	Z+1, r25	; 0x01
    1712:	a2 83       	std	Z+2, r26	; 0x02
    1714:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1716:	8e 01       	movw	r16, r28
    1718:	09 58       	subi	r16, 0x89	; 137
    171a:	1f 4f       	sbci	r17, 0xFF	; 255
    171c:	fe 01       	movw	r30, r28
    171e:	e5 58       	subi	r30, 0x85	; 133
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	60 81       	ld	r22, Z
    1724:	71 81       	ldd	r23, Z+1	; 0x01
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	93 81       	ldd	r25, Z+3	; 0x03
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	4a ef       	ldi	r20, 0xFA	; 250
    1730:	54 e4       	ldi	r21, 0x44	; 68
    1732:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	f8 01       	movw	r30, r16
    173c:	80 83       	st	Z, r24
    173e:	91 83       	std	Z+1, r25	; 0x01
    1740:	a2 83       	std	Z+2, r26	; 0x02
    1742:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1744:	fe 01       	movw	r30, r28
    1746:	e9 58       	subi	r30, 0x89	; 137
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	60 81       	ld	r22, Z
    174c:	71 81       	ldd	r23, Z+1	; 0x01
    174e:	82 81       	ldd	r24, Z+2	; 0x02
    1750:	93 81       	ldd	r25, Z+3	; 0x03
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	40 e8       	ldi	r20, 0x80	; 128
    1758:	5f e3       	ldi	r21, 0x3F	; 63
    175a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    175e:	88 23       	and	r24, r24
    1760:	44 f4       	brge	.+16     	; 0x1772 <STEPER_voidHalfStep+0xb4>
		__ticks = 1;
    1762:	fe 01       	movw	r30, r28
    1764:	eb 58       	subi	r30, 0x8B	; 139
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	91 83       	std	Z+1, r25	; 0x01
    176e:	80 83       	st	Z, r24
    1770:	64 c0       	rjmp	.+200    	; 0x183a <STEPER_voidHalfStep+0x17c>
	else if (__tmp > 65535)
    1772:	fe 01       	movw	r30, r28
    1774:	e9 58       	subi	r30, 0x89	; 137
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	60 81       	ld	r22, Z
    177a:	71 81       	ldd	r23, Z+1	; 0x01
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	93 81       	ldd	r25, Z+3	; 0x03
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	3f ef       	ldi	r19, 0xFF	; 255
    1784:	4f e7       	ldi	r20, 0x7F	; 127
    1786:	57 e4       	ldi	r21, 0x47	; 71
    1788:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    178c:	18 16       	cp	r1, r24
    178e:	0c f0       	brlt	.+2      	; 0x1792 <STEPER_voidHalfStep+0xd4>
    1790:	43 c0       	rjmp	.+134    	; 0x1818 <STEPER_voidHalfStep+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1792:	fe 01       	movw	r30, r28
    1794:	e5 58       	subi	r30, 0x85	; 133
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	60 81       	ld	r22, Z
    179a:	71 81       	ldd	r23, Z+1	; 0x01
    179c:	82 81       	ldd	r24, Z+2	; 0x02
    179e:	93 81       	ldd	r25, Z+3	; 0x03
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e2       	ldi	r20, 0x20	; 32
    17a6:	51 e4       	ldi	r21, 0x41	; 65
    17a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	8e 01       	movw	r16, r28
    17b2:	0b 58       	subi	r16, 0x8B	; 139
    17b4:	1f 4f       	sbci	r17, 0xFF	; 255
    17b6:	bc 01       	movw	r22, r24
    17b8:	cd 01       	movw	r24, r26
    17ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	f8 01       	movw	r30, r16
    17c4:	91 83       	std	Z+1, r25	; 0x01
    17c6:	80 83       	st	Z, r24
    17c8:	1f c0       	rjmp	.+62     	; 0x1808 <STEPER_voidHalfStep+0x14a>
    17ca:	fe 01       	movw	r30, r28
    17cc:	ed 58       	subi	r30, 0x8D	; 141
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	88 ec       	ldi	r24, 0xC8	; 200
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	91 83       	std	Z+1, r25	; 0x01
    17d6:	80 83       	st	Z, r24
    17d8:	fe 01       	movw	r30, r28
    17da:	ed 58       	subi	r30, 0x8D	; 141
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	80 81       	ld	r24, Z
    17e0:	91 81       	ldd	r25, Z+1	; 0x01
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	f1 f7       	brne	.-4      	; 0x17e2 <STEPER_voidHalfStep+0x124>
    17e6:	fe 01       	movw	r30, r28
    17e8:	ed 58       	subi	r30, 0x8D	; 141
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	91 83       	std	Z+1, r25	; 0x01
    17ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f0:	de 01       	movw	r26, r28
    17f2:	ab 58       	subi	r26, 0x8B	; 139
    17f4:	bf 4f       	sbci	r27, 0xFF	; 255
    17f6:	fe 01       	movw	r30, r28
    17f8:	eb 58       	subi	r30, 0x8B	; 139
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	80 81       	ld	r24, Z
    17fe:	91 81       	ldd	r25, Z+1	; 0x01
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	11 96       	adiw	r26, 0x01	; 1
    1804:	9c 93       	st	X, r25
    1806:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1808:	fe 01       	movw	r30, r28
    180a:	eb 58       	subi	r30, 0x8B	; 139
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	80 81       	ld	r24, Z
    1810:	91 81       	ldd	r25, Z+1	; 0x01
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	d1 f6       	brne	.-76     	; 0x17ca <STEPER_voidHalfStep+0x10c>
    1816:	27 c0       	rjmp	.+78     	; 0x1866 <STEPER_voidHalfStep+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1818:	8e 01       	movw	r16, r28
    181a:	0b 58       	subi	r16, 0x8B	; 139
    181c:	1f 4f       	sbci	r17, 0xFF	; 255
    181e:	fe 01       	movw	r30, r28
    1820:	e9 58       	subi	r30, 0x89	; 137
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	60 81       	ld	r22, Z
    1826:	71 81       	ldd	r23, Z+1	; 0x01
    1828:	82 81       	ldd	r24, Z+2	; 0x02
    182a:	93 81       	ldd	r25, Z+3	; 0x03
    182c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	f8 01       	movw	r30, r16
    1836:	91 83       	std	Z+1, r25	; 0x01
    1838:	80 83       	st	Z, r24
    183a:	de 01       	movw	r26, r28
    183c:	af 58       	subi	r26, 0x8F	; 143
    183e:	bf 4f       	sbci	r27, 0xFF	; 255
    1840:	fe 01       	movw	r30, r28
    1842:	eb 58       	subi	r30, 0x8B	; 139
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	80 81       	ld	r24, Z
    1848:	91 81       	ldd	r25, Z+1	; 0x01
    184a:	8d 93       	st	X+, r24
    184c:	9c 93       	st	X, r25
    184e:	fe 01       	movw	r30, r28
    1850:	ef 58       	subi	r30, 0x8F	; 143
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	80 81       	ld	r24, Z
    1856:	91 81       	ldd	r25, Z+1	; 0x01
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <STEPER_voidHalfStep+0x19a>
    185c:	fe 01       	movw	r30, r28
    185e:	ef 58       	subi	r30, 0x8F	; 143
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	91 83       	std	Z+1, r25	; 0x01
    1864:	80 83       	st	Z, r24
	_delay_ms(1500);
	DIO_SetPinValue(BLUE_WIRE,DIO_HIGH);
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	67 e0       	ldi	r22, 0x07	; 7
    186a:	41 e0       	ldi	r20, 0x01	; 1
    186c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_LOW);
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	64 e0       	ldi	r22, 0x04	; 4
    1874:	40 e0       	ldi	r20, 0x00	; 0
    1876:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_LOW);
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	65 e0       	ldi	r22, 0x05	; 5
    187e:	40 e0       	ldi	r20, 0x00	; 0
    1880:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_LOW);
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	66 e0       	ldi	r22, 0x06	; 6
    1888:	40 e0       	ldi	r20, 0x00	; 0
    188a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
    188e:	fe 01       	movw	r30, r28
    1890:	e3 59       	subi	r30, 0x93	; 147
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e8       	ldi	r25, 0x80	; 128
    1898:	ab eb       	ldi	r26, 0xBB	; 187
    189a:	b4 e4       	ldi	r27, 0x44	; 68
    189c:	80 83       	st	Z, r24
    189e:	91 83       	std	Z+1, r25	; 0x01
    18a0:	a2 83       	std	Z+2, r26	; 0x02
    18a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a4:	8e 01       	movw	r16, r28
    18a6:	07 59       	subi	r16, 0x97	; 151
    18a8:	1f 4f       	sbci	r17, 0xFF	; 255
    18aa:	fe 01       	movw	r30, r28
    18ac:	e3 59       	subi	r30, 0x93	; 147
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	60 81       	ld	r22, Z
    18b2:	71 81       	ldd	r23, Z+1	; 0x01
    18b4:	82 81       	ldd	r24, Z+2	; 0x02
    18b6:	93 81       	ldd	r25, Z+3	; 0x03
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	4a ef       	ldi	r20, 0xFA	; 250
    18be:	54 e4       	ldi	r21, 0x44	; 68
    18c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	f8 01       	movw	r30, r16
    18ca:	80 83       	st	Z, r24
    18cc:	91 83       	std	Z+1, r25	; 0x01
    18ce:	a2 83       	std	Z+2, r26	; 0x02
    18d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18d2:	fe 01       	movw	r30, r28
    18d4:	e7 59       	subi	r30, 0x97	; 151
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	60 81       	ld	r22, Z
    18da:	71 81       	ldd	r23, Z+1	; 0x01
    18dc:	82 81       	ldd	r24, Z+2	; 0x02
    18de:	93 81       	ldd	r25, Z+3	; 0x03
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e8       	ldi	r20, 0x80	; 128
    18e6:	5f e3       	ldi	r21, 0x3F	; 63
    18e8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18ec:	88 23       	and	r24, r24
    18ee:	44 f4       	brge	.+16     	; 0x1900 <STEPER_voidHalfStep+0x242>
		__ticks = 1;
    18f0:	fe 01       	movw	r30, r28
    18f2:	e9 59       	subi	r30, 0x99	; 153
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	91 83       	std	Z+1, r25	; 0x01
    18fc:	80 83       	st	Z, r24
    18fe:	64 c0       	rjmp	.+200    	; 0x19c8 <STEPER_voidHalfStep+0x30a>
	else if (__tmp > 65535)
    1900:	fe 01       	movw	r30, r28
    1902:	e7 59       	subi	r30, 0x97	; 151
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	60 81       	ld	r22, Z
    1908:	71 81       	ldd	r23, Z+1	; 0x01
    190a:	82 81       	ldd	r24, Z+2	; 0x02
    190c:	93 81       	ldd	r25, Z+3	; 0x03
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	3f ef       	ldi	r19, 0xFF	; 255
    1912:	4f e7       	ldi	r20, 0x7F	; 127
    1914:	57 e4       	ldi	r21, 0x47	; 71
    1916:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    191a:	18 16       	cp	r1, r24
    191c:	0c f0       	brlt	.+2      	; 0x1920 <STEPER_voidHalfStep+0x262>
    191e:	43 c0       	rjmp	.+134    	; 0x19a6 <STEPER_voidHalfStep+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1920:	fe 01       	movw	r30, r28
    1922:	e3 59       	subi	r30, 0x93	; 147
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	60 81       	ld	r22, Z
    1928:	71 81       	ldd	r23, Z+1	; 0x01
    192a:	82 81       	ldd	r24, Z+2	; 0x02
    192c:	93 81       	ldd	r25, Z+3	; 0x03
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e2       	ldi	r20, 0x20	; 32
    1934:	51 e4       	ldi	r21, 0x41	; 65
    1936:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	8e 01       	movw	r16, r28
    1940:	09 59       	subi	r16, 0x99	; 153
    1942:	1f 4f       	sbci	r17, 0xFF	; 255
    1944:	bc 01       	movw	r22, r24
    1946:	cd 01       	movw	r24, r26
    1948:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	f8 01       	movw	r30, r16
    1952:	91 83       	std	Z+1, r25	; 0x01
    1954:	80 83       	st	Z, r24
    1956:	1f c0       	rjmp	.+62     	; 0x1996 <STEPER_voidHalfStep+0x2d8>
    1958:	fe 01       	movw	r30, r28
    195a:	eb 59       	subi	r30, 0x9B	; 155
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	88 ec       	ldi	r24, 0xC8	; 200
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	91 83       	std	Z+1, r25	; 0x01
    1964:	80 83       	st	Z, r24
    1966:	fe 01       	movw	r30, r28
    1968:	eb 59       	subi	r30, 0x9B	; 155
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	80 81       	ld	r24, Z
    196e:	91 81       	ldd	r25, Z+1	; 0x01
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <STEPER_voidHalfStep+0x2b2>
    1974:	fe 01       	movw	r30, r28
    1976:	eb 59       	subi	r30, 0x9B	; 155
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	91 83       	std	Z+1, r25	; 0x01
    197c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    197e:	de 01       	movw	r26, r28
    1980:	a9 59       	subi	r26, 0x99	; 153
    1982:	bf 4f       	sbci	r27, 0xFF	; 255
    1984:	fe 01       	movw	r30, r28
    1986:	e9 59       	subi	r30, 0x99	; 153
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	80 81       	ld	r24, Z
    198c:	91 81       	ldd	r25, Z+1	; 0x01
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	11 96       	adiw	r26, 0x01	; 1
    1992:	9c 93       	st	X, r25
    1994:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1996:	fe 01       	movw	r30, r28
    1998:	e9 59       	subi	r30, 0x99	; 153
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	80 81       	ld	r24, Z
    199e:	91 81       	ldd	r25, Z+1	; 0x01
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	d1 f6       	brne	.-76     	; 0x1958 <STEPER_voidHalfStep+0x29a>
    19a4:	27 c0       	rjmp	.+78     	; 0x19f4 <STEPER_voidHalfStep+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a6:	8e 01       	movw	r16, r28
    19a8:	09 59       	subi	r16, 0x99	; 153
    19aa:	1f 4f       	sbci	r17, 0xFF	; 255
    19ac:	fe 01       	movw	r30, r28
    19ae:	e7 59       	subi	r30, 0x97	; 151
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	60 81       	ld	r22, Z
    19b4:	71 81       	ldd	r23, Z+1	; 0x01
    19b6:	82 81       	ldd	r24, Z+2	; 0x02
    19b8:	93 81       	ldd	r25, Z+3	; 0x03
    19ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	f8 01       	movw	r30, r16
    19c4:	91 83       	std	Z+1, r25	; 0x01
    19c6:	80 83       	st	Z, r24
    19c8:	de 01       	movw	r26, r28
    19ca:	ad 59       	subi	r26, 0x9D	; 157
    19cc:	bf 4f       	sbci	r27, 0xFF	; 255
    19ce:	fe 01       	movw	r30, r28
    19d0:	e9 59       	subi	r30, 0x99	; 153
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	80 81       	ld	r24, Z
    19d6:	91 81       	ldd	r25, Z+1	; 0x01
    19d8:	8d 93       	st	X+, r24
    19da:	9c 93       	st	X, r25
    19dc:	fe 01       	movw	r30, r28
    19de:	ed 59       	subi	r30, 0x9D	; 157
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	80 81       	ld	r24, Z
    19e4:	91 81       	ldd	r25, Z+1	; 0x01
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	f1 f7       	brne	.-4      	; 0x19e6 <STEPER_voidHalfStep+0x328>
    19ea:	fe 01       	movw	r30, r28
    19ec:	ed 59       	subi	r30, 0x9D	; 157
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	91 83       	std	Z+1, r25	; 0x01
    19f2:	80 83       	st	Z, r24
	_delay_ms(1500);
	DIO_SetPinValue(BLUE_WIRE,DIO_HIGH);
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	67 e0       	ldi	r22, 0x07	; 7
    19f8:	41 e0       	ldi	r20, 0x01	; 1
    19fa:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_HIGH);
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	64 e0       	ldi	r22, 0x04	; 4
    1a02:	41 e0       	ldi	r20, 0x01	; 1
    1a04:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_LOW);
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	65 e0       	ldi	r22, 0x05	; 5
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_LOW);
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	66 e0       	ldi	r22, 0x06	; 6
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e1 5a       	subi	r30, 0xA1	; 161
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	90 e8       	ldi	r25, 0x80	; 128
    1a26:	ab eb       	ldi	r26, 0xBB	; 187
    1a28:	b4 e4       	ldi	r27, 0x44	; 68
    1a2a:	80 83       	st	Z, r24
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	a2 83       	std	Z+2, r26	; 0x02
    1a30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a32:	8e 01       	movw	r16, r28
    1a34:	05 5a       	subi	r16, 0xA5	; 165
    1a36:	1f 4f       	sbci	r17, 0xFF	; 255
    1a38:	fe 01       	movw	r30, r28
    1a3a:	e1 5a       	subi	r30, 0xA1	; 161
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	60 81       	ld	r22, Z
    1a40:	71 81       	ldd	r23, Z+1	; 0x01
    1a42:	82 81       	ldd	r24, Z+2	; 0x02
    1a44:	93 81       	ldd	r25, Z+3	; 0x03
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	4a ef       	ldi	r20, 0xFA	; 250
    1a4c:	54 e4       	ldi	r21, 0x44	; 68
    1a4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	f8 01       	movw	r30, r16
    1a58:	80 83       	st	Z, r24
    1a5a:	91 83       	std	Z+1, r25	; 0x01
    1a5c:	a2 83       	std	Z+2, r26	; 0x02
    1a5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a60:	fe 01       	movw	r30, r28
    1a62:	e5 5a       	subi	r30, 0xA5	; 165
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	60 81       	ld	r22, Z
    1a68:	71 81       	ldd	r23, Z+1	; 0x01
    1a6a:	82 81       	ldd	r24, Z+2	; 0x02
    1a6c:	93 81       	ldd	r25, Z+3	; 0x03
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e8       	ldi	r20, 0x80	; 128
    1a74:	5f e3       	ldi	r21, 0x3F	; 63
    1a76:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a7a:	88 23       	and	r24, r24
    1a7c:	44 f4       	brge	.+16     	; 0x1a8e <STEPER_voidHalfStep+0x3d0>
		__ticks = 1;
    1a7e:	fe 01       	movw	r30, r28
    1a80:	e7 5a       	subi	r30, 0xA7	; 167
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	91 83       	std	Z+1, r25	; 0x01
    1a8a:	80 83       	st	Z, r24
    1a8c:	64 c0       	rjmp	.+200    	; 0x1b56 <STEPER_voidHalfStep+0x498>
	else if (__tmp > 65535)
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e5 5a       	subi	r30, 0xA5	; 165
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	60 81       	ld	r22, Z
    1a96:	71 81       	ldd	r23, Z+1	; 0x01
    1a98:	82 81       	ldd	r24, Z+2	; 0x02
    1a9a:	93 81       	ldd	r25, Z+3	; 0x03
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	3f ef       	ldi	r19, 0xFF	; 255
    1aa0:	4f e7       	ldi	r20, 0x7F	; 127
    1aa2:	57 e4       	ldi	r21, 0x47	; 71
    1aa4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1aa8:	18 16       	cp	r1, r24
    1aaa:	0c f0       	brlt	.+2      	; 0x1aae <STEPER_voidHalfStep+0x3f0>
    1aac:	43 c0       	rjmp	.+134    	; 0x1b34 <STEPER_voidHalfStep+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e1 5a       	subi	r30, 0xA1	; 161
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	60 81       	ld	r22, Z
    1ab6:	71 81       	ldd	r23, Z+1	; 0x01
    1ab8:	82 81       	ldd	r24, Z+2	; 0x02
    1aba:	93 81       	ldd	r25, Z+3	; 0x03
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	40 e2       	ldi	r20, 0x20	; 32
    1ac2:	51 e4       	ldi	r21, 0x41	; 65
    1ac4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	8e 01       	movw	r16, r28
    1ace:	07 5a       	subi	r16, 0xA7	; 167
    1ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad2:	bc 01       	movw	r22, r24
    1ad4:	cd 01       	movw	r24, r26
    1ad6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	f8 01       	movw	r30, r16
    1ae0:	91 83       	std	Z+1, r25	; 0x01
    1ae2:	80 83       	st	Z, r24
    1ae4:	1f c0       	rjmp	.+62     	; 0x1b24 <STEPER_voidHalfStep+0x466>
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	e9 5a       	subi	r30, 0xA9	; 169
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	88 ec       	ldi	r24, 0xC8	; 200
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	91 83       	std	Z+1, r25	; 0x01
    1af2:	80 83       	st	Z, r24
    1af4:	fe 01       	movw	r30, r28
    1af6:	e9 5a       	subi	r30, 0xA9	; 169
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	80 81       	ld	r24, Z
    1afc:	91 81       	ldd	r25, Z+1	; 0x01
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <STEPER_voidHalfStep+0x440>
    1b02:	fe 01       	movw	r30, r28
    1b04:	e9 5a       	subi	r30, 0xA9	; 169
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	91 83       	std	Z+1, r25	; 0x01
    1b0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0c:	de 01       	movw	r26, r28
    1b0e:	a7 5a       	subi	r26, 0xA7	; 167
    1b10:	bf 4f       	sbci	r27, 0xFF	; 255
    1b12:	fe 01       	movw	r30, r28
    1b14:	e7 5a       	subi	r30, 0xA7	; 167
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	80 81       	ld	r24, Z
    1b1a:	91 81       	ldd	r25, Z+1	; 0x01
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	11 96       	adiw	r26, 0x01	; 1
    1b20:	9c 93       	st	X, r25
    1b22:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b24:	fe 01       	movw	r30, r28
    1b26:	e7 5a       	subi	r30, 0xA7	; 167
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	80 81       	ld	r24, Z
    1b2c:	91 81       	ldd	r25, Z+1	; 0x01
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	d1 f6       	brne	.-76     	; 0x1ae6 <STEPER_voidHalfStep+0x428>
    1b32:	27 c0       	rjmp	.+78     	; 0x1b82 <STEPER_voidHalfStep+0x4c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b34:	8e 01       	movw	r16, r28
    1b36:	07 5a       	subi	r16, 0xA7	; 167
    1b38:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	e5 5a       	subi	r30, 0xA5	; 165
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	60 81       	ld	r22, Z
    1b42:	71 81       	ldd	r23, Z+1	; 0x01
    1b44:	82 81       	ldd	r24, Z+2	; 0x02
    1b46:	93 81       	ldd	r25, Z+3	; 0x03
    1b48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	f8 01       	movw	r30, r16
    1b52:	91 83       	std	Z+1, r25	; 0x01
    1b54:	80 83       	st	Z, r24
    1b56:	de 01       	movw	r26, r28
    1b58:	ab 5a       	subi	r26, 0xAB	; 171
    1b5a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	e7 5a       	subi	r30, 0xA7	; 167
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	80 81       	ld	r24, Z
    1b64:	91 81       	ldd	r25, Z+1	; 0x01
    1b66:	8d 93       	st	X+, r24
    1b68:	9c 93       	st	X, r25
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	eb 5a       	subi	r30, 0xAB	; 171
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	80 81       	ld	r24, Z
    1b72:	91 81       	ldd	r25, Z+1	; 0x01
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <STEPER_voidHalfStep+0x4b6>
    1b78:	fe 01       	movw	r30, r28
    1b7a:	eb 5a       	subi	r30, 0xAB	; 171
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	91 83       	std	Z+1, r25	; 0x01
    1b80:	80 83       	st	Z, r24
	_delay_ms(1500);
	DIO_SetPinValue(BLUE_WIRE,DIO_LOW);
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	67 e0       	ldi	r22, 0x07	; 7
    1b86:	40 e0       	ldi	r20, 0x00	; 0
    1b88:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_HIGH);
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	64 e0       	ldi	r22, 0x04	; 4
    1b90:	41 e0       	ldi	r20, 0x01	; 1
    1b92:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_LOW);
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	65 e0       	ldi	r22, 0x05	; 5
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_LOW);
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	66 e0       	ldi	r22, 0x06	; 6
    1ba4:	40 e0       	ldi	r20, 0x00	; 0
    1ba6:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
    1baa:	fe 01       	movw	r30, r28
    1bac:	ef 5a       	subi	r30, 0xAF	; 175
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e8       	ldi	r25, 0x80	; 128
    1bb4:	ab eb       	ldi	r26, 0xBB	; 187
    1bb6:	b4 e4       	ldi	r27, 0x44	; 68
    1bb8:	80 83       	st	Z, r24
    1bba:	91 83       	std	Z+1, r25	; 0x01
    1bbc:	a2 83       	std	Z+2, r26	; 0x02
    1bbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc0:	8e 01       	movw	r16, r28
    1bc2:	03 5b       	subi	r16, 0xB3	; 179
    1bc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	ef 5a       	subi	r30, 0xAF	; 175
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	60 81       	ld	r22, Z
    1bce:	71 81       	ldd	r23, Z+1	; 0x01
    1bd0:	82 81       	ldd	r24, Z+2	; 0x02
    1bd2:	93 81       	ldd	r25, Z+3	; 0x03
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	4a ef       	ldi	r20, 0xFA	; 250
    1bda:	54 e4       	ldi	r21, 0x44	; 68
    1bdc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	f8 01       	movw	r30, r16
    1be6:	80 83       	st	Z, r24
    1be8:	91 83       	std	Z+1, r25	; 0x01
    1bea:	a2 83       	std	Z+2, r26	; 0x02
    1bec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bee:	fe 01       	movw	r30, r28
    1bf0:	e3 5b       	subi	r30, 0xB3	; 179
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	60 81       	ld	r22, Z
    1bf6:	71 81       	ldd	r23, Z+1	; 0x01
    1bf8:	82 81       	ldd	r24, Z+2	; 0x02
    1bfa:	93 81       	ldd	r25, Z+3	; 0x03
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e8       	ldi	r20, 0x80	; 128
    1c02:	5f e3       	ldi	r21, 0x3F	; 63
    1c04:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c08:	88 23       	and	r24, r24
    1c0a:	44 f4       	brge	.+16     	; 0x1c1c <STEPER_voidHalfStep+0x55e>
		__ticks = 1;
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	e5 5b       	subi	r30, 0xB5	; 181
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	80 83       	st	Z, r24
    1c1a:	64 c0       	rjmp	.+200    	; 0x1ce4 <STEPER_voidHalfStep+0x626>
	else if (__tmp > 65535)
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	e3 5b       	subi	r30, 0xB3	; 179
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	60 81       	ld	r22, Z
    1c24:	71 81       	ldd	r23, Z+1	; 0x01
    1c26:	82 81       	ldd	r24, Z+2	; 0x02
    1c28:	93 81       	ldd	r25, Z+3	; 0x03
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	3f ef       	ldi	r19, 0xFF	; 255
    1c2e:	4f e7       	ldi	r20, 0x7F	; 127
    1c30:	57 e4       	ldi	r21, 0x47	; 71
    1c32:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c36:	18 16       	cp	r1, r24
    1c38:	0c f0       	brlt	.+2      	; 0x1c3c <STEPER_voidHalfStep+0x57e>
    1c3a:	43 c0       	rjmp	.+134    	; 0x1cc2 <STEPER_voidHalfStep+0x604>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	ef 5a       	subi	r30, 0xAF	; 175
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	60 81       	ld	r22, Z
    1c44:	71 81       	ldd	r23, Z+1	; 0x01
    1c46:	82 81       	ldd	r24, Z+2	; 0x02
    1c48:	93 81       	ldd	r25, Z+3	; 0x03
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e2       	ldi	r20, 0x20	; 32
    1c50:	51 e4       	ldi	r21, 0x41	; 65
    1c52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	8e 01       	movw	r16, r28
    1c5c:	05 5b       	subi	r16, 0xB5	; 181
    1c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c60:	bc 01       	movw	r22, r24
    1c62:	cd 01       	movw	r24, r26
    1c64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	f8 01       	movw	r30, r16
    1c6e:	91 83       	std	Z+1, r25	; 0x01
    1c70:	80 83       	st	Z, r24
    1c72:	1f c0       	rjmp	.+62     	; 0x1cb2 <STEPER_voidHalfStep+0x5f4>
    1c74:	fe 01       	movw	r30, r28
    1c76:	e7 5b       	subi	r30, 0xB7	; 183
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	88 ec       	ldi	r24, 0xC8	; 200
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	91 83       	std	Z+1, r25	; 0x01
    1c80:	80 83       	st	Z, r24
    1c82:	fe 01       	movw	r30, r28
    1c84:	e7 5b       	subi	r30, 0xB7	; 183
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	80 81       	ld	r24, Z
    1c8a:	91 81       	ldd	r25, Z+1	; 0x01
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <STEPER_voidHalfStep+0x5ce>
    1c90:	fe 01       	movw	r30, r28
    1c92:	e7 5b       	subi	r30, 0xB7	; 183
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	91 83       	std	Z+1, r25	; 0x01
    1c98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9a:	de 01       	movw	r26, r28
    1c9c:	a5 5b       	subi	r26, 0xB5	; 181
    1c9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	e5 5b       	subi	r30, 0xB5	; 181
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	80 81       	ld	r24, Z
    1ca8:	91 81       	ldd	r25, Z+1	; 0x01
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	11 96       	adiw	r26, 0x01	; 1
    1cae:	9c 93       	st	X, r25
    1cb0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	e5 5b       	subi	r30, 0xB5	; 181
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	80 81       	ld	r24, Z
    1cba:	91 81       	ldd	r25, Z+1	; 0x01
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	d1 f6       	brne	.-76     	; 0x1c74 <STEPER_voidHalfStep+0x5b6>
    1cc0:	27 c0       	rjmp	.+78     	; 0x1d10 <STEPER_voidHalfStep+0x652>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc2:	8e 01       	movw	r16, r28
    1cc4:	05 5b       	subi	r16, 0xB5	; 181
    1cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc8:	fe 01       	movw	r30, r28
    1cca:	e3 5b       	subi	r30, 0xB3	; 179
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	60 81       	ld	r22, Z
    1cd0:	71 81       	ldd	r23, Z+1	; 0x01
    1cd2:	82 81       	ldd	r24, Z+2	; 0x02
    1cd4:	93 81       	ldd	r25, Z+3	; 0x03
    1cd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	f8 01       	movw	r30, r16
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	80 83       	st	Z, r24
    1ce4:	de 01       	movw	r26, r28
    1ce6:	a9 5b       	subi	r26, 0xB9	; 185
    1ce8:	bf 4f       	sbci	r27, 0xFF	; 255
    1cea:	fe 01       	movw	r30, r28
    1cec:	e5 5b       	subi	r30, 0xB5	; 181
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	80 81       	ld	r24, Z
    1cf2:	91 81       	ldd	r25, Z+1	; 0x01
    1cf4:	8d 93       	st	X+, r24
    1cf6:	9c 93       	st	X, r25
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	e9 5b       	subi	r30, 0xB9	; 185
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfe:	80 81       	ld	r24, Z
    1d00:	91 81       	ldd	r25, Z+1	; 0x01
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <STEPER_voidHalfStep+0x644>
    1d06:	fe 01       	movw	r30, r28
    1d08:	e9 5b       	subi	r30, 0xB9	; 185
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	91 83       	std	Z+1, r25	; 0x01
    1d0e:	80 83       	st	Z, r24
	_delay_ms(1500);
	DIO_SetPinValue(BLUE_WIRE,DIO_LOW);
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	67 e0       	ldi	r22, 0x07	; 7
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_HIGH);
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	64 e0       	ldi	r22, 0x04	; 4
    1d1e:	41 e0       	ldi	r20, 0x01	; 1
    1d20:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_HIGH);
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	65 e0       	ldi	r22, 0x05	; 5
    1d28:	41 e0       	ldi	r20, 0x01	; 1
    1d2a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_LOW);
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	66 e0       	ldi	r22, 0x06	; 6
    1d32:	40 e0       	ldi	r20, 0x00	; 0
    1d34:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
    1d38:	fe 01       	movw	r30, r28
    1d3a:	ed 5b       	subi	r30, 0xBD	; 189
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	90 e8       	ldi	r25, 0x80	; 128
    1d42:	ab eb       	ldi	r26, 0xBB	; 187
    1d44:	b4 e4       	ldi	r27, 0x44	; 68
    1d46:	80 83       	st	Z, r24
    1d48:	91 83       	std	Z+1, r25	; 0x01
    1d4a:	a2 83       	std	Z+2, r26	; 0x02
    1d4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4e:	8e 01       	movw	r16, r28
    1d50:	01 5c       	subi	r16, 0xC1	; 193
    1d52:	1f 4f       	sbci	r17, 0xFF	; 255
    1d54:	fe 01       	movw	r30, r28
    1d56:	ed 5b       	subi	r30, 0xBD	; 189
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	60 81       	ld	r22, Z
    1d5c:	71 81       	ldd	r23, Z+1	; 0x01
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	93 81       	ldd	r25, Z+3	; 0x03
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	4a ef       	ldi	r20, 0xFA	; 250
    1d68:	54 e4       	ldi	r21, 0x44	; 68
    1d6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	f8 01       	movw	r30, r16
    1d74:	80 83       	st	Z, r24
    1d76:	91 83       	std	Z+1, r25	; 0x01
    1d78:	a2 83       	std	Z+2, r26	; 0x02
    1d7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	ff 96       	adiw	r30, 0x3f	; 63
    1d80:	60 81       	ld	r22, Z
    1d82:	71 81       	ldd	r23, Z+1	; 0x01
    1d84:	82 81       	ldd	r24, Z+2	; 0x02
    1d86:	93 81       	ldd	r25, Z+3	; 0x03
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e8       	ldi	r20, 0x80	; 128
    1d8e:	5f e3       	ldi	r21, 0x3F	; 63
    1d90:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d94:	88 23       	and	r24, r24
    1d96:	2c f4       	brge	.+10     	; 0x1da2 <STEPER_voidHalfStep+0x6e4>
		__ticks = 1;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9e af       	std	Y+62, r25	; 0x3e
    1d9e:	8d af       	std	Y+61, r24	; 0x3d
    1da0:	46 c0       	rjmp	.+140    	; 0x1e2e <STEPER_voidHalfStep+0x770>
	else if (__tmp > 65535)
    1da2:	fe 01       	movw	r30, r28
    1da4:	ff 96       	adiw	r30, 0x3f	; 63
    1da6:	60 81       	ld	r22, Z
    1da8:	71 81       	ldd	r23, Z+1	; 0x01
    1daa:	82 81       	ldd	r24, Z+2	; 0x02
    1dac:	93 81       	ldd	r25, Z+3	; 0x03
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	3f ef       	ldi	r19, 0xFF	; 255
    1db2:	4f e7       	ldi	r20, 0x7F	; 127
    1db4:	57 e4       	ldi	r21, 0x47	; 71
    1db6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dba:	18 16       	cp	r1, r24
    1dbc:	64 f5       	brge	.+88     	; 0x1e16 <STEPER_voidHalfStep+0x758>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	ed 5b       	subi	r30, 0xBD	; 189
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	60 81       	ld	r22, Z
    1dc6:	71 81       	ldd	r23, Z+1	; 0x01
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	40 e2       	ldi	r20, 0x20	; 32
    1dd2:	51 e4       	ldi	r21, 0x41	; 65
    1dd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	bc 01       	movw	r22, r24
    1dde:	cd 01       	movw	r24, r26
    1de0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	9e af       	std	Y+62, r25	; 0x3e
    1dea:	8d af       	std	Y+61, r24	; 0x3d
    1dec:	0f c0       	rjmp	.+30     	; 0x1e0c <STEPER_voidHalfStep+0x74e>
    1dee:	88 ec       	ldi	r24, 0xC8	; 200
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	9c af       	std	Y+60, r25	; 0x3c
    1df4:	8b af       	std	Y+59, r24	; 0x3b
    1df6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1df8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	f1 f7       	brne	.-4      	; 0x1dfa <STEPER_voidHalfStep+0x73c>
    1dfe:	9c af       	std	Y+60, r25	; 0x3c
    1e00:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e02:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e04:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	9e af       	std	Y+62, r25	; 0x3e
    1e0a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e0e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	69 f7       	brne	.-38     	; 0x1dee <STEPER_voidHalfStep+0x730>
    1e14:	16 c0       	rjmp	.+44     	; 0x1e42 <STEPER_voidHalfStep+0x784>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e16:	fe 01       	movw	r30, r28
    1e18:	ff 96       	adiw	r30, 0x3f	; 63
    1e1a:	60 81       	ld	r22, Z
    1e1c:	71 81       	ldd	r23, Z+1	; 0x01
    1e1e:	82 81       	ldd	r24, Z+2	; 0x02
    1e20:	93 81       	ldd	r25, Z+3	; 0x03
    1e22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	9e af       	std	Y+62, r25	; 0x3e
    1e2c:	8d af       	std	Y+61, r24	; 0x3d
    1e2e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e30:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e32:	9a af       	std	Y+58, r25	; 0x3a
    1e34:	89 af       	std	Y+57, r24	; 0x39
    1e36:	89 ad       	ldd	r24, Y+57	; 0x39
    1e38:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	f1 f7       	brne	.-4      	; 0x1e3a <STEPER_voidHalfStep+0x77c>
    1e3e:	9a af       	std	Y+58, r25	; 0x3a
    1e40:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1500);
	DIO_SetPinValue(BLUE_WIRE,DIO_LOW);
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	67 e0       	ldi	r22, 0x07	; 7
    1e46:	40 e0       	ldi	r20, 0x00	; 0
    1e48:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_LOW);
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	64 e0       	ldi	r22, 0x04	; 4
    1e50:	40 e0       	ldi	r20, 0x00	; 0
    1e52:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_HIGH);
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	65 e0       	ldi	r22, 0x05	; 5
    1e5a:	41 e0       	ldi	r20, 0x01	; 1
    1e5c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_LOW);
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	66 e0       	ldi	r22, 0x06	; 6
    1e64:	40 e0       	ldi	r20, 0x00	; 0
    1e66:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	90 e8       	ldi	r25, 0x80	; 128
    1e6e:	ab eb       	ldi	r26, 0xBB	; 187
    1e70:	b4 e4       	ldi	r27, 0x44	; 68
    1e72:	8d ab       	std	Y+53, r24	; 0x35
    1e74:	9e ab       	std	Y+54, r25	; 0x36
    1e76:	af ab       	std	Y+55, r26	; 0x37
    1e78:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7a:	6d a9       	ldd	r22, Y+53	; 0x35
    1e7c:	7e a9       	ldd	r23, Y+54	; 0x36
    1e7e:	8f a9       	ldd	r24, Y+55	; 0x37
    1e80:	98 ad       	ldd	r25, Y+56	; 0x38
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	4a ef       	ldi	r20, 0xFA	; 250
    1e88:	54 e4       	ldi	r21, 0x44	; 68
    1e8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	89 ab       	std	Y+49, r24	; 0x31
    1e94:	9a ab       	std	Y+50, r25	; 0x32
    1e96:	ab ab       	std	Y+51, r26	; 0x33
    1e98:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e9a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e9c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1ea0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	40 e8       	ldi	r20, 0x80	; 128
    1ea8:	5f e3       	ldi	r21, 0x3F	; 63
    1eaa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1eae:	88 23       	and	r24, r24
    1eb0:	2c f4       	brge	.+10     	; 0x1ebc <STEPER_voidHalfStep+0x7fe>
		__ticks = 1;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	98 ab       	std	Y+48, r25	; 0x30
    1eb8:	8f a7       	std	Y+47, r24	; 0x2f
    1eba:	3f c0       	rjmp	.+126    	; 0x1f3a <STEPER_voidHalfStep+0x87c>
	else if (__tmp > 65535)
    1ebc:	69 a9       	ldd	r22, Y+49	; 0x31
    1ebe:	7a a9       	ldd	r23, Y+50	; 0x32
    1ec0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ec2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	3f ef       	ldi	r19, 0xFF	; 255
    1ec8:	4f e7       	ldi	r20, 0x7F	; 127
    1eca:	57 e4       	ldi	r21, 0x47	; 71
    1ecc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ed0:	18 16       	cp	r1, r24
    1ed2:	4c f5       	brge	.+82     	; 0x1f26 <STEPER_voidHalfStep+0x868>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ed6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ed8:	8f a9       	ldd	r24, Y+55	; 0x37
    1eda:	98 ad       	ldd	r25, Y+56	; 0x38
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e2       	ldi	r20, 0x20	; 32
    1ee2:	51 e4       	ldi	r21, 0x41	; 65
    1ee4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	bc 01       	movw	r22, r24
    1eee:	cd 01       	movw	r24, r26
    1ef0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	98 ab       	std	Y+48, r25	; 0x30
    1efa:	8f a7       	std	Y+47, r24	; 0x2f
    1efc:	0f c0       	rjmp	.+30     	; 0x1f1c <STEPER_voidHalfStep+0x85e>
    1efe:	88 ec       	ldi	r24, 0xC8	; 200
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	9e a7       	std	Y+46, r25	; 0x2e
    1f04:	8d a7       	std	Y+45, r24	; 0x2d
    1f06:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f08:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <STEPER_voidHalfStep+0x84c>
    1f0e:	9e a7       	std	Y+46, r25	; 0x2e
    1f10:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f14:	98 a9       	ldd	r25, Y+48	; 0x30
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	98 ab       	std	Y+48, r25	; 0x30
    1f1a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	69 f7       	brne	.-38     	; 0x1efe <STEPER_voidHalfStep+0x840>
    1f24:	14 c0       	rjmp	.+40     	; 0x1f4e <STEPER_voidHalfStep+0x890>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f26:	69 a9       	ldd	r22, Y+49	; 0x31
    1f28:	7a a9       	ldd	r23, Y+50	; 0x32
    1f2a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f2c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	98 ab       	std	Y+48, r25	; 0x30
    1f38:	8f a7       	std	Y+47, r24	; 0x2f
    1f3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f3c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f3e:	9c a7       	std	Y+44, r25	; 0x2c
    1f40:	8b a7       	std	Y+43, r24	; 0x2b
    1f42:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f44:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <STEPER_voidHalfStep+0x888>
    1f4a:	9c a7       	std	Y+44, r25	; 0x2c
    1f4c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1500);
	DIO_SetPinValue(BLUE_WIRE,DIO_LOW);
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	67 e0       	ldi	r22, 0x07	; 7
    1f52:	40 e0       	ldi	r20, 0x00	; 0
    1f54:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_LOW);
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	64 e0       	ldi	r22, 0x04	; 4
    1f5c:	40 e0       	ldi	r20, 0x00	; 0
    1f5e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_HIGH);
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	65 e0       	ldi	r22, 0x05	; 5
    1f66:	41 e0       	ldi	r20, 0x01	; 1
    1f68:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_HIGH);
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	66 e0       	ldi	r22, 0x06	; 6
    1f70:	41 e0       	ldi	r20, 0x01	; 1
    1f72:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	90 e8       	ldi	r25, 0x80	; 128
    1f7a:	ab eb       	ldi	r26, 0xBB	; 187
    1f7c:	b4 e4       	ldi	r27, 0x44	; 68
    1f7e:	8f a3       	std	Y+39, r24	; 0x27
    1f80:	98 a7       	std	Y+40, r25	; 0x28
    1f82:	a9 a7       	std	Y+41, r26	; 0x29
    1f84:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f86:	6f a1       	ldd	r22, Y+39	; 0x27
    1f88:	78 a5       	ldd	r23, Y+40	; 0x28
    1f8a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	4a ef       	ldi	r20, 0xFA	; 250
    1f94:	54 e4       	ldi	r21, 0x44	; 68
    1f96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	8b a3       	std	Y+35, r24	; 0x23
    1fa0:	9c a3       	std	Y+36, r25	; 0x24
    1fa2:	ad a3       	std	Y+37, r26	; 0x25
    1fa4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fa6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fa8:	7c a1       	ldd	r23, Y+36	; 0x24
    1faa:	8d a1       	ldd	r24, Y+37	; 0x25
    1fac:	9e a1       	ldd	r25, Y+38	; 0x26
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 e8       	ldi	r20, 0x80	; 128
    1fb4:	5f e3       	ldi	r21, 0x3F	; 63
    1fb6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fba:	88 23       	and	r24, r24
    1fbc:	2c f4       	brge	.+10     	; 0x1fc8 <STEPER_voidHalfStep+0x90a>
		__ticks = 1;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	9a a3       	std	Y+34, r25	; 0x22
    1fc4:	89 a3       	std	Y+33, r24	; 0x21
    1fc6:	3f c0       	rjmp	.+126    	; 0x2046 <STEPER_voidHalfStep+0x988>
	else if (__tmp > 65535)
    1fc8:	6b a1       	ldd	r22, Y+35	; 0x23
    1fca:	7c a1       	ldd	r23, Y+36	; 0x24
    1fcc:	8d a1       	ldd	r24, Y+37	; 0x25
    1fce:	9e a1       	ldd	r25, Y+38	; 0x26
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	3f ef       	ldi	r19, 0xFF	; 255
    1fd4:	4f e7       	ldi	r20, 0x7F	; 127
    1fd6:	57 e4       	ldi	r21, 0x47	; 71
    1fd8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fdc:	18 16       	cp	r1, r24
    1fde:	4c f5       	brge	.+82     	; 0x2032 <STEPER_voidHalfStep+0x974>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe0:	6f a1       	ldd	r22, Y+39	; 0x27
    1fe2:	78 a5       	ldd	r23, Y+40	; 0x28
    1fe4:	89 a5       	ldd	r24, Y+41	; 0x29
    1fe6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e2       	ldi	r20, 0x20	; 32
    1fee:	51 e4       	ldi	r21, 0x41	; 65
    1ff0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	bc 01       	movw	r22, r24
    1ffa:	cd 01       	movw	r24, r26
    1ffc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	9a a3       	std	Y+34, r25	; 0x22
    2006:	89 a3       	std	Y+33, r24	; 0x21
    2008:	0f c0       	rjmp	.+30     	; 0x2028 <STEPER_voidHalfStep+0x96a>
    200a:	88 ec       	ldi	r24, 0xC8	; 200
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	98 a3       	std	Y+32, r25	; 0x20
    2010:	8f 8f       	std	Y+31, r24	; 0x1f
    2012:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2014:	98 a1       	ldd	r25, Y+32	; 0x20
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	f1 f7       	brne	.-4      	; 0x2016 <STEPER_voidHalfStep+0x958>
    201a:	98 a3       	std	Y+32, r25	; 0x20
    201c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201e:	89 a1       	ldd	r24, Y+33	; 0x21
    2020:	9a a1       	ldd	r25, Y+34	; 0x22
    2022:	01 97       	sbiw	r24, 0x01	; 1
    2024:	9a a3       	std	Y+34, r25	; 0x22
    2026:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2028:	89 a1       	ldd	r24, Y+33	; 0x21
    202a:	9a a1       	ldd	r25, Y+34	; 0x22
    202c:	00 97       	sbiw	r24, 0x00	; 0
    202e:	69 f7       	brne	.-38     	; 0x200a <STEPER_voidHalfStep+0x94c>
    2030:	14 c0       	rjmp	.+40     	; 0x205a <STEPER_voidHalfStep+0x99c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2032:	6b a1       	ldd	r22, Y+35	; 0x23
    2034:	7c a1       	ldd	r23, Y+36	; 0x24
    2036:	8d a1       	ldd	r24, Y+37	; 0x25
    2038:	9e a1       	ldd	r25, Y+38	; 0x26
    203a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	9a a3       	std	Y+34, r25	; 0x22
    2044:	89 a3       	std	Y+33, r24	; 0x21
    2046:	89 a1       	ldd	r24, Y+33	; 0x21
    2048:	9a a1       	ldd	r25, Y+34	; 0x22
    204a:	9e 8f       	std	Y+30, r25	; 0x1e
    204c:	8d 8f       	std	Y+29, r24	; 0x1d
    204e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2050:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <STEPER_voidHalfStep+0x994>
    2056:	9e 8f       	std	Y+30, r25	; 0x1e
    2058:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1500);
	DIO_SetPinValue(BLUE_WIRE,DIO_LOW);
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	67 e0       	ldi	r22, 0x07	; 7
    205e:	40 e0       	ldi	r20, 0x00	; 0
    2060:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_LOW);
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	64 e0       	ldi	r22, 0x04	; 4
    2068:	40 e0       	ldi	r20, 0x00	; 0
    206a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_LOW);
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	65 e0       	ldi	r22, 0x05	; 5
    2072:	40 e0       	ldi	r20, 0x00	; 0
    2074:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_HIGH);
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	66 e0       	ldi	r22, 0x06	; 6
    207c:	41 e0       	ldi	r20, 0x01	; 1
    207e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e8       	ldi	r25, 0x80	; 128
    2086:	ab eb       	ldi	r26, 0xBB	; 187
    2088:	b4 e4       	ldi	r27, 0x44	; 68
    208a:	89 8f       	std	Y+25, r24	; 0x19
    208c:	9a 8f       	std	Y+26, r25	; 0x1a
    208e:	ab 8f       	std	Y+27, r26	; 0x1b
    2090:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2092:	69 8d       	ldd	r22, Y+25	; 0x19
    2094:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2096:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2098:	9c 8d       	ldd	r25, Y+28	; 0x1c
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4a ef       	ldi	r20, 0xFA	; 250
    20a0:	54 e4       	ldi	r21, 0x44	; 68
    20a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	8d 8b       	std	Y+21, r24	; 0x15
    20ac:	9e 8b       	std	Y+22, r25	; 0x16
    20ae:	af 8b       	std	Y+23, r26	; 0x17
    20b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20b2:	6d 89       	ldd	r22, Y+21	; 0x15
    20b4:	7e 89       	ldd	r23, Y+22	; 0x16
    20b6:	8f 89       	ldd	r24, Y+23	; 0x17
    20b8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20c6:	88 23       	and	r24, r24
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <STEPER_voidHalfStep+0xa16>
		__ticks = 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9c 8b       	std	Y+20, r25	; 0x14
    20d0:	8b 8b       	std	Y+19, r24	; 0x13
    20d2:	3f c0       	rjmp	.+126    	; 0x2152 <STEPER_voidHalfStep+0xa94>
	else if (__tmp > 65535)
    20d4:	6d 89       	ldd	r22, Y+21	; 0x15
    20d6:	7e 89       	ldd	r23, Y+22	; 0x16
    20d8:	8f 89       	ldd	r24, Y+23	; 0x17
    20da:	98 8d       	ldd	r25, Y+24	; 0x18
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	4c f5       	brge	.+82     	; 0x213e <STEPER_voidHalfStep+0xa80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ec:	69 8d       	ldd	r22, Y+25	; 0x19
    20ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e2       	ldi	r20, 0x20	; 32
    20fa:	51 e4       	ldi	r21, 0x41	; 65
    20fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9c 8b       	std	Y+20, r25	; 0x14
    2112:	8b 8b       	std	Y+19, r24	; 0x13
    2114:	0f c0       	rjmp	.+30     	; 0x2134 <STEPER_voidHalfStep+0xa76>
    2116:	88 ec       	ldi	r24, 0xC8	; 200
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9a 8b       	std	Y+18, r25	; 0x12
    211c:	89 8b       	std	Y+17, r24	; 0x11
    211e:	89 89       	ldd	r24, Y+17	; 0x11
    2120:	9a 89       	ldd	r25, Y+18	; 0x12
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <STEPER_voidHalfStep+0xa64>
    2126:	9a 8b       	std	Y+18, r25	; 0x12
    2128:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212a:	8b 89       	ldd	r24, Y+19	; 0x13
    212c:	9c 89       	ldd	r25, Y+20	; 0x14
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	9c 8b       	std	Y+20, r25	; 0x14
    2132:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2134:	8b 89       	ldd	r24, Y+19	; 0x13
    2136:	9c 89       	ldd	r25, Y+20	; 0x14
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	69 f7       	brne	.-38     	; 0x2116 <STEPER_voidHalfStep+0xa58>
    213c:	14 c0       	rjmp	.+40     	; 0x2166 <STEPER_voidHalfStep+0xaa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213e:	6d 89       	ldd	r22, Y+21	; 0x15
    2140:	7e 89       	ldd	r23, Y+22	; 0x16
    2142:	8f 89       	ldd	r24, Y+23	; 0x17
    2144:	98 8d       	ldd	r25, Y+24	; 0x18
    2146:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9c 8b       	std	Y+20, r25	; 0x14
    2150:	8b 8b       	std	Y+19, r24	; 0x13
    2152:	8b 89       	ldd	r24, Y+19	; 0x13
    2154:	9c 89       	ldd	r25, Y+20	; 0x14
    2156:	98 8b       	std	Y+16, r25	; 0x10
    2158:	8f 87       	std	Y+15, r24	; 0x0f
    215a:	8f 85       	ldd	r24, Y+15	; 0x0f
    215c:	98 89       	ldd	r25, Y+16	; 0x10
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <STEPER_voidHalfStep+0xaa0>
    2162:	98 8b       	std	Y+16, r25	; 0x10
    2164:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1500);
	DIO_SetPinValue(BLUE_WIRE,DIO_HIGH);
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	67 e0       	ldi	r22, 0x07	; 7
    216a:	41 e0       	ldi	r20, 0x01	; 1
    216c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_LOW);
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	64 e0       	ldi	r22, 0x04	; 4
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_LOW);
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	65 e0       	ldi	r22, 0x05	; 5
    217e:	40 e0       	ldi	r20, 0x00	; 0
    2180:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_HIGH);
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	66 e0       	ldi	r22, 0x06	; 6
    2188:	41 e0       	ldi	r20, 0x01	; 1
    218a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	90 e8       	ldi	r25, 0x80	; 128
    2192:	ab eb       	ldi	r26, 0xBB	; 187
    2194:	b4 e4       	ldi	r27, 0x44	; 68
    2196:	8b 87       	std	Y+11, r24	; 0x0b
    2198:	9c 87       	std	Y+12, r25	; 0x0c
    219a:	ad 87       	std	Y+13, r26	; 0x0d
    219c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219e:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	4a ef       	ldi	r20, 0xFA	; 250
    21ac:	54 e4       	ldi	r21, 0x44	; 68
    21ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	8f 83       	std	Y+7, r24	; 0x07
    21b8:	98 87       	std	Y+8, r25	; 0x08
    21ba:	a9 87       	std	Y+9, r26	; 0x09
    21bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21be:	6f 81       	ldd	r22, Y+7	; 0x07
    21c0:	78 85       	ldd	r23, Y+8	; 0x08
    21c2:	89 85       	ldd	r24, Y+9	; 0x09
    21c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e8       	ldi	r20, 0x80	; 128
    21cc:	5f e3       	ldi	r21, 0x3F	; 63
    21ce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21d2:	88 23       	and	r24, r24
    21d4:	2c f4       	brge	.+10     	; 0x21e0 <STEPER_voidHalfStep+0xb22>
		__ticks = 1;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	9e 83       	std	Y+6, r25	; 0x06
    21dc:	8d 83       	std	Y+5, r24	; 0x05
    21de:	3f c0       	rjmp	.+126    	; 0x225e <STEPER_voidHalfStep+0xba0>
	else if (__tmp > 65535)
    21e0:	6f 81       	ldd	r22, Y+7	; 0x07
    21e2:	78 85       	ldd	r23, Y+8	; 0x08
    21e4:	89 85       	ldd	r24, Y+9	; 0x09
    21e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	3f ef       	ldi	r19, 0xFF	; 255
    21ec:	4f e7       	ldi	r20, 0x7F	; 127
    21ee:	57 e4       	ldi	r21, 0x47	; 71
    21f0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21f4:	18 16       	cp	r1, r24
    21f6:	4c f5       	brge	.+82     	; 0x224a <STEPER_voidHalfStep+0xb8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e2       	ldi	r20, 0x20	; 32
    2206:	51 e4       	ldi	r21, 0x41	; 65
    2208:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	bc 01       	movw	r22, r24
    2212:	cd 01       	movw	r24, r26
    2214:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	9e 83       	std	Y+6, r25	; 0x06
    221e:	8d 83       	std	Y+5, r24	; 0x05
    2220:	0f c0       	rjmp	.+30     	; 0x2240 <STEPER_voidHalfStep+0xb82>
    2222:	88 ec       	ldi	r24, 0xC8	; 200
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	9c 83       	std	Y+4, r25	; 0x04
    2228:	8b 83       	std	Y+3, r24	; 0x03
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	f1 f7       	brne	.-4      	; 0x222e <STEPER_voidHalfStep+0xb70>
    2232:	9c 83       	std	Y+4, r25	; 0x04
    2234:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2236:	8d 81       	ldd	r24, Y+5	; 0x05
    2238:	9e 81       	ldd	r25, Y+6	; 0x06
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	9e 83       	std	Y+6, r25	; 0x06
    223e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2240:	8d 81       	ldd	r24, Y+5	; 0x05
    2242:	9e 81       	ldd	r25, Y+6	; 0x06
    2244:	00 97       	sbiw	r24, 0x00	; 0
    2246:	69 f7       	brne	.-38     	; 0x2222 <STEPER_voidHalfStep+0xb64>
    2248:	14 c0       	rjmp	.+40     	; 0x2272 <STEPER_voidHalfStep+0xbb4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    224a:	6f 81       	ldd	r22, Y+7	; 0x07
    224c:	78 85       	ldd	r23, Y+8	; 0x08
    224e:	89 85       	ldd	r24, Y+9	; 0x09
    2250:	9a 85       	ldd	r25, Y+10	; 0x0a
    2252:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	9e 83       	std	Y+6, r25	; 0x06
    225c:	8d 83       	std	Y+5, r24	; 0x05
    225e:	8d 81       	ldd	r24, Y+5	; 0x05
    2260:	9e 81       	ldd	r25, Y+6	; 0x06
    2262:	9a 83       	std	Y+2, r25	; 0x02
    2264:	89 83       	std	Y+1, r24	; 0x01
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	9a 81       	ldd	r25, Y+2	; 0x02
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	f1 f7       	brne	.-4      	; 0x226a <STEPER_voidHalfStep+0xbac>
    226e:	9a 83       	std	Y+2, r25	; 0x02
    2270:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);


}
    2272:	c2 58       	subi	r28, 0x82	; 130
    2274:	df 4f       	sbci	r29, 0xFF	; 255
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	cf 91       	pop	r28
    2282:	df 91       	pop	r29
    2284:	1f 91       	pop	r17
    2286:	0f 91       	pop	r16
    2288:	08 95       	ret

0000228a <LCD_Init>:
#include "LCD_INTERFACE.h"



void LCD_Init(void)
{
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	e8 97       	sbiw	r28, 0x38	; 56
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN1,DIO_OUTPUT); //RS
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	61 e0       	ldi	r22, 0x01	; 1
    22a2:	41 e0       	ldi	r20, 0x01	; 1
    22a4:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN2,DIO_OUTPUT); //EN
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	62 e0       	ldi	r22, 0x02	; 2
    22ac:	41 e0       	ldi	r20, 0x01	; 1
    22ae:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinDirection>

	DIO_SetPortDirection(DIO_PORTA,0xFF);
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	6f ef       	ldi	r22, 0xFF	; 255
    22b6:	0e 94 f8 07 	call	0xff0	; 0xff0 <DIO_SetPortDirection>
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	a8 ec       	ldi	r26, 0xC8	; 200
    22c0:	b2 e4       	ldi	r27, 0x42	; 66
    22c2:	8d ab       	std	Y+53, r24	; 0x35
    22c4:	9e ab       	std	Y+54, r25	; 0x36
    22c6:	af ab       	std	Y+55, r26	; 0x37
    22c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ca:	6d a9       	ldd	r22, Y+53	; 0x35
    22cc:	7e a9       	ldd	r23, Y+54	; 0x36
    22ce:	8f a9       	ldd	r24, Y+55	; 0x37
    22d0:	98 ad       	ldd	r25, Y+56	; 0x38
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	4a ef       	ldi	r20, 0xFA	; 250
    22d8:	54 e4       	ldi	r21, 0x44	; 68
    22da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	89 ab       	std	Y+49, r24	; 0x31
    22e4:	9a ab       	std	Y+50, r25	; 0x32
    22e6:	ab ab       	std	Y+51, r26	; 0x33
    22e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22ea:	69 a9       	ldd	r22, Y+49	; 0x31
    22ec:	7a a9       	ldd	r23, Y+50	; 0x32
    22ee:	8b a9       	ldd	r24, Y+51	; 0x33
    22f0:	9c a9       	ldd	r25, Y+52	; 0x34
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e8       	ldi	r20, 0x80	; 128
    22f8:	5f e3       	ldi	r21, 0x3F	; 63
    22fa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22fe:	88 23       	and	r24, r24
    2300:	2c f4       	brge	.+10     	; 0x230c <LCD_Init+0x82>
		__ticks = 1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	98 ab       	std	Y+48, r25	; 0x30
    2308:	8f a7       	std	Y+47, r24	; 0x2f
    230a:	3f c0       	rjmp	.+126    	; 0x238a <LCD_Init+0x100>
	else if (__tmp > 65535)
    230c:	69 a9       	ldd	r22, Y+49	; 0x31
    230e:	7a a9       	ldd	r23, Y+50	; 0x32
    2310:	8b a9       	ldd	r24, Y+51	; 0x33
    2312:	9c a9       	ldd	r25, Y+52	; 0x34
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	3f ef       	ldi	r19, 0xFF	; 255
    2318:	4f e7       	ldi	r20, 0x7F	; 127
    231a:	57 e4       	ldi	r21, 0x47	; 71
    231c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2320:	18 16       	cp	r1, r24
    2322:	4c f5       	brge	.+82     	; 0x2376 <LCD_Init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2324:	6d a9       	ldd	r22, Y+53	; 0x35
    2326:	7e a9       	ldd	r23, Y+54	; 0x36
    2328:	8f a9       	ldd	r24, Y+55	; 0x37
    232a:	98 ad       	ldd	r25, Y+56	; 0x38
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e2       	ldi	r20, 0x20	; 32
    2332:	51 e4       	ldi	r21, 0x41	; 65
    2334:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	bc 01       	movw	r22, r24
    233e:	cd 01       	movw	r24, r26
    2340:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	98 ab       	std	Y+48, r25	; 0x30
    234a:	8f a7       	std	Y+47, r24	; 0x2f
    234c:	0f c0       	rjmp	.+30     	; 0x236c <LCD_Init+0xe2>
    234e:	88 ec       	ldi	r24, 0xC8	; 200
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9e a7       	std	Y+46, r25	; 0x2e
    2354:	8d a7       	std	Y+45, r24	; 0x2d
    2356:	8d a5       	ldd	r24, Y+45	; 0x2d
    2358:	9e a5       	ldd	r25, Y+46	; 0x2e
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <LCD_Init+0xd0>
    235e:	9e a7       	std	Y+46, r25	; 0x2e
    2360:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2362:	8f a5       	ldd	r24, Y+47	; 0x2f
    2364:	98 a9       	ldd	r25, Y+48	; 0x30
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	98 ab       	std	Y+48, r25	; 0x30
    236a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236c:	8f a5       	ldd	r24, Y+47	; 0x2f
    236e:	98 a9       	ldd	r25, Y+48	; 0x30
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	69 f7       	brne	.-38     	; 0x234e <LCD_Init+0xc4>
    2374:	14 c0       	rjmp	.+40     	; 0x239e <LCD_Init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2376:	69 a9       	ldd	r22, Y+49	; 0x31
    2378:	7a a9       	ldd	r23, Y+50	; 0x32
    237a:	8b a9       	ldd	r24, Y+51	; 0x33
    237c:	9c a9       	ldd	r25, Y+52	; 0x34
    237e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	98 ab       	std	Y+48, r25	; 0x30
    2388:	8f a7       	std	Y+47, r24	; 0x2f
    238a:	8f a5       	ldd	r24, Y+47	; 0x2f
    238c:	98 a9       	ldd	r25, Y+48	; 0x30
    238e:	9c a7       	std	Y+44, r25	; 0x2c
    2390:	8b a7       	std	Y+43, r24	; 0x2b
    2392:	8b a5       	ldd	r24, Y+43	; 0x2b
    2394:	9c a5       	ldd	r25, Y+44	; 0x2c
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <LCD_Init+0x10c>
    239a:	9c a7       	std	Y+44, r25	; 0x2c
    239c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);

	LCD_WriteCommand(0x38);
    239e:	88 e3       	ldi	r24, 0x38	; 56
    23a0:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_WriteCommand>
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	a0 e8       	ldi	r26, 0x80	; 128
    23aa:	bf e3       	ldi	r27, 0x3F	; 63
    23ac:	8f a3       	std	Y+39, r24	; 0x27
    23ae:	98 a7       	std	Y+40, r25	; 0x28
    23b0:	a9 a7       	std	Y+41, r26	; 0x29
    23b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b4:	6f a1       	ldd	r22, Y+39	; 0x27
    23b6:	78 a5       	ldd	r23, Y+40	; 0x28
    23b8:	89 a5       	ldd	r24, Y+41	; 0x29
    23ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	4a ef       	ldi	r20, 0xFA	; 250
    23c2:	54 e4       	ldi	r21, 0x44	; 68
    23c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	8b a3       	std	Y+35, r24	; 0x23
    23ce:	9c a3       	std	Y+36, r25	; 0x24
    23d0:	ad a3       	std	Y+37, r26	; 0x25
    23d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23d4:	6b a1       	ldd	r22, Y+35	; 0x23
    23d6:	7c a1       	ldd	r23, Y+36	; 0x24
    23d8:	8d a1       	ldd	r24, Y+37	; 0x25
    23da:	9e a1       	ldd	r25, Y+38	; 0x26
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e8       	ldi	r20, 0x80	; 128
    23e2:	5f e3       	ldi	r21, 0x3F	; 63
    23e4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23e8:	88 23       	and	r24, r24
    23ea:	2c f4       	brge	.+10     	; 0x23f6 <LCD_Init+0x16c>
		__ticks = 1;
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	9a a3       	std	Y+34, r25	; 0x22
    23f2:	89 a3       	std	Y+33, r24	; 0x21
    23f4:	3f c0       	rjmp	.+126    	; 0x2474 <LCD_Init+0x1ea>
	else if (__tmp > 65535)
    23f6:	6b a1       	ldd	r22, Y+35	; 0x23
    23f8:	7c a1       	ldd	r23, Y+36	; 0x24
    23fa:	8d a1       	ldd	r24, Y+37	; 0x25
    23fc:	9e a1       	ldd	r25, Y+38	; 0x26
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	3f ef       	ldi	r19, 0xFF	; 255
    2402:	4f e7       	ldi	r20, 0x7F	; 127
    2404:	57 e4       	ldi	r21, 0x47	; 71
    2406:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    240a:	18 16       	cp	r1, r24
    240c:	4c f5       	brge	.+82     	; 0x2460 <LCD_Init+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240e:	6f a1       	ldd	r22, Y+39	; 0x27
    2410:	78 a5       	ldd	r23, Y+40	; 0x28
    2412:	89 a5       	ldd	r24, Y+41	; 0x29
    2414:	9a a5       	ldd	r25, Y+42	; 0x2a
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e2       	ldi	r20, 0x20	; 32
    241c:	51 e4       	ldi	r21, 0x41	; 65
    241e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	bc 01       	movw	r22, r24
    2428:	cd 01       	movw	r24, r26
    242a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	9a a3       	std	Y+34, r25	; 0x22
    2434:	89 a3       	std	Y+33, r24	; 0x21
    2436:	0f c0       	rjmp	.+30     	; 0x2456 <LCD_Init+0x1cc>
    2438:	88 ec       	ldi	r24, 0xC8	; 200
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	98 a3       	std	Y+32, r25	; 0x20
    243e:	8f 8f       	std	Y+31, r24	; 0x1f
    2440:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2442:	98 a1       	ldd	r25, Y+32	; 0x20
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <LCD_Init+0x1ba>
    2448:	98 a3       	std	Y+32, r25	; 0x20
    244a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244c:	89 a1       	ldd	r24, Y+33	; 0x21
    244e:	9a a1       	ldd	r25, Y+34	; 0x22
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	9a a3       	std	Y+34, r25	; 0x22
    2454:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2456:	89 a1       	ldd	r24, Y+33	; 0x21
    2458:	9a a1       	ldd	r25, Y+34	; 0x22
    245a:	00 97       	sbiw	r24, 0x00	; 0
    245c:	69 f7       	brne	.-38     	; 0x2438 <LCD_Init+0x1ae>
    245e:	14 c0       	rjmp	.+40     	; 0x2488 <LCD_Init+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2460:	6b a1       	ldd	r22, Y+35	; 0x23
    2462:	7c a1       	ldd	r23, Y+36	; 0x24
    2464:	8d a1       	ldd	r24, Y+37	; 0x25
    2466:	9e a1       	ldd	r25, Y+38	; 0x26
    2468:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	9a a3       	std	Y+34, r25	; 0x22
    2472:	89 a3       	std	Y+33, r24	; 0x21
    2474:	89 a1       	ldd	r24, Y+33	; 0x21
    2476:	9a a1       	ldd	r25, Y+34	; 0x22
    2478:	9e 8f       	std	Y+30, r25	; 0x1e
    247a:	8d 8f       	std	Y+29, r24	; 0x1d
    247c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    247e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	f1 f7       	brne	.-4      	; 0x2480 <LCD_Init+0x1f6>
    2484:	9e 8f       	std	Y+30, r25	; 0x1e
    2486:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_WriteCommand(0x0C);
    2488:	8c e0       	ldi	r24, 0x0C	; 12
    248a:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_WriteCommand>
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	a0 e8       	ldi	r26, 0x80	; 128
    2494:	bf e3       	ldi	r27, 0x3F	; 63
    2496:	89 8f       	std	Y+25, r24	; 0x19
    2498:	9a 8f       	std	Y+26, r25	; 0x1a
    249a:	ab 8f       	std	Y+27, r26	; 0x1b
    249c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249e:	69 8d       	ldd	r22, Y+25	; 0x19
    24a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	4a ef       	ldi	r20, 0xFA	; 250
    24ac:	54 e4       	ldi	r21, 0x44	; 68
    24ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	8d 8b       	std	Y+21, r24	; 0x15
    24b8:	9e 8b       	std	Y+22, r25	; 0x16
    24ba:	af 8b       	std	Y+23, r26	; 0x17
    24bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24be:	6d 89       	ldd	r22, Y+21	; 0x15
    24c0:	7e 89       	ldd	r23, Y+22	; 0x16
    24c2:	8f 89       	ldd	r24, Y+23	; 0x17
    24c4:	98 8d       	ldd	r25, Y+24	; 0x18
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e8       	ldi	r20, 0x80	; 128
    24cc:	5f e3       	ldi	r21, 0x3F	; 63
    24ce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24d2:	88 23       	and	r24, r24
    24d4:	2c f4       	brge	.+10     	; 0x24e0 <LCD_Init+0x256>
		__ticks = 1;
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	9c 8b       	std	Y+20, r25	; 0x14
    24dc:	8b 8b       	std	Y+19, r24	; 0x13
    24de:	3f c0       	rjmp	.+126    	; 0x255e <LCD_Init+0x2d4>
	else if (__tmp > 65535)
    24e0:	6d 89       	ldd	r22, Y+21	; 0x15
    24e2:	7e 89       	ldd	r23, Y+22	; 0x16
    24e4:	8f 89       	ldd	r24, Y+23	; 0x17
    24e6:	98 8d       	ldd	r25, Y+24	; 0x18
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	3f ef       	ldi	r19, 0xFF	; 255
    24ec:	4f e7       	ldi	r20, 0x7F	; 127
    24ee:	57 e4       	ldi	r21, 0x47	; 71
    24f0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24f4:	18 16       	cp	r1, r24
    24f6:	4c f5       	brge	.+82     	; 0x254a <LCD_Init+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f8:	69 8d       	ldd	r22, Y+25	; 0x19
    24fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e2       	ldi	r20, 0x20	; 32
    2506:	51 e4       	ldi	r21, 0x41	; 65
    2508:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	bc 01       	movw	r22, r24
    2512:	cd 01       	movw	r24, r26
    2514:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	9c 8b       	std	Y+20, r25	; 0x14
    251e:	8b 8b       	std	Y+19, r24	; 0x13
    2520:	0f c0       	rjmp	.+30     	; 0x2540 <LCD_Init+0x2b6>
    2522:	88 ec       	ldi	r24, 0xC8	; 200
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	9a 8b       	std	Y+18, r25	; 0x12
    2528:	89 8b       	std	Y+17, r24	; 0x11
    252a:	89 89       	ldd	r24, Y+17	; 0x11
    252c:	9a 89       	ldd	r25, Y+18	; 0x12
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <LCD_Init+0x2a4>
    2532:	9a 8b       	std	Y+18, r25	; 0x12
    2534:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2536:	8b 89       	ldd	r24, Y+19	; 0x13
    2538:	9c 89       	ldd	r25, Y+20	; 0x14
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	9c 8b       	std	Y+20, r25	; 0x14
    253e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2540:	8b 89       	ldd	r24, Y+19	; 0x13
    2542:	9c 89       	ldd	r25, Y+20	; 0x14
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	69 f7       	brne	.-38     	; 0x2522 <LCD_Init+0x298>
    2548:	14 c0       	rjmp	.+40     	; 0x2572 <LCD_Init+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254a:	6d 89       	ldd	r22, Y+21	; 0x15
    254c:	7e 89       	ldd	r23, Y+22	; 0x16
    254e:	8f 89       	ldd	r24, Y+23	; 0x17
    2550:	98 8d       	ldd	r25, Y+24	; 0x18
    2552:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	9c 8b       	std	Y+20, r25	; 0x14
    255c:	8b 8b       	std	Y+19, r24	; 0x13
    255e:	8b 89       	ldd	r24, Y+19	; 0x13
    2560:	9c 89       	ldd	r25, Y+20	; 0x14
    2562:	98 8b       	std	Y+16, r25	; 0x10
    2564:	8f 87       	std	Y+15, r24	; 0x0f
    2566:	8f 85       	ldd	r24, Y+15	; 0x0f
    2568:	98 89       	ldd	r25, Y+16	; 0x10
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	f1 f7       	brne	.-4      	; 0x256a <LCD_Init+0x2e0>
    256e:	98 8b       	std	Y+16, r25	; 0x10
    2570:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_WriteCommand(0x01);
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_WriteCommand>
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	a0 e0       	ldi	r26, 0x00	; 0
    257e:	b0 e4       	ldi	r27, 0x40	; 64
    2580:	8b 87       	std	Y+11, r24	; 0x0b
    2582:	9c 87       	std	Y+12, r25	; 0x0c
    2584:	ad 87       	std	Y+13, r26	; 0x0d
    2586:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2588:	6b 85       	ldd	r22, Y+11	; 0x0b
    258a:	7c 85       	ldd	r23, Y+12	; 0x0c
    258c:	8d 85       	ldd	r24, Y+13	; 0x0d
    258e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	4a ef       	ldi	r20, 0xFA	; 250
    2596:	54 e4       	ldi	r21, 0x44	; 68
    2598:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	8f 83       	std	Y+7, r24	; 0x07
    25a2:	98 87       	std	Y+8, r25	; 0x08
    25a4:	a9 87       	std	Y+9, r26	; 0x09
    25a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25a8:	6f 81       	ldd	r22, Y+7	; 0x07
    25aa:	78 85       	ldd	r23, Y+8	; 0x08
    25ac:	89 85       	ldd	r24, Y+9	; 0x09
    25ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e8       	ldi	r20, 0x80	; 128
    25b6:	5f e3       	ldi	r21, 0x3F	; 63
    25b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25bc:	88 23       	and	r24, r24
    25be:	2c f4       	brge	.+10     	; 0x25ca <LCD_Init+0x340>
		__ticks = 1;
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	9e 83       	std	Y+6, r25	; 0x06
    25c6:	8d 83       	std	Y+5, r24	; 0x05
    25c8:	3f c0       	rjmp	.+126    	; 0x2648 <LCD_Init+0x3be>
	else if (__tmp > 65535)
    25ca:	6f 81       	ldd	r22, Y+7	; 0x07
    25cc:	78 85       	ldd	r23, Y+8	; 0x08
    25ce:	89 85       	ldd	r24, Y+9	; 0x09
    25d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	3f ef       	ldi	r19, 0xFF	; 255
    25d6:	4f e7       	ldi	r20, 0x7F	; 127
    25d8:	57 e4       	ldi	r21, 0x47	; 71
    25da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25de:	18 16       	cp	r1, r24
    25e0:	4c f5       	brge	.+82     	; 0x2634 <LCD_Init+0x3aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e2       	ldi	r20, 0x20	; 32
    25f0:	51 e4       	ldi	r21, 0x41	; 65
    25f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	bc 01       	movw	r22, r24
    25fc:	cd 01       	movw	r24, r26
    25fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	9e 83       	std	Y+6, r25	; 0x06
    2608:	8d 83       	std	Y+5, r24	; 0x05
    260a:	0f c0       	rjmp	.+30     	; 0x262a <LCD_Init+0x3a0>
    260c:	88 ec       	ldi	r24, 0xC8	; 200
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	9c 83       	std	Y+4, r25	; 0x04
    2612:	8b 83       	std	Y+3, r24	; 0x03
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	9c 81       	ldd	r25, Y+4	; 0x04
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <LCD_Init+0x38e>
    261c:	9c 83       	std	Y+4, r25	; 0x04
    261e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2620:	8d 81       	ldd	r24, Y+5	; 0x05
    2622:	9e 81       	ldd	r25, Y+6	; 0x06
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	9e 83       	std	Y+6, r25	; 0x06
    2628:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262a:	8d 81       	ldd	r24, Y+5	; 0x05
    262c:	9e 81       	ldd	r25, Y+6	; 0x06
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	69 f7       	brne	.-38     	; 0x260c <LCD_Init+0x382>
    2632:	14 c0       	rjmp	.+40     	; 0x265c <LCD_Init+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2634:	6f 81       	ldd	r22, Y+7	; 0x07
    2636:	78 85       	ldd	r23, Y+8	; 0x08
    2638:	89 85       	ldd	r24, Y+9	; 0x09
    263a:	9a 85       	ldd	r25, Y+10	; 0x0a
    263c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	9e 83       	std	Y+6, r25	; 0x06
    2646:	8d 83       	std	Y+5, r24	; 0x05
    2648:	8d 81       	ldd	r24, Y+5	; 0x05
    264a:	9e 81       	ldd	r25, Y+6	; 0x06
    264c:	9a 83       	std	Y+2, r25	; 0x02
    264e:	89 83       	std	Y+1, r24	; 0x01
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	9a 81       	ldd	r25, Y+2	; 0x02
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <LCD_Init+0x3ca>
    2658:	9a 83       	std	Y+2, r25	; 0x02
    265a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_WriteCommand(0x06);
    265c:	86 e0       	ldi	r24, 0x06	; 6
    265e:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_WriteCommand>
}
    2662:	e8 96       	adiw	r28, 0x38	; 56
    2664:	0f b6       	in	r0, 0x3f	; 63
    2666:	f8 94       	cli
    2668:	de bf       	out	0x3e, r29	; 62
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	cd bf       	out	0x3d, r28	; 61
    266e:	cf 91       	pop	r28
    2670:	df 91       	pop	r29
    2672:	08 95       	ret

00002674 <LCD_WriteCommand>:

void LCD_WriteCommand(u8 Command)
{
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	6d 97       	sbiw	r28, 0x1d	; 29
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
    2688:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Rs = 0*/
	DIO_SetPinValue(DIO_PORTB,DIO_PIN1,DIO_LOW);
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	61 e0       	ldi	r22, 0x01	; 1
    268e:	40 e0       	ldi	r20, 0x00	; 0
    2690:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	/* Rw = 0*/

	DIO_SetPortValue(DIO_PORTA,Command);
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2698:	0e 94 39 08 	call	0x1072	; 0x1072 <DIO_SetPortValue>
	/*Set Enable */
	DIO_SetPinValue(DIO_PORTB,DIO_PIN2,DIO_HIGH); //EN
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	62 e0       	ldi	r22, 0x02	; 2
    26a0:	41 e0       	ldi	r20, 0x01	; 1
    26a2:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	a0 e8       	ldi	r26, 0x80	; 128
    26ac:	bf e3       	ldi	r27, 0x3F	; 63
    26ae:	89 8f       	std	Y+25, r24	; 0x19
    26b0:	9a 8f       	std	Y+26, r25	; 0x1a
    26b2:	ab 8f       	std	Y+27, r26	; 0x1b
    26b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b6:	69 8d       	ldd	r22, Y+25	; 0x19
    26b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	4a ef       	ldi	r20, 0xFA	; 250
    26c4:	54 e4       	ldi	r21, 0x44	; 68
    26c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	8d 8b       	std	Y+21, r24	; 0x15
    26d0:	9e 8b       	std	Y+22, r25	; 0x16
    26d2:	af 8b       	std	Y+23, r26	; 0x17
    26d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26d6:	6d 89       	ldd	r22, Y+21	; 0x15
    26d8:	7e 89       	ldd	r23, Y+22	; 0x16
    26da:	8f 89       	ldd	r24, Y+23	; 0x17
    26dc:	98 8d       	ldd	r25, Y+24	; 0x18
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e8       	ldi	r20, 0x80	; 128
    26e4:	5f e3       	ldi	r21, 0x3F	; 63
    26e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26ea:	88 23       	and	r24, r24
    26ec:	2c f4       	brge	.+10     	; 0x26f8 <LCD_WriteCommand+0x84>
		__ticks = 1;
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	9c 8b       	std	Y+20, r25	; 0x14
    26f4:	8b 8b       	std	Y+19, r24	; 0x13
    26f6:	3f c0       	rjmp	.+126    	; 0x2776 <LCD_WriteCommand+0x102>
	else if (__tmp > 65535)
    26f8:	6d 89       	ldd	r22, Y+21	; 0x15
    26fa:	7e 89       	ldd	r23, Y+22	; 0x16
    26fc:	8f 89       	ldd	r24, Y+23	; 0x17
    26fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	3f ef       	ldi	r19, 0xFF	; 255
    2704:	4f e7       	ldi	r20, 0x7F	; 127
    2706:	57 e4       	ldi	r21, 0x47	; 71
    2708:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    270c:	18 16       	cp	r1, r24
    270e:	4c f5       	brge	.+82     	; 0x2762 <LCD_WriteCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2710:	69 8d       	ldd	r22, Y+25	; 0x19
    2712:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2714:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2716:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e2       	ldi	r20, 0x20	; 32
    271e:	51 e4       	ldi	r21, 0x41	; 65
    2720:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	bc 01       	movw	r22, r24
    272a:	cd 01       	movw	r24, r26
    272c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	9c 8b       	std	Y+20, r25	; 0x14
    2736:	8b 8b       	std	Y+19, r24	; 0x13
    2738:	0f c0       	rjmp	.+30     	; 0x2758 <LCD_WriteCommand+0xe4>
    273a:	88 ec       	ldi	r24, 0xC8	; 200
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	9a 8b       	std	Y+18, r25	; 0x12
    2740:	89 8b       	std	Y+17, r24	; 0x11
    2742:	89 89       	ldd	r24, Y+17	; 0x11
    2744:	9a 89       	ldd	r25, Y+18	; 0x12
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <LCD_WriteCommand+0xd2>
    274a:	9a 8b       	std	Y+18, r25	; 0x12
    274c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    274e:	8b 89       	ldd	r24, Y+19	; 0x13
    2750:	9c 89       	ldd	r25, Y+20	; 0x14
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	9c 8b       	std	Y+20, r25	; 0x14
    2756:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2758:	8b 89       	ldd	r24, Y+19	; 0x13
    275a:	9c 89       	ldd	r25, Y+20	; 0x14
    275c:	00 97       	sbiw	r24, 0x00	; 0
    275e:	69 f7       	brne	.-38     	; 0x273a <LCD_WriteCommand+0xc6>
    2760:	14 c0       	rjmp	.+40     	; 0x278a <LCD_WriteCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2762:	6d 89       	ldd	r22, Y+21	; 0x15
    2764:	7e 89       	ldd	r23, Y+22	; 0x16
    2766:	8f 89       	ldd	r24, Y+23	; 0x17
    2768:	98 8d       	ldd	r25, Y+24	; 0x18
    276a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9c 8b       	std	Y+20, r25	; 0x14
    2774:	8b 8b       	std	Y+19, r24	; 0x13
    2776:	8b 89       	ldd	r24, Y+19	; 0x13
    2778:	9c 89       	ldd	r25, Y+20	; 0x14
    277a:	98 8b       	std	Y+16, r25	; 0x10
    277c:	8f 87       	std	Y+15, r24	; 0x0f
    277e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2780:	98 89       	ldd	r25, Y+16	; 0x10
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <LCD_WriteCommand+0x10e>
    2786:	98 8b       	std	Y+16, r25	; 0x10
    2788:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN2,DIO_LOW);
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	62 e0       	ldi	r22, 0x02	; 2
    278e:	40 e0       	ldi	r20, 0x00	; 0
    2790:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	a0 ea       	ldi	r26, 0xA0	; 160
    279a:	b0 e4       	ldi	r27, 0x40	; 64
    279c:	8b 87       	std	Y+11, r24	; 0x0b
    279e:	9c 87       	std	Y+12, r25	; 0x0c
    27a0:	ad 87       	std	Y+13, r26	; 0x0d
    27a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	4a ef       	ldi	r20, 0xFA	; 250
    27b2:	54 e4       	ldi	r21, 0x44	; 68
    27b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	8f 83       	std	Y+7, r24	; 0x07
    27be:	98 87       	std	Y+8, r25	; 0x08
    27c0:	a9 87       	std	Y+9, r26	; 0x09
    27c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27c4:	6f 81       	ldd	r22, Y+7	; 0x07
    27c6:	78 85       	ldd	r23, Y+8	; 0x08
    27c8:	89 85       	ldd	r24, Y+9	; 0x09
    27ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	40 e8       	ldi	r20, 0x80	; 128
    27d2:	5f e3       	ldi	r21, 0x3F	; 63
    27d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27d8:	88 23       	and	r24, r24
    27da:	2c f4       	brge	.+10     	; 0x27e6 <LCD_WriteCommand+0x172>
		__ticks = 1;
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	9e 83       	std	Y+6, r25	; 0x06
    27e2:	8d 83       	std	Y+5, r24	; 0x05
    27e4:	3f c0       	rjmp	.+126    	; 0x2864 <LCD_WriteCommand+0x1f0>
	else if (__tmp > 65535)
    27e6:	6f 81       	ldd	r22, Y+7	; 0x07
    27e8:	78 85       	ldd	r23, Y+8	; 0x08
    27ea:	89 85       	ldd	r24, Y+9	; 0x09
    27ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	3f ef       	ldi	r19, 0xFF	; 255
    27f2:	4f e7       	ldi	r20, 0x7F	; 127
    27f4:	57 e4       	ldi	r21, 0x47	; 71
    27f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27fa:	18 16       	cp	r1, r24
    27fc:	4c f5       	brge	.+82     	; 0x2850 <LCD_WriteCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2800:	7c 85       	ldd	r23, Y+12	; 0x0c
    2802:	8d 85       	ldd	r24, Y+13	; 0x0d
    2804:	9e 85       	ldd	r25, Y+14	; 0x0e
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	40 e2       	ldi	r20, 0x20	; 32
    280c:	51 e4       	ldi	r21, 0x41	; 65
    280e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	bc 01       	movw	r22, r24
    2818:	cd 01       	movw	r24, r26
    281a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	9e 83       	std	Y+6, r25	; 0x06
    2824:	8d 83       	std	Y+5, r24	; 0x05
    2826:	0f c0       	rjmp	.+30     	; 0x2846 <LCD_WriteCommand+0x1d2>
    2828:	88 ec       	ldi	r24, 0xC8	; 200
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	9c 83       	std	Y+4, r25	; 0x04
    282e:	8b 83       	std	Y+3, r24	; 0x03
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	9c 81       	ldd	r25, Y+4	; 0x04
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	f1 f7       	brne	.-4      	; 0x2834 <LCD_WriteCommand+0x1c0>
    2838:	9c 83       	std	Y+4, r25	; 0x04
    283a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283c:	8d 81       	ldd	r24, Y+5	; 0x05
    283e:	9e 81       	ldd	r25, Y+6	; 0x06
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	9e 83       	std	Y+6, r25	; 0x06
    2844:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2846:	8d 81       	ldd	r24, Y+5	; 0x05
    2848:	9e 81       	ldd	r25, Y+6	; 0x06
    284a:	00 97       	sbiw	r24, 0x00	; 0
    284c:	69 f7       	brne	.-38     	; 0x2828 <LCD_WriteCommand+0x1b4>
    284e:	14 c0       	rjmp	.+40     	; 0x2878 <LCD_WriteCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2850:	6f 81       	ldd	r22, Y+7	; 0x07
    2852:	78 85       	ldd	r23, Y+8	; 0x08
    2854:	89 85       	ldd	r24, Y+9	; 0x09
    2856:	9a 85       	ldd	r25, Y+10	; 0x0a
    2858:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	9e 83       	std	Y+6, r25	; 0x06
    2862:	8d 83       	std	Y+5, r24	; 0x05
    2864:	8d 81       	ldd	r24, Y+5	; 0x05
    2866:	9e 81       	ldd	r25, Y+6	; 0x06
    2868:	9a 83       	std	Y+2, r25	; 0x02
    286a:	89 83       	std	Y+1, r24	; 0x01
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	9a 81       	ldd	r25, Y+2	; 0x02
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	f1 f7       	brne	.-4      	; 0x2870 <LCD_WriteCommand+0x1fc>
    2874:	9a 83       	std	Y+2, r25	; 0x02
    2876:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2878:	6d 96       	adiw	r28, 0x1d	; 29
    287a:	0f b6       	in	r0, 0x3f	; 63
    287c:	f8 94       	cli
    287e:	de bf       	out	0x3e, r29	; 62
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	cd bf       	out	0x3d, r28	; 61
    2884:	cf 91       	pop	r28
    2886:	df 91       	pop	r29
    2888:	08 95       	ret

0000288a <LCD_WriteData>:
void LCD_WriteData(u8 Data)
{
    288a:	df 93       	push	r29
    288c:	cf 93       	push	r28
    288e:	cd b7       	in	r28, 0x3d	; 61
    2890:	de b7       	in	r29, 0x3e	; 62
    2892:	6d 97       	sbiw	r28, 0x1d	; 29
    2894:	0f b6       	in	r0, 0x3f	; 63
    2896:	f8 94       	cli
    2898:	de bf       	out	0x3e, r29	; 62
    289a:	0f be       	out	0x3f, r0	; 63
    289c:	cd bf       	out	0x3d, r28	; 61
    289e:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Rs = 0*/
	DIO_SetPinValue(DIO_PORTB,DIO_PIN1,DIO_HIGH);
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	61 e0       	ldi	r22, 0x01	; 1
    28a4:	41 e0       	ldi	r20, 0x01	; 1
    28a6:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	/* Rw = 0*/

	DIO_SetPortValue(DIO_PORTA,Data);
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	6d 8d       	ldd	r22, Y+29	; 0x1d
    28ae:	0e 94 39 08 	call	0x1072	; 0x1072 <DIO_SetPortValue>
	/*Set Enable */
	DIO_SetPinValue(DIO_PORTB,DIO_PIN2,DIO_HIGH); //EN
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	62 e0       	ldi	r22, 0x02	; 2
    28b6:	41 e0       	ldi	r20, 0x01	; 1
    28b8:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	a0 e8       	ldi	r26, 0x80	; 128
    28c2:	bf e3       	ldi	r27, 0x3F	; 63
    28c4:	89 8f       	std	Y+25, r24	; 0x19
    28c6:	9a 8f       	std	Y+26, r25	; 0x1a
    28c8:	ab 8f       	std	Y+27, r26	; 0x1b
    28ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28cc:	69 8d       	ldd	r22, Y+25	; 0x19
    28ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	4a ef       	ldi	r20, 0xFA	; 250
    28da:	54 e4       	ldi	r21, 0x44	; 68
    28dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	8d 8b       	std	Y+21, r24	; 0x15
    28e6:	9e 8b       	std	Y+22, r25	; 0x16
    28e8:	af 8b       	std	Y+23, r26	; 0x17
    28ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28ec:	6d 89       	ldd	r22, Y+21	; 0x15
    28ee:	7e 89       	ldd	r23, Y+22	; 0x16
    28f0:	8f 89       	ldd	r24, Y+23	; 0x17
    28f2:	98 8d       	ldd	r25, Y+24	; 0x18
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e8       	ldi	r20, 0x80	; 128
    28fa:	5f e3       	ldi	r21, 0x3F	; 63
    28fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2900:	88 23       	and	r24, r24
    2902:	2c f4       	brge	.+10     	; 0x290e <LCD_WriteData+0x84>
		__ticks = 1;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	9c 8b       	std	Y+20, r25	; 0x14
    290a:	8b 8b       	std	Y+19, r24	; 0x13
    290c:	3f c0       	rjmp	.+126    	; 0x298c <LCD_WriteData+0x102>
	else if (__tmp > 65535)
    290e:	6d 89       	ldd	r22, Y+21	; 0x15
    2910:	7e 89       	ldd	r23, Y+22	; 0x16
    2912:	8f 89       	ldd	r24, Y+23	; 0x17
    2914:	98 8d       	ldd	r25, Y+24	; 0x18
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	3f ef       	ldi	r19, 0xFF	; 255
    291a:	4f e7       	ldi	r20, 0x7F	; 127
    291c:	57 e4       	ldi	r21, 0x47	; 71
    291e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2922:	18 16       	cp	r1, r24
    2924:	4c f5       	brge	.+82     	; 0x2978 <LCD_WriteData+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2926:	69 8d       	ldd	r22, Y+25	; 0x19
    2928:	7a 8d       	ldd	r23, Y+26	; 0x1a
    292a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    292c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e2       	ldi	r20, 0x20	; 32
    2934:	51 e4       	ldi	r21, 0x41	; 65
    2936:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	9c 8b       	std	Y+20, r25	; 0x14
    294c:	8b 8b       	std	Y+19, r24	; 0x13
    294e:	0f c0       	rjmp	.+30     	; 0x296e <LCD_WriteData+0xe4>
    2950:	88 ec       	ldi	r24, 0xC8	; 200
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	9a 8b       	std	Y+18, r25	; 0x12
    2956:	89 8b       	std	Y+17, r24	; 0x11
    2958:	89 89       	ldd	r24, Y+17	; 0x11
    295a:	9a 89       	ldd	r25, Y+18	; 0x12
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <LCD_WriteData+0xd2>
    2960:	9a 8b       	std	Y+18, r25	; 0x12
    2962:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2964:	8b 89       	ldd	r24, Y+19	; 0x13
    2966:	9c 89       	ldd	r25, Y+20	; 0x14
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	9c 8b       	std	Y+20, r25	; 0x14
    296c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296e:	8b 89       	ldd	r24, Y+19	; 0x13
    2970:	9c 89       	ldd	r25, Y+20	; 0x14
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	69 f7       	brne	.-38     	; 0x2950 <LCD_WriteData+0xc6>
    2976:	14 c0       	rjmp	.+40     	; 0x29a0 <LCD_WriteData+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2978:	6d 89       	ldd	r22, Y+21	; 0x15
    297a:	7e 89       	ldd	r23, Y+22	; 0x16
    297c:	8f 89       	ldd	r24, Y+23	; 0x17
    297e:	98 8d       	ldd	r25, Y+24	; 0x18
    2980:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	9c 8b       	std	Y+20, r25	; 0x14
    298a:	8b 8b       	std	Y+19, r24	; 0x13
    298c:	8b 89       	ldd	r24, Y+19	; 0x13
    298e:	9c 89       	ldd	r25, Y+20	; 0x14
    2990:	98 8b       	std	Y+16, r25	; 0x10
    2992:	8f 87       	std	Y+15, r24	; 0x0f
    2994:	8f 85       	ldd	r24, Y+15	; 0x0f
    2996:	98 89       	ldd	r25, Y+16	; 0x10
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <LCD_WriteData+0x10e>
    299c:	98 8b       	std	Y+16, r25	; 0x10
    299e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN2,DIO_LOW);
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	62 e0       	ldi	r22, 0x02	; 2
    29a4:	40 e0       	ldi	r20, 0x00	; 0
    29a6:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	a0 ea       	ldi	r26, 0xA0	; 160
    29b0:	b0 e4       	ldi	r27, 0x40	; 64
    29b2:	8b 87       	std	Y+11, r24	; 0x0b
    29b4:	9c 87       	std	Y+12, r25	; 0x0c
    29b6:	ad 87       	std	Y+13, r26	; 0x0d
    29b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    29bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29be:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	4a ef       	ldi	r20, 0xFA	; 250
    29c8:	54 e4       	ldi	r21, 0x44	; 68
    29ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	8f 83       	std	Y+7, r24	; 0x07
    29d4:	98 87       	std	Y+8, r25	; 0x08
    29d6:	a9 87       	std	Y+9, r26	; 0x09
    29d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29da:	6f 81       	ldd	r22, Y+7	; 0x07
    29dc:	78 85       	ldd	r23, Y+8	; 0x08
    29de:	89 85       	ldd	r24, Y+9	; 0x09
    29e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e8       	ldi	r20, 0x80	; 128
    29e8:	5f e3       	ldi	r21, 0x3F	; 63
    29ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29ee:	88 23       	and	r24, r24
    29f0:	2c f4       	brge	.+10     	; 0x29fc <LCD_WriteData+0x172>
		__ticks = 1;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	9e 83       	std	Y+6, r25	; 0x06
    29f8:	8d 83       	std	Y+5, r24	; 0x05
    29fa:	3f c0       	rjmp	.+126    	; 0x2a7a <LCD_WriteData+0x1f0>
	else if (__tmp > 65535)
    29fc:	6f 81       	ldd	r22, Y+7	; 0x07
    29fe:	78 85       	ldd	r23, Y+8	; 0x08
    2a00:	89 85       	ldd	r24, Y+9	; 0x09
    2a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	3f ef       	ldi	r19, 0xFF	; 255
    2a08:	4f e7       	ldi	r20, 0x7F	; 127
    2a0a:	57 e4       	ldi	r21, 0x47	; 71
    2a0c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a10:	18 16       	cp	r1, r24
    2a12:	4c f5       	brge	.+82     	; 0x2a66 <LCD_WriteData+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e2       	ldi	r20, 0x20	; 32
    2a22:	51 e4       	ldi	r21, 0x41	; 65
    2a24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	bc 01       	movw	r22, r24
    2a2e:	cd 01       	movw	r24, r26
    2a30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	9e 83       	std	Y+6, r25	; 0x06
    2a3a:	8d 83       	std	Y+5, r24	; 0x05
    2a3c:	0f c0       	rjmp	.+30     	; 0x2a5c <LCD_WriteData+0x1d2>
    2a3e:	88 ec       	ldi	r24, 0xC8	; 200
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	9c 83       	std	Y+4, r25	; 0x04
    2a44:	8b 83       	std	Y+3, r24	; 0x03
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	f1 f7       	brne	.-4      	; 0x2a4a <LCD_WriteData+0x1c0>
    2a4e:	9c 83       	std	Y+4, r25	; 0x04
    2a50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a52:	8d 81       	ldd	r24, Y+5	; 0x05
    2a54:	9e 81       	ldd	r25, Y+6	; 0x06
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	9e 83       	std	Y+6, r25	; 0x06
    2a5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	69 f7       	brne	.-38     	; 0x2a3e <LCD_WriteData+0x1b4>
    2a64:	14 c0       	rjmp	.+40     	; 0x2a8e <LCD_WriteData+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a66:	6f 81       	ldd	r22, Y+7	; 0x07
    2a68:	78 85       	ldd	r23, Y+8	; 0x08
    2a6a:	89 85       	ldd	r24, Y+9	; 0x09
    2a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	9e 83       	std	Y+6, r25	; 0x06
    2a78:	8d 83       	std	Y+5, r24	; 0x05
    2a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7e:	9a 83       	std	Y+2, r25	; 0x02
    2a80:	89 83       	std	Y+1, r24	; 0x01
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	9a 81       	ldd	r25, Y+2	; 0x02
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_WriteData+0x1fc>
    2a8a:	9a 83       	std	Y+2, r25	; 0x02
    2a8c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2a8e:	6d 96       	adiw	r28, 0x1d	; 29
    2a90:	0f b6       	in	r0, 0x3f	; 63
    2a92:	f8 94       	cli
    2a94:	de bf       	out	0x3e, r29	; 62
    2a96:	0f be       	out	0x3f, r0	; 63
    2a98:	cd bf       	out	0x3d, r28	; 61
    2a9a:	cf 91       	pop	r28
    2a9c:	df 91       	pop	r29
    2a9e:	08 95       	ret

00002aa0 <LCD_WriteString>:




void LCD_WriteString(char *Ptr)
{
    2aa0:	df 93       	push	r29
    2aa2:	cf 93       	push	r28
    2aa4:	00 d0       	rcall	.+0      	; 0x2aa6 <LCD_WriteString+0x6>
    2aa6:	0f 92       	push	r0
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
    2aac:	9b 83       	std	Y+3, r25	; 0x03
    2aae:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2ab0:	19 82       	std	Y+1, r1	; 0x01
    2ab2:	0e c0       	rjmp	.+28     	; 0x2ad0 <LCD_WriteString+0x30>
	while(Ptr[i] != '\0')
	{
		LCD_WriteData(Ptr[i]);
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	28 2f       	mov	r18, r24
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	9b 81       	ldd	r25, Y+3	; 0x03
    2abe:	fc 01       	movw	r30, r24
    2ac0:	e2 0f       	add	r30, r18
    2ac2:	f3 1f       	adc	r31, r19
    2ac4:	80 81       	ld	r24, Z
    2ac6:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_WriteData>
		i++;
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	8f 5f       	subi	r24, 0xFF	; 255
    2ace:	89 83       	std	Y+1, r24	; 0x01


void LCD_WriteString(char *Ptr)
{
	u8 i = 0;
	while(Ptr[i] != '\0')
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    2ada:	fc 01       	movw	r30, r24
    2adc:	e2 0f       	add	r30, r18
    2ade:	f3 1f       	adc	r31, r19
    2ae0:	80 81       	ld	r24, Z
    2ae2:	88 23       	and	r24, r24
    2ae4:	39 f7       	brne	.-50     	; 0x2ab4 <LCD_WriteString+0x14>
	{
		LCD_WriteData(Ptr[i]);
		i++;
	}
}
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
    2aea:	0f 90       	pop	r0
    2aec:	cf 91       	pop	r28
    2aee:	df 91       	pop	r29
    2af0:	08 95       	ret

00002af2 <LCD_GoToXY>:




void LCD_GoToXY(u8 X_Pos , u8 Y_Pos)
{
    2af2:	df 93       	push	r29
    2af4:	cf 93       	push	r28
    2af6:	00 d0       	rcall	.+0      	; 0x2af8 <LCD_GoToXY+0x6>
    2af8:	0f 92       	push	r0
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	8a 83       	std	Y+2, r24	; 0x02
    2b00:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Adress;

	if (X_Pos==0)
    2b02:	8a 81       	ldd	r24, Y+2	; 0x02
    2b04:	88 23       	and	r24, r24
    2b06:	19 f4       	brne	.+6      	; 0x2b0e <LCD_GoToXY+0x1c>
	{
		Local_Adress=Y_Pos;
    2b08:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0a:	89 83       	std	Y+1, r24	; 0x01
    2b0c:	06 c0       	rjmp	.+12     	; 0x2b1a <LCD_GoToXY+0x28>

	}

	else if (X_Pos==1)
    2b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b10:	81 30       	cpi	r24, 0x01	; 1
    2b12:	19 f4       	brne	.+6      	; 0x2b1a <LCD_GoToXY+0x28>
	{
		Local_Adress = Y_Pos+ 0x40 ;
    2b14:	8b 81       	ldd	r24, Y+3	; 0x03
    2b16:	80 5c       	subi	r24, 0xC0	; 192
    2b18:	89 83       	std	Y+1, r24	; 0x01
	}

	/* set the calculated address into DDRAM */
	LCD_WriteCommand(Local_Adress+128);
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	80 58       	subi	r24, 0x80	; 128
    2b1e:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_WriteCommand>


}
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	cf 91       	pop	r28
    2b2a:	df 91       	pop	r29
    2b2c:	08 95       	ret

00002b2e <LCD_voidDisplayIntegar>:


void LCD_voidDisplayIntegar(u32 COPY_u32Number)
{
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
    2b36:	64 97       	sbiw	r28, 0x14	; 20
    2b38:	0f b6       	in	r0, 0x3f	; 63
    2b3a:	f8 94       	cli
    2b3c:	de bf       	out	0x3e, r29	; 62
    2b3e:	0f be       	out	0x3f, r0	; 63
    2b40:	cd bf       	out	0x3d, r28	; 61
    2b42:	69 8b       	std	Y+17, r22	; 0x11
    2b44:	7a 8b       	std	Y+18, r23	; 0x12
    2b46:	8b 8b       	std	Y+19, r24	; 0x13
    2b48:	9c 8b       	std	Y+20, r25	; 0x14
	u8 LOCAL_u8Num[10]={0};
    2b4a:	8a e0       	ldi	r24, 0x0A	; 10
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	37 96       	adiw	r30, 0x07	; 7
    2b50:	df 01       	movw	r26, r30
    2b52:	98 2f       	mov	r25, r24
    2b54:	1d 92       	st	X+, r1
    2b56:	9a 95       	dec	r25
    2b58:	e9 f7       	brne	.-6      	; 0x2b54 <LCD_voidDisplayIntegar+0x26>
	s16 i=0;
    2b5a:	1e 82       	std	Y+6, r1	; 0x06
    2b5c:	1d 82       	std	Y+5, r1	; 0x05
	u32 LOCAL_u32Remainder;
	if(COPY_u32Number==0)
    2b5e:	89 89       	ldd	r24, Y+17	; 0x11
    2b60:	9a 89       	ldd	r25, Y+18	; 0x12
    2b62:	ab 89       	ldd	r26, Y+19	; 0x13
    2b64:	bc 89       	ldd	r27, Y+20	; 0x14
    2b66:	00 97       	sbiw	r24, 0x00	; 0
    2b68:	a1 05       	cpc	r26, r1
    2b6a:	b1 05       	cpc	r27, r1
    2b6c:	19 f4       	brne	.+6      	; 0x2b74 <LCD_voidDisplayIntegar+0x46>
	{
		LCD_WriteData('0');
    2b6e:	80 e3       	ldi	r24, 0x30	; 48
    2b70:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_WriteData>
	}

	if(COPY_u32Number>0)
    2b74:	89 89       	ldd	r24, Y+17	; 0x11
    2b76:	9a 89       	ldd	r25, Y+18	; 0x12
    2b78:	ab 89       	ldd	r26, Y+19	; 0x13
    2b7a:	bc 89       	ldd	r27, Y+20	; 0x14
    2b7c:	00 97       	sbiw	r24, 0x00	; 0
    2b7e:	a1 05       	cpc	r26, r1
    2b80:	b1 05       	cpc	r27, r1
    2b82:	09 f4       	brne	.+2      	; 0x2b86 <LCD_voidDisplayIntegar+0x58>
    2b84:	55 c0       	rjmp	.+170    	; 0x2c30 <LCD_voidDisplayIntegar+0x102>
    2b86:	32 c0       	rjmp	.+100    	; 0x2bec <LCD_voidDisplayIntegar+0xbe>
	{
		while(COPY_u32Number!=0)
		{
			LOCAL_u32Remainder=COPY_u32Number%10;
    2b88:	89 89       	ldd	r24, Y+17	; 0x11
    2b8a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b8c:	ab 89       	ldd	r26, Y+19	; 0x13
    2b8e:	bc 89       	ldd	r27, Y+20	; 0x14
    2b90:	2a e0       	ldi	r18, 0x0A	; 10
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	40 e0       	ldi	r20, 0x00	; 0
    2b96:	50 e0       	ldi	r21, 0x00	; 0
    2b98:	bc 01       	movw	r22, r24
    2b9a:	cd 01       	movw	r24, r26
    2b9c:	0e 94 83 17 	call	0x2f06	; 0x2f06 <__udivmodsi4>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	89 83       	std	Y+1, r24	; 0x01
    2ba6:	9a 83       	std	Y+2, r25	; 0x02
    2ba8:	ab 83       	std	Y+3, r26	; 0x03
    2baa:	bc 83       	std	Y+4, r27	; 0x04
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
    2bac:	2d 81       	ldd	r18, Y+5	; 0x05
    2bae:	3e 81       	ldd	r19, Y+6	; 0x06
    2bb0:	49 81       	ldd	r20, Y+1	; 0x01
    2bb2:	ce 01       	movw	r24, r28
    2bb4:	07 96       	adiw	r24, 0x07	; 7
    2bb6:	fc 01       	movw	r30, r24
    2bb8:	e2 0f       	add	r30, r18
    2bba:	f3 1f       	adc	r31, r19
    2bbc:	40 83       	st	Z, r20
			COPY_u32Number=COPY_u32Number/10;
    2bbe:	89 89       	ldd	r24, Y+17	; 0x11
    2bc0:	9a 89       	ldd	r25, Y+18	; 0x12
    2bc2:	ab 89       	ldd	r26, Y+19	; 0x13
    2bc4:	bc 89       	ldd	r27, Y+20	; 0x14
    2bc6:	2a e0       	ldi	r18, 0x0A	; 10
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e0       	ldi	r20, 0x00	; 0
    2bcc:	50 e0       	ldi	r21, 0x00	; 0
    2bce:	bc 01       	movw	r22, r24
    2bd0:	cd 01       	movw	r24, r26
    2bd2:	0e 94 83 17 	call	0x2f06	; 0x2f06 <__udivmodsi4>
    2bd6:	da 01       	movw	r26, r20
    2bd8:	c9 01       	movw	r24, r18
    2bda:	89 8b       	std	Y+17, r24	; 0x11
    2bdc:	9a 8b       	std	Y+18, r25	; 0x12
    2bde:	ab 8b       	std	Y+19, r26	; 0x13
    2be0:	bc 8b       	std	Y+20, r27	; 0x14
			i++;
    2be2:	8d 81       	ldd	r24, Y+5	; 0x05
    2be4:	9e 81       	ldd	r25, Y+6	; 0x06
    2be6:	01 96       	adiw	r24, 0x01	; 1
    2be8:	9e 83       	std	Y+6, r25	; 0x06
    2bea:	8d 83       	std	Y+5, r24	; 0x05
		LCD_WriteData('0');
	}

	if(COPY_u32Number>0)
	{
		while(COPY_u32Number!=0)
    2bec:	89 89       	ldd	r24, Y+17	; 0x11
    2bee:	9a 89       	ldd	r25, Y+18	; 0x12
    2bf0:	ab 89       	ldd	r26, Y+19	; 0x13
    2bf2:	bc 89       	ldd	r27, Y+20	; 0x14
    2bf4:	00 97       	sbiw	r24, 0x00	; 0
    2bf6:	a1 05       	cpc	r26, r1
    2bf8:	b1 05       	cpc	r27, r1
    2bfa:	31 f6       	brne	.-116    	; 0x2b88 <LCD_voidDisplayIntegar+0x5a>
			LOCAL_u32Remainder=COPY_u32Number%10;
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
			COPY_u32Number=COPY_u32Number/10;
			i++;
		}
        i--;
    2bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	9e 83       	std	Y+6, r25	; 0x06
    2c04:	8d 83       	std	Y+5, r24	; 0x05
    2c06:	10 c0       	rjmp	.+32     	; 0x2c28 <LCD_voidDisplayIntegar+0xfa>
		while(i>=0)
		{
			LCD_WriteData(LOCAL_u8Num[i]+48);
    2c08:	2d 81       	ldd	r18, Y+5	; 0x05
    2c0a:	3e 81       	ldd	r19, Y+6	; 0x06
    2c0c:	ce 01       	movw	r24, r28
    2c0e:	07 96       	adiw	r24, 0x07	; 7
    2c10:	fc 01       	movw	r30, r24
    2c12:	e2 0f       	add	r30, r18
    2c14:	f3 1f       	adc	r31, r19
    2c16:	80 81       	ld	r24, Z
    2c18:	80 5d       	subi	r24, 0xD0	; 208
    2c1a:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_WriteData>
			i--;
    2c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c20:	9e 81       	ldd	r25, Y+6	; 0x06
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	9e 83       	std	Y+6, r25	; 0x06
    2c26:	8d 83       	std	Y+5, r24	; 0x05
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
			COPY_u32Number=COPY_u32Number/10;
			i++;
		}
        i--;
		while(i>=0)
    2c28:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2c:	99 23       	and	r25, r25
    2c2e:	64 f7       	brge	.-40     	; 0x2c08 <LCD_voidDisplayIntegar+0xda>
		{
			LCD_WriteData(LOCAL_u8Num[i]+48);
			i--;
		}
	}
}
    2c30:	64 96       	adiw	r28, 0x14	; 20
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	f8 94       	cli
    2c36:	de bf       	out	0x3e, r29	; 62
    2c38:	0f be       	out	0x3f, r0	; 63
    2c3a:	cd bf       	out	0x3d, r28	; 61
    2c3c:	cf 91       	pop	r28
    2c3e:	df 91       	pop	r29
    2c40:	08 95       	ret

00002c42 <LCD_voidDisplaySpecialChar>:


void LCD_voidDisplaySpecialChar(u8* Ptr_u8PtrChar,u8 CGRam_index,u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    2c42:	df 93       	push	r29
    2c44:	cf 93       	push	r28
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62
    2c4a:	27 97       	sbiw	r28, 0x07	; 7
    2c4c:	0f b6       	in	r0, 0x3f	; 63
    2c4e:	f8 94       	cli
    2c50:	de bf       	out	0x3e, r29	; 62
    2c52:	0f be       	out	0x3f, r0	; 63
    2c54:	cd bf       	out	0x3d, r28	; 61
    2c56:	9c 83       	std	Y+4, r25	; 0x04
    2c58:	8b 83       	std	Y+3, r24	; 0x03
    2c5a:	6d 83       	std	Y+5, r22	; 0x05
    2c5c:	4e 83       	std	Y+6, r20	; 0x06
    2c5e:	2f 83       	std	Y+7, r18	; 0x07
	LCD_GoToXY( Copy_u8RowNum, Copy_u8ColNum);
    2c60:	8e 81       	ldd	r24, Y+6	; 0x06
    2c62:	6f 81       	ldd	r22, Y+7	; 0x07
    2c64:	0e 94 79 15 	call	0x2af2	; 0x2af2 <LCD_GoToXY>
	LCD_WriteData(CGRam_index);
    2c68:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6a:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_WriteData>
	u8 Local_u8address;
	u8 Local_u8Index;
	if (CGRam_index < 8)
    2c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c70:	88 30       	cpi	r24, 0x08	; 8
    2c72:	18 f5       	brcc	.+70     	; 0x2cba <LCD_voidDisplaySpecialChar+0x78>
	{
		Local_u8address= CGRam_index * 8;
    2c74:	8d 81       	ldd	r24, Y+5	; 0x05
    2c76:	88 2f       	mov	r24, r24
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	88 0f       	add	r24, r24
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	88 0f       	add	r24, r24
    2c80:	99 1f       	adc	r25, r25
    2c82:	88 0f       	add	r24, r24
    2c84:	99 1f       	adc	r25, r25
    2c86:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8address=SET_BIT(Local_u8address,6);
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	80 64       	ori	r24, 0x40	; 64
    2c8c:	8a 83       	std	Y+2, r24	; 0x02
		LCD_WriteCommand(Local_u8address);
    2c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c90:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_WriteCommand>
		for(Local_u8Index = 0;Local_u8Index < 8;Local_u8Index++)
    2c94:	19 82       	std	Y+1, r1	; 0x01
    2c96:	0e c0       	rjmp	.+28     	; 0x2cb4 <LCD_voidDisplaySpecialChar+0x72>
		{
			LCD_WriteData(Ptr_u8PtrChar[Local_u8Index]);
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
    2c9a:	28 2f       	mov	r18, r24
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca2:	fc 01       	movw	r30, r24
    2ca4:	e2 0f       	add	r30, r18
    2ca6:	f3 1f       	adc	r31, r19
    2ca8:	80 81       	ld	r24, Z
    2caa:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_WriteData>
	if (CGRam_index < 8)
	{
		Local_u8address= CGRam_index * 8;
		Local_u8address=SET_BIT(Local_u8address,6);
		LCD_WriteCommand(Local_u8address);
		for(Local_u8Index = 0;Local_u8Index < 8;Local_u8Index++)
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	8f 5f       	subi	r24, 0xFF	; 255
    2cb2:	89 83       	std	Y+1, r24	; 0x01
    2cb4:	89 81       	ldd	r24, Y+1	; 0x01
    2cb6:	88 30       	cpi	r24, 0x08	; 8
    2cb8:	78 f3       	brcs	.-34     	; 0x2c98 <LCD_voidDisplaySpecialChar+0x56>
		{
			LCD_WriteData(Ptr_u8PtrChar[Local_u8Index]);
		}
	}
	LCD_WriteCommand(0x02);
    2cba:	82 e0       	ldi	r24, 0x02	; 2
    2cbc:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_WriteCommand>

}
    2cc0:	27 96       	adiw	r28, 0x07	; 7
    2cc2:	0f b6       	in	r0, 0x3f	; 63
    2cc4:	f8 94       	cli
    2cc6:	de bf       	out	0x3e, r29	; 62
    2cc8:	0f be       	out	0x3f, r0	; 63
    2cca:	cd bf       	out	0x3d, r28	; 61
    2ccc:	cf 91       	pop	r28
    2cce:	df 91       	pop	r29
    2cd0:	08 95       	ret

00002cd2 <KPD_Init>:
#include "KPD_CONFIG.h"
#include "KPD_INTERFACE.h"


void KPD_Init()
{
    2cd2:	df 93       	push	r29
    2cd4:	cf 93       	push	r28
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
			DIO_SetPinDirection(KPD_PORT,KPD_COULMN0_PIN,DIO_OUTPUT);
    2cda:	83 e0       	ldi	r24, 0x03	; 3
    2cdc:	60 e0       	ldi	r22, 0x00	; 0
    2cde:	41 e0       	ldi	r20, 0x01	; 1
    2ce0:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_COULMN1_PIN,DIO_OUTPUT);
    2ce4:	83 e0       	ldi	r24, 0x03	; 3
    2ce6:	61 e0       	ldi	r22, 0x01	; 1
    2ce8:	41 e0       	ldi	r20, 0x01	; 1
    2cea:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_COULMN2_PIN,DIO_OUTPUT);
    2cee:	83 e0       	ldi	r24, 0x03	; 3
    2cf0:	62 e0       	ldi	r22, 0x02	; 2
    2cf2:	41 e0       	ldi	r20, 0x01	; 1
    2cf4:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_COULMN3_PIN,DIO_OUTPUT);
    2cf8:	83 e0       	ldi	r24, 0x03	; 3
    2cfa:	63 e0       	ldi	r22, 0x03	; 3
    2cfc:	41 e0       	ldi	r20, 0x01	; 1
    2cfe:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinDirection>

			DIO_SetPinDirection(KPD_PORT,KPD_ROW0_PIN,DIO_INPUT);
    2d02:	83 e0       	ldi	r24, 0x03	; 3
    2d04:	64 e0       	ldi	r22, 0x04	; 4
    2d06:	40 e0       	ldi	r20, 0x00	; 0
    2d08:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_ROW1_PIN,DIO_INPUT);
    2d0c:	83 e0       	ldi	r24, 0x03	; 3
    2d0e:	65 e0       	ldi	r22, 0x05	; 5
    2d10:	40 e0       	ldi	r20, 0x00	; 0
    2d12:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_ROW2_PIN,DIO_INPUT);
    2d16:	83 e0       	ldi	r24, 0x03	; 3
    2d18:	66 e0       	ldi	r22, 0x06	; 6
    2d1a:	40 e0       	ldi	r20, 0x00	; 0
    2d1c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_ROW3_PIN,DIO_INPUT);
    2d20:	83 e0       	ldi	r24, 0x03	; 3
    2d22:	67 e0       	ldi	r22, 0x07	; 7
    2d24:	40 e0       	ldi	r20, 0x00	; 0
    2d26:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_SetPinDirection>
			//DIO_SetPortValue(KPD_PORT,0b00001111);
			DIO_SetPortValue(KPD_PORT,0xff);
    2d2a:	83 e0       	ldi	r24, 0x03	; 3
    2d2c:	6f ef       	ldi	r22, 0xFF	; 255
    2d2e:	0e 94 39 08 	call	0x1072	; 0x1072 <DIO_SetPortValue>
}
    2d32:	cf 91       	pop	r28
    2d34:	df 91       	pop	r29
    2d36:	08 95       	ret

00002d38 <KPD_u8GetPressedKye>:

u8 KPD_u8GetPressedKye(void)
{
    2d38:	df 93       	push	r29
    2d3a:	cf 93       	push	r28
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
    2d40:	a1 97       	sbiw	r28, 0x21	; 33
    2d42:	0f b6       	in	r0, 0x3f	; 63
    2d44:	f8 94       	cli
    2d46:	de bf       	out	0x3e, r29	; 62
    2d48:	0f be       	out	0x3f, r0	; 63
    2d4a:	cd bf       	out	0x3d, r28	; 61

	/*Indication for the pressed key value*/
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY;
    2d4c:	8f ef       	ldi	r24, 0xFF	; 255
    2d4e:	8b 83       	std	Y+3, r24	; 0x03

	u8 Local_u8CoulmnArr[COULMN_NUM]={KPD_COULMN0_PIN,KPD_COULMN1_PIN,KPD_COULMN2_PIN,KPD_COULMN3_PIN};
    2d50:	1c 82       	std	Y+4, r1	; 0x04
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	8d 83       	std	Y+5, r24	; 0x05
    2d56:	82 e0       	ldi	r24, 0x02	; 2
    2d58:	8e 83       	std	Y+6, r24	; 0x06
    2d5a:	83 e0       	ldi	r24, 0x03	; 3
    2d5c:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8RowArr[COULMN_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
    2d5e:	84 e0       	ldi	r24, 0x04	; 4
    2d60:	88 87       	std	Y+8, r24	; 0x08
    2d62:	85 e0       	ldi	r24, 0x05	; 5
    2d64:	89 87       	std	Y+9, r24	; 0x09
    2d66:	86 e0       	ldi	r24, 0x06	; 6
    2d68:	8a 87       	std	Y+10, r24	; 0x0a
    2d6a:	87 e0       	ldi	r24, 0x07	; 7
    2d6c:	8b 87       	std	Y+11, r24	; 0x0b

	/*Array of values of key pad*/
	u8 Local_u8KPDArr[ROW_NUM][COULMN_NUM]= KPD_ARR_VAL;
    2d6e:	ce 01       	movw	r24, r28
    2d70:	0c 96       	adiw	r24, 0x0c	; 12
    2d72:	9e 8f       	std	Y+30, r25	; 0x1e
    2d74:	8d 8f       	std	Y+29, r24	; 0x1d
    2d76:	e8 e6       	ldi	r30, 0x68	; 104
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	f8 a3       	std	Y+32, r31	; 0x20
    2d7c:	ef 8f       	std	Y+31, r30	; 0x1f
    2d7e:	f0 e1       	ldi	r31, 0x10	; 16
    2d80:	f9 a3       	std	Y+33, r31	; 0x21
    2d82:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2d84:	f8 a1       	ldd	r31, Y+32	; 0x20
    2d86:	00 80       	ld	r0, Z
    2d88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d8a:	98 a1       	ldd	r25, Y+32	; 0x20
    2d8c:	01 96       	adiw	r24, 0x01	; 1
    2d8e:	98 a3       	std	Y+32, r25	; 0x20
    2d90:	8f 8f       	std	Y+31, r24	; 0x1f
    2d92:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2d94:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2d96:	00 82       	st	Z, r0
    2d98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d9c:	01 96       	adiw	r24, 0x01	; 1
    2d9e:	9e 8f       	std	Y+30, r25	; 0x1e
    2da0:	8d 8f       	std	Y+29, r24	; 0x1d
    2da2:	99 a1       	ldd	r25, Y+33	; 0x21
    2da4:	91 50       	subi	r25, 0x01	; 1
    2da6:	99 a3       	std	Y+33, r25	; 0x21
    2da8:	e9 a1       	ldd	r30, Y+33	; 0x21
    2daa:	ee 23       	and	r30, r30
    2dac:	51 f7       	brne	.-44     	; 0x2d82 <KPD_u8GetPressedKye+0x4a>

	u8 Local_u8ColumnIndex,Local_u8RowIndex;

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex < COULMN_NUM; Local_u8ColumnIndex++)
    2dae:	1a 82       	std	Y+2, r1	; 0x02
    2db0:	72 c0       	rjmp	.+228    	; 0x2e96 <KPD_u8GetPressedKye+0x15e>
	{

		DIO_SetPinValue(KPD_PORT,Local_u8CoulmnArr[Local_u8ColumnIndex],DIO_LOW);
    2db2:	8a 81       	ldd	r24, Y+2	; 0x02
    2db4:	28 2f       	mov	r18, r24
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	ce 01       	movw	r24, r28
    2dba:	04 96       	adiw	r24, 0x04	; 4
    2dbc:	fc 01       	movw	r30, r24
    2dbe:	e2 0f       	add	r30, r18
    2dc0:	f3 1f       	adc	r31, r19
    2dc2:	90 81       	ld	r25, Z
    2dc4:	83 e0       	ldi	r24, 0x03	; 3
    2dc6:	69 2f       	mov	r22, r25
    2dc8:	40 e0       	ldi	r20, 0x00	; 0
    2dca:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>

		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
    2dce:	19 82       	std	Y+1, r1	; 0x01
    2dd0:	4d c0       	rjmp	.+154    	; 0x2e6c <KPD_u8GetPressedKye+0x134>
		{
			if(DIO_GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex])==DIO_LOW)
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	28 2f       	mov	r18, r24
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	ce 01       	movw	r24, r28
    2dda:	08 96       	adiw	r24, 0x08	; 8
    2ddc:	fc 01       	movw	r30, r24
    2dde:	e2 0f       	add	r30, r18
    2de0:	f3 1f       	adc	r31, r19
    2de2:	90 81       	ld	r25, Z
    2de4:	83 e0       	ldi	r24, 0x03	; 3
    2de6:	69 2f       	mov	r22, r25
    2de8:	0e 94 7f 07 	call	0xefe	; 0xefe <DIO_GetPinValue>
    2dec:	88 23       	and	r24, r24
    2dee:	d9 f5       	brne	.+118    	; 0x2e66 <KPD_u8GetPressedKye+0x12e>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    2df0:	89 81       	ldd	r24, Y+1	; 0x01
    2df2:	28 2f       	mov	r18, r24
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	8a 81       	ldd	r24, Y+2	; 0x02
    2df8:	48 2f       	mov	r20, r24
    2dfa:	50 e0       	ldi	r21, 0x00	; 0
    2dfc:	22 0f       	add	r18, r18
    2dfe:	33 1f       	adc	r19, r19
    2e00:	22 0f       	add	r18, r18
    2e02:	33 1f       	adc	r19, r19
    2e04:	ce 01       	movw	r24, r28
    2e06:	01 96       	adiw	r24, 0x01	; 1
    2e08:	82 0f       	add	r24, r18
    2e0a:	93 1f       	adc	r25, r19
    2e0c:	84 0f       	add	r24, r20
    2e0e:	95 1f       	adc	r25, r21
    2e10:	fc 01       	movw	r30, r24
    2e12:	3b 96       	adiw	r30, 0x0b	; 11
    2e14:	80 81       	ld	r24, Z
    2e16:	8b 83       	std	Y+3, r24	; 0x03
    2e18:	14 c0       	rjmp	.+40     	; 0x2e42 <KPD_u8GetPressedKye+0x10a>
				while(DIO_GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex])==DIO_LOW)
				{
					Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	28 2f       	mov	r18, r24
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	8a 81       	ldd	r24, Y+2	; 0x02
    2e22:	48 2f       	mov	r20, r24
    2e24:	50 e0       	ldi	r21, 0x00	; 0
    2e26:	22 0f       	add	r18, r18
    2e28:	33 1f       	adc	r19, r19
    2e2a:	22 0f       	add	r18, r18
    2e2c:	33 1f       	adc	r19, r19
    2e2e:	ce 01       	movw	r24, r28
    2e30:	01 96       	adiw	r24, 0x01	; 1
    2e32:	82 0f       	add	r24, r18
    2e34:	93 1f       	adc	r25, r19
    2e36:	84 0f       	add	r24, r20
    2e38:	95 1f       	adc	r25, r21
    2e3a:	fc 01       	movw	r30, r24
    2e3c:	3b 96       	adiw	r30, 0x0b	; 11
    2e3e:	80 81       	ld	r24, Z
    2e40:	8b 83       	std	Y+3, r24	; 0x03
		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
		{
			if(DIO_GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex])==DIO_LOW)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
				while(DIO_GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex])==DIO_LOW)
    2e42:	89 81       	ldd	r24, Y+1	; 0x01
    2e44:	28 2f       	mov	r18, r24
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	ce 01       	movw	r24, r28
    2e4a:	08 96       	adiw	r24, 0x08	; 8
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	e2 0f       	add	r30, r18
    2e50:	f3 1f       	adc	r31, r19
    2e52:	90 81       	ld	r25, Z
    2e54:	83 e0       	ldi	r24, 0x03	; 3
    2e56:	69 2f       	mov	r22, r25
    2e58:	0e 94 7f 07 	call	0xefe	; 0xefe <DIO_GetPinValue>
    2e5c:	88 23       	and	r24, r24
    2e5e:	e9 f2       	breq	.-70     	; 0x2e1a <KPD_u8GetPressedKye+0xe2>
				{
					Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
				}

				return Local_u8PressedKey;
    2e60:	fb 81       	ldd	r31, Y+3	; 0x03
    2e62:	fc 8f       	std	Y+28, r31	; 0x1c
    2e64:	1e c0       	rjmp	.+60     	; 0x2ea2 <KPD_u8GetPressedKye+0x16a>
	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex < COULMN_NUM; Local_u8ColumnIndex++)
	{

		DIO_SetPinValue(KPD_PORT,Local_u8CoulmnArr[Local_u8ColumnIndex],DIO_LOW);

		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
    2e66:	89 81       	ldd	r24, Y+1	; 0x01
    2e68:	8f 5f       	subi	r24, 0xFF	; 255
    2e6a:	89 83       	std	Y+1, r24	; 0x01
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	84 30       	cpi	r24, 0x04	; 4
    2e70:	08 f4       	brcc	.+2      	; 0x2e74 <KPD_u8GetPressedKye+0x13c>
    2e72:	af cf       	rjmp	.-162    	; 0x2dd2 <KPD_u8GetPressedKye+0x9a>
				}

				return Local_u8PressedKey;
			}
		}
		DIO_SetPinValue(KPD_PORT,Local_u8CoulmnArr[Local_u8ColumnIndex],DIO_HIGH);
    2e74:	8a 81       	ldd	r24, Y+2	; 0x02
    2e76:	28 2f       	mov	r18, r24
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	ce 01       	movw	r24, r28
    2e7c:	04 96       	adiw	r24, 0x04	; 4
    2e7e:	fc 01       	movw	r30, r24
    2e80:	e2 0f       	add	r30, r18
    2e82:	f3 1f       	adc	r31, r19
    2e84:	90 81       	ld	r25, Z
    2e86:	83 e0       	ldi	r24, 0x03	; 3
    2e88:	69 2f       	mov	r22, r25
    2e8a:	41 e0       	ldi	r20, 0x01	; 1
    2e8c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <DIO_SetPinValue>
	/*Array of values of key pad*/
	u8 Local_u8KPDArr[ROW_NUM][COULMN_NUM]= KPD_ARR_VAL;

	u8 Local_u8ColumnIndex,Local_u8RowIndex;

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex < COULMN_NUM; Local_u8ColumnIndex++)
    2e90:	8a 81       	ldd	r24, Y+2	; 0x02
    2e92:	8f 5f       	subi	r24, 0xFF	; 255
    2e94:	8a 83       	std	Y+2, r24	; 0x02
    2e96:	8a 81       	ldd	r24, Y+2	; 0x02
    2e98:	84 30       	cpi	r24, 0x04	; 4
    2e9a:	08 f4       	brcc	.+2      	; 0x2e9e <KPD_u8GetPressedKye+0x166>
    2e9c:	8a cf       	rjmp	.-236    	; 0x2db2 <KPD_u8GetPressedKye+0x7a>
				return Local_u8PressedKey;
			}
		}
		DIO_SetPinValue(KPD_PORT,Local_u8CoulmnArr[Local_u8ColumnIndex],DIO_HIGH);
	}
	return Local_u8PressedKey;
    2e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea0:	8c 8f       	std	Y+28, r24	; 0x1c
    2ea2:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    2ea4:	a1 96       	adiw	r28, 0x21	; 33
    2ea6:	0f b6       	in	r0, 0x3f	; 63
    2ea8:	f8 94       	cli
    2eaa:	de bf       	out	0x3e, r29	; 62
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	cd bf       	out	0x3d, r28	; 61
    2eb0:	cf 91       	pop	r28
    2eb2:	df 91       	pop	r29
    2eb4:	08 95       	ret

00002eb6 <main>:
#include "../HAL/Steper/STEPER_INTERFACE.h"
#include <avr/delay.h>


int main(void)
{
    2eb6:	df 93       	push	r29
    2eb8:	cf 93       	push	r28
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
    2ebe:	28 97       	sbiw	r28, 0x08	; 8
    2ec0:	0f b6       	in	r0, 0x3f	; 63
    2ec2:	f8 94       	cli
    2ec4:	de bf       	out	0x3e, r29	; 62
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	cd bf       	out	0x3d, r28	; 61
			0b00100,
			0b00100,
			0b01010,
			0b10001,
			0b10001,
	};
    2eca:	88 e0       	ldi	r24, 0x08	; 8
    2ecc:	fe 01       	movw	r30, r28
    2ece:	31 96       	adiw	r30, 0x01	; 1
    2ed0:	df 01       	movw	r26, r30
    2ed2:	98 2f       	mov	r25, r24
    2ed4:	1d 92       	st	X+, r1
    2ed6:	9a 95       	dec	r25
    2ed8:	e9 f7       	brne	.-6      	; 0x2ed4 <main+0x1e>
    2eda:	84 e0       	ldi	r24, 0x04	; 4
    2edc:	8a 83       	std	Y+2, r24	; 0x02
    2ede:	84 e0       	ldi	r24, 0x04	; 4
    2ee0:	8b 83       	std	Y+3, r24	; 0x03
    2ee2:	84 e0       	ldi	r24, 0x04	; 4
    2ee4:	8c 83       	std	Y+4, r24	; 0x04
    2ee6:	8a e0       	ldi	r24, 0x0A	; 10
    2ee8:	8d 83       	std	Y+5, r24	; 0x05
    2eea:	81 e1       	ldi	r24, 0x11	; 17
    2eec:	8e 83       	std	Y+6, r24	; 0x06
    2eee:	81 e1       	ldi	r24, 0x11	; 17
    2ef0:	8f 83       	std	Y+7, r24	; 0x07


	LCD_Init();
    2ef2:	0e 94 45 11 	call	0x228a	; 0x228a <LCD_Init>
	LCD_voidDisplaySpecialChar(arr,0x02,0,0);
    2ef6:	ce 01       	movw	r24, r28
    2ef8:	01 96       	adiw	r24, 0x01	; 1
    2efa:	62 e0       	ldi	r22, 0x02	; 2
    2efc:	40 e0       	ldi	r20, 0x00	; 0
    2efe:	20 e0       	ldi	r18, 0x00	; 0
    2f00:	0e 94 21 16 	call	0x2c42	; 0x2c42 <LCD_voidDisplaySpecialChar>
    2f04:	ff cf       	rjmp	.-2      	; 0x2f04 <main+0x4e>

00002f06 <__udivmodsi4>:
    2f06:	a1 e2       	ldi	r26, 0x21	; 33
    2f08:	1a 2e       	mov	r1, r26
    2f0a:	aa 1b       	sub	r26, r26
    2f0c:	bb 1b       	sub	r27, r27
    2f0e:	fd 01       	movw	r30, r26
    2f10:	0d c0       	rjmp	.+26     	; 0x2f2c <__udivmodsi4_ep>

00002f12 <__udivmodsi4_loop>:
    2f12:	aa 1f       	adc	r26, r26
    2f14:	bb 1f       	adc	r27, r27
    2f16:	ee 1f       	adc	r30, r30
    2f18:	ff 1f       	adc	r31, r31
    2f1a:	a2 17       	cp	r26, r18
    2f1c:	b3 07       	cpc	r27, r19
    2f1e:	e4 07       	cpc	r30, r20
    2f20:	f5 07       	cpc	r31, r21
    2f22:	20 f0       	brcs	.+8      	; 0x2f2c <__udivmodsi4_ep>
    2f24:	a2 1b       	sub	r26, r18
    2f26:	b3 0b       	sbc	r27, r19
    2f28:	e4 0b       	sbc	r30, r20
    2f2a:	f5 0b       	sbc	r31, r21

00002f2c <__udivmodsi4_ep>:
    2f2c:	66 1f       	adc	r22, r22
    2f2e:	77 1f       	adc	r23, r23
    2f30:	88 1f       	adc	r24, r24
    2f32:	99 1f       	adc	r25, r25
    2f34:	1a 94       	dec	r1
    2f36:	69 f7       	brne	.-38     	; 0x2f12 <__udivmodsi4_loop>
    2f38:	60 95       	com	r22
    2f3a:	70 95       	com	r23
    2f3c:	80 95       	com	r24
    2f3e:	90 95       	com	r25
    2f40:	9b 01       	movw	r18, r22
    2f42:	ac 01       	movw	r20, r24
    2f44:	bd 01       	movw	r22, r26
    2f46:	cf 01       	movw	r24, r30
    2f48:	08 95       	ret

00002f4a <__prologue_saves__>:
    2f4a:	2f 92       	push	r2
    2f4c:	3f 92       	push	r3
    2f4e:	4f 92       	push	r4
    2f50:	5f 92       	push	r5
    2f52:	6f 92       	push	r6
    2f54:	7f 92       	push	r7
    2f56:	8f 92       	push	r8
    2f58:	9f 92       	push	r9
    2f5a:	af 92       	push	r10
    2f5c:	bf 92       	push	r11
    2f5e:	cf 92       	push	r12
    2f60:	df 92       	push	r13
    2f62:	ef 92       	push	r14
    2f64:	ff 92       	push	r15
    2f66:	0f 93       	push	r16
    2f68:	1f 93       	push	r17
    2f6a:	cf 93       	push	r28
    2f6c:	df 93       	push	r29
    2f6e:	cd b7       	in	r28, 0x3d	; 61
    2f70:	de b7       	in	r29, 0x3e	; 62
    2f72:	ca 1b       	sub	r28, r26
    2f74:	db 0b       	sbc	r29, r27
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	cd bf       	out	0x3d, r28	; 61
    2f80:	09 94       	ijmp

00002f82 <__epilogue_restores__>:
    2f82:	2a 88       	ldd	r2, Y+18	; 0x12
    2f84:	39 88       	ldd	r3, Y+17	; 0x11
    2f86:	48 88       	ldd	r4, Y+16	; 0x10
    2f88:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f90:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f92:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f94:	b9 84       	ldd	r11, Y+9	; 0x09
    2f96:	c8 84       	ldd	r12, Y+8	; 0x08
    2f98:	df 80       	ldd	r13, Y+7	; 0x07
    2f9a:	ee 80       	ldd	r14, Y+6	; 0x06
    2f9c:	fd 80       	ldd	r15, Y+5	; 0x05
    2f9e:	0c 81       	ldd	r16, Y+4	; 0x04
    2fa0:	1b 81       	ldd	r17, Y+3	; 0x03
    2fa2:	aa 81       	ldd	r26, Y+2	; 0x02
    2fa4:	b9 81       	ldd	r27, Y+1	; 0x01
    2fa6:	ce 0f       	add	r28, r30
    2fa8:	d1 1d       	adc	r29, r1
    2faa:	0f b6       	in	r0, 0x3f	; 63
    2fac:	f8 94       	cli
    2fae:	de bf       	out	0x3e, r29	; 62
    2fb0:	0f be       	out	0x3f, r0	; 63
    2fb2:	cd bf       	out	0x3d, r28	; 61
    2fb4:	ed 01       	movw	r28, r26
    2fb6:	08 95       	ret

00002fb8 <_exit>:
    2fb8:	f8 94       	cli

00002fba <__stop_program>:
    2fba:	ff cf       	rjmp	.-2      	; 0x2fba <__stop_program>
