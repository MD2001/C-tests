
Final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001f0  00800060  00002dd2  00002e66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003e  00800250  00800250  00003056  2**0
                  ALLOC
  3 .stab         000031f8  00000000  00000000  00003058  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016f6  00000000  00000000  00006250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00007946  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  00007ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  00007c97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  00009ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000ae08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000be0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000bfac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000c26a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cb78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__vector_5>
      18:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ed       	ldi	r30, 0xD2	; 210
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 35       	cpi	r26, 0x50	; 80
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e5       	ldi	r26, 0x50	; 80
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 af 13 	call	0x275e	; 0x275e <main>
      8a:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e2       	ldi	r26, 0x2F	; 47
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e2       	ldi	r24, 0x2F	; 47
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e9 5c       	subi	r30, 0xC9	; 201
     93c:	fe 4f       	sbci	r31, 0xFE	; 254
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <USART_voidInit>:
#include "USART_INTERFACE.h"
#include "USART_RIGSTER.h"
#include "USART_PRIVET.h"

void USART_voidInit(void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	/*set BUAD rate*/
	CLR_BIT(UCSRA,UCSRA_U2X);
     caa:	ab e2       	ldi	r26, 0x2B	; 43
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	eb e2       	ldi	r30, 0x2B	; 43
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	8d 7f       	andi	r24, 0xFD	; 253
     cb6:	8c 93       	st	X, r24
	UBRRL=51;
     cb8:	e9 e2       	ldi	r30, 0x29	; 41
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	83 e3       	ldi	r24, 0x33	; 51
     cbe:	80 83       	st	Z, r24

	u8 Local_u8Value=0;
     cc0:	19 82       	std	Y+1, r1	; 0x01
	/*Using UCSRC register*/
	SET_BIT(Local_u8Value,UCSRC_URSEL);
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	80 68       	ori	r24, 0x80	; 128
     cc6:	89 83       	std	Y+1, r24	; 0x01

	//*Asynchronous*/
	CLR_BIT(Local_u8Value,UCSRC_UMSEL);
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	8f 7b       	andi	r24, 0xBF	; 191
     ccc:	89 83       	std	Y+1, r24	; 0x01
	/*no parity*/
	CLR_BIT(Local_u8Value,UCSRC_UPM1);
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	8f 7d       	andi	r24, 0xDF	; 223
     cd2:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8Value,UCSRC_UPM0);
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	8f 7e       	andi	r24, 0xEF	; 239
     cd8:	89 83       	std	Y+1, r24	; 0x01


	/**one stop bit*/
	CLR_BIT(Local_u8Value,UCSRC_USBS);
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	87 7f       	andi	r24, 0xF7	; 247
     cde:	89 83       	std	Y+1, r24	; 0x01

	/*on char size 8-bit mode*/
	SET_BIT(Local_u8Value,UCSRC_UCSZ1);
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	84 60       	ori	r24, 0x04	; 4
     ce4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8Value,UCSRC_UCSZ0);
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	82 60       	ori	r24, 0x02	; 2
     cea:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
     cec:	aa e2       	ldi	r26, 0x2A	; 42
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	ea e2       	ldi	r30, 0x2A	; 42
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8b 7f       	andi	r24, 0xFB	; 251
     cf8:	8c 93       	st	X, r24

	UCSRC=Local_u8Value;
     cfa:	e0 e4       	ldi	r30, 0x40	; 64
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	80 83       	st	Z, r24

	SET_BIT(UCSRB,UCSRB_TXEN);    //transmitter enable
     d02:	aa e2       	ldi	r26, 0x2A	; 42
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	ea e2       	ldi	r30, 0x2A	; 42
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	88 60       	ori	r24, 0x08	; 8
     d0e:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_RXEN);    //receiver   enable
     d10:	aa e2       	ldi	r26, 0x2A	; 42
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	ea e2       	ldi	r30, 0x2A	; 42
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	80 61       	ori	r24, 0x10	; 16
     d1c:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,UCSRB_RXCIE);	//Disable interupt
     d1e:	aa e2       	ldi	r26, 0x2A	; 42
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	ea e2       	ldi	r30, 0x2A	; 42
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	8f 77       	andi	r24, 0x7F	; 127
     d2a:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,UCSRB_TXCIE);
     d2c:	aa e2       	ldi	r26, 0x2A	; 42
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	ea e2       	ldi	r30, 0x2A	; 42
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	8f 7b       	andi	r24, 0xBF	; 191
     d38:	8c 93       	st	X, r24
}
     d3a:	0f 90       	pop	r0
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <USART_u8Read>:



u8 USART_u8Read()
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,UCSRA_RXC)==0);
     d4a:	eb e2       	ldi	r30, 0x2B	; 43
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	88 23       	and	r24, r24
     d52:	dc f7       	brge	.-10     	; 0xd4a <USART_u8Read+0x8>
	return UDR;
     d54:	ec e2       	ldi	r30, 0x2C	; 44
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
}
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <USART_voidSend>:

void USART_voidSend(u8 Copy_data)
{
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	0f 92       	push	r0
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UCSRA_UDRE)==0);
     d6c:	eb e2       	ldi	r30, 0x2B	; 43
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	82 95       	swap	r24
     d74:	86 95       	lsr	r24
     d76:	87 70       	andi	r24, 0x07	; 7
     d78:	88 2f       	mov	r24, r24
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	81 70       	andi	r24, 0x01	; 1
     d7e:	90 70       	andi	r25, 0x00	; 0
     d80:	00 97       	sbiw	r24, 0x00	; 0
     d82:	a1 f3       	breq	.-24     	; 0xd6c <USART_voidSend+0xc>
	UDR=Copy_data;
     d84:	ec e2       	ldi	r30, 0x2C	; 44
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	80 83       	st	Z, r24

}
     d8c:	0f 90       	pop	r0
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	08 95       	ret

00000d94 <USART_SendString>:

void USART_SendString(u8* Copy_data)
{
     d94:	df 93       	push	r29
     d96:	cf 93       	push	r28
     d98:	00 d0       	rcall	.+0      	; 0xd9a <USART_SendString+0x6>
     d9a:	0f 92       	push	r0
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	9b 83       	std	Y+3, r25	; 0x03
     da2:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
     da4:	19 82       	std	Y+1, r1	; 0x01
     da6:	0e c0       	rjmp	.+28     	; 0xdc4 <USART_SendString+0x30>
	while(Copy_data[i]!='\0')
	{
		USART_voidSend(Copy_data[i]);
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	9b 81       	ldd	r25, Y+3	; 0x03
     db2:	fc 01       	movw	r30, r24
     db4:	e2 0f       	add	r30, r18
     db6:	f3 1f       	adc	r31, r19
     db8:	80 81       	ld	r24, Z
     dba:	0e 94 b0 06 	call	0xd60	; 0xd60 <USART_voidSend>
		i++;
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	8f 5f       	subi	r24, 0xFF	; 255
     dc2:	89 83       	std	Y+1, r24	; 0x01
}

void USART_SendString(u8* Copy_data)
{
	u8 i=0;
	while(Copy_data[i]!='\0')
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	9b 81       	ldd	r25, Y+3	; 0x03
     dce:	fc 01       	movw	r30, r24
     dd0:	e2 0f       	add	r30, r18
     dd2:	f3 1f       	adc	r31, r19
     dd4:	80 81       	ld	r24, Z
     dd6:	88 23       	and	r24, r24
     dd8:	39 f7       	brne	.-50     	; 0xda8 <USART_SendString+0x14>
	{
		USART_voidSend(Copy_data[i]);
		i++;
	}
}
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	cf 91       	pop	r28
     de2:	df 91       	pop	r29
     de4:	08 95       	ret

00000de6 <USART_ReciveString>:

u8* USART_ReciveString()
{
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	00 d0       	rcall	.+0      	; 0xdec <USART_ReciveString+0x6>
     dec:	00 d0       	rcall	.+0      	; 0xdee <USART_ReciveString+0x8>
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
	static u8 string[50]={0};
	for(u8 i=0;i<50;i++){string[i]=0;}			//reset the arr
     df2:	19 82       	std	Y+1, r1	; 0x01
     df4:	0a c0       	rjmp	.+20     	; 0xe0a <USART_ReciveString+0x24>
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	88 2f       	mov	r24, r24
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	fc 01       	movw	r30, r24
     dfe:	e0 5b       	subi	r30, 0xB0	; 176
     e00:	fd 4f       	sbci	r31, 0xFD	; 253
     e02:	10 82       	st	Z, r1
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	8f 5f       	subi	r24, 0xFF	; 255
     e08:	89 83       	std	Y+1, r24	; 0x01
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	82 33       	cpi	r24, 0x32	; 50
     e0e:	98 f3       	brcs	.-26     	; 0xdf6 <USART_ReciveString+0x10>

	u8 flag=0,i=0;										//counter
     e10:	1c 82       	std	Y+4, r1	; 0x04
     e12:	1b 82       	std	Y+3, r1	; 0x03
	u8 x=USART_u8Read();					//to chick if Enter is get first
     e14:	0e 94 a1 06 	call	0xd42	; 0xd42 <USART_u8Read>
     e18:	8a 83       	std	Y+2, r24	; 0x02
     e1a:	2a c0       	rjmp	.+84     	; 0xe70 <USART_ReciveString+0x8a>
	while(x !=0x0D)								//Enter hex represintaion
	{
		string[i]=x;
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	88 2f       	mov	r24, r24
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	fc 01       	movw	r30, r24
     e24:	e0 5b       	subi	r30, 0xB0	; 176
     e26:	fd 4f       	sbci	r31, 0xFD	; 253
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	80 83       	st	Z, r24
		x=USART_u8Read();
     e2c:	0e 94 a1 06 	call	0xd42	; 0xd42 <USART_u8Read>
     e30:	8a 83       	std	Y+2, r24	; 0x02
		i++;
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	8f 5f       	subi	r24, 0xFF	; 255
     e36:	8b 83       	std	Y+3, r24	; 0x03

		if(x==0x08)							//delete hex represintaion
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	88 30       	cpi	r24, 0x08	; 8
     e3c:	91 f4       	brne	.+36     	; 0xe62 <USART_ReciveString+0x7c>
		{
			i-=2;
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	82 50       	subi	r24, 0x02	; 2
     e42:	8b 83       	std	Y+3, r24	; 0x03
			x=USART_u8Read();
     e44:	0e 94 a1 06 	call	0xd42	; 0xd42 <USART_u8Read>
     e48:	8a 83       	std	Y+2, r24	; 0x02
     e4a:	08 c0       	rjmp	.+16     	; 0xe5c <USART_ReciveString+0x76>
			while(x==0x08)
			{
				i--;
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	81 50       	subi	r24, 0x01	; 1
     e50:	8b 83       	std	Y+3, r24	; 0x03
				x=USART_u8Read();
     e52:	0e 94 a1 06 	call	0xd42	; 0xd42 <USART_u8Read>
     e56:	8a 83       	std	Y+2, r24	; 0x02
				flag=1;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	8c 83       	std	Y+4, r24	; 0x04

		if(x==0x08)							//delete hex represintaion
		{
			i-=2;
			x=USART_u8Read();
			while(x==0x08)
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	88 30       	cpi	r24, 0x08	; 8
     e60:	a9 f3       	breq	.-22     	; 0xe4c <USART_ReciveString+0x66>
				x=USART_u8Read();
				flag=1;
			}

		}
		if(flag==1){i++;flag=0;}
     e62:	8c 81       	ldd	r24, Y+4	; 0x04
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	21 f4       	brne	.+8      	; 0xe70 <USART_ReciveString+0x8a>
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	8f 5f       	subi	r24, 0xFF	; 255
     e6c:	8b 83       	std	Y+3, r24	; 0x03
     e6e:	1c 82       	std	Y+4, r1	; 0x04
	static u8 string[50]={0};
	for(u8 i=0;i<50;i++){string[i]=0;}			//reset the arr

	u8 flag=0,i=0;										//counter
	u8 x=USART_u8Read();					//to chick if Enter is get first
	while(x !=0x0D)								//Enter hex represintaion
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	8d 30       	cpi	r24, 0x0D	; 13
     e74:	99 f6       	brne	.-90     	; 0xe1c <USART_ReciveString+0x36>
     e76:	0a c0       	rjmp	.+20     	; 0xe8c <USART_ReciveString+0xa6>

		}
		if(flag==1){i++;flag=0;}
	}

	for(;i<50;i++){string[i]=0;}
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	88 2f       	mov	r24, r24
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	fc 01       	movw	r30, r24
     e80:	e0 5b       	subi	r30, 0xB0	; 176
     e82:	fd 4f       	sbci	r31, 0xFD	; 253
     e84:	10 82       	st	Z, r1
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	8f 5f       	subi	r24, 0xFF	; 255
     e8a:	8b 83       	std	Y+3, r24	; 0x03
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	82 33       	cpi	r24, 0x32	; 50
     e90:	98 f3       	brcs	.-26     	; 0xe78 <USART_ReciveString+0x92>
	return string;
     e92:	80 e5       	ldi	r24, 0x50	; 80
     e94:	92 e0       	ldi	r25, 0x02	; 2
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <time_for_1ms>:
static u16 ms=0;



static void time_for_1ms()
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
	static u8 counter=0;
	counter++;
     eac:	80 91 8a 02 	lds	r24, 0x028A
     eb0:	8f 5f       	subi	r24, 0xFF	; 255
     eb2:	80 93 8a 02 	sts	0x028A, r24
	if(counter == 4)
     eb6:	80 91 8a 02 	lds	r24, 0x028A
     eba:	84 30       	cpi	r24, 0x04	; 4
     ebc:	79 f4       	brne	.+30     	; 0xedc <time_for_1ms+0x38>
	{
		counter=0;
     ebe:	10 92 8a 02 	sts	0x028A, r1
		ms++;
     ec2:	80 91 88 02 	lds	r24, 0x0288
     ec6:	90 91 89 02 	lds	r25, 0x0289
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	90 93 89 02 	sts	0x0289, r25
     ed0:	80 93 88 02 	sts	0x0288, r24
		TCNT0=20;
     ed4:	e2 e5       	ldi	r30, 0x52	; 82
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	84 e1       	ldi	r24, 0x14	; 20
     eda:	80 83       	st	Z, r24
	}
}
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <Timer_init>:

void Timer_init()
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,TCCR0_WGM00);
#elif Mode == CTC
	SET_BIT(TCCR0,TCCR0_WGM01);
	CLR_BIT(TCCR0,TCCR0_WGM00);
#elif Mode == Fast_PWM
	SET_BIT(TCCR0,TCCR0_WGM01);
     eea:	a3 e5       	ldi	r26, 0x53	; 83
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e3 e5       	ldi	r30, 0x53	; 83
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	88 60       	ori	r24, 0x08	; 8
     ef6:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM00);
     ef8:	a3 e5       	ldi	r26, 0x53	; 83
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e3 e5       	ldi	r30, 0x53	; 83
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	80 64       	ori	r24, 0x40	; 64
     f04:	8c 93       	st	X, r24
	TIMER0_FastPwmMode(NonInvertingMode);
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	0e 94 a9 07 	call	0xf52	; 0xf52 <TIMER0_FastPwmMode>
#elif CLOCK == presquler_8
	CLR_BIT(TCCR0,TCCR0_CS02);
	SET_BIT(TCCR0,TCCR0_CS01);
	CLR_BIT(TCCR0,TCCR0_CS00);
#elif CLOCK == presquler_64
	CLR_BIT(TCCR0,TCCR0_CS02);
     f0c:	a3 e5       	ldi	r26, 0x53	; 83
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e3 e5       	ldi	r30, 0x53	; 83
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	8b 7f       	andi	r24, 0xFB	; 251
     f18:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
     f1a:	a3 e5       	ldi	r26, 0x53	; 83
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e3 e5       	ldi	r30, 0x53	; 83
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	82 60       	ori	r24, 0x02	; 2
     f26:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS00);
     f28:	a3 e5       	ldi	r26, 0x53	; 83
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e3 e5       	ldi	r30, 0x53	; 83
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	81 60       	ori	r24, 0x01	; 1
     f34:	8c 93       	st	X, r24


#endif

	/*Output compara mach interuput enable*/
	SET_BIT(TIMSK,TIMSK_OCIE0);
     f36:	a9 e5       	ldi	r26, 0x59	; 89
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e9 e5       	ldi	r30, 0x59	; 89
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	82 60       	ori	r24, 0x02	; 2
     f42:	8c 93       	st	X, r24


	/*Set compare mach value*/
	OCR0=75;
     f44:	ec e5       	ldi	r30, 0x5C	; 92
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	8b e4       	ldi	r24, 0x4B	; 75
     f4a:	80 83       	st	Z, r24
}
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <TIMER0_FastPwmMode>:

void TIMER0_FastPwmMode(u8 FAST_PWM_MODE)
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	0f 92       	push	r0
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	89 83       	std	Y+1, r24	; 0x01
	if(FAST_PWM_MODE ==NonInvertingMode)
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	79 f4       	brne	.+30     	; 0xf82 <TIMER0_FastPwmMode+0x30>
	{
		SET_BIT(TCCR0,TCCR0_COM01);
     f64:	a3 e5       	ldi	r26, 0x53	; 83
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e3 e5       	ldi	r30, 0x53	; 83
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	80 62       	ori	r24, 0x20	; 32
     f70:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_COM00);
     f72:	a3 e5       	ldi	r26, 0x53	; 83
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e3 e5       	ldi	r30, 0x53	; 83
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	8f 7e       	andi	r24, 0xEF	; 239
     f7e:	8c 93       	st	X, r24
     f80:	11 c0       	rjmp	.+34     	; 0xfa4 <TIMER0_FastPwmMode+0x52>
	}
	else if(FAST_PWM_MODE ==InvertingMode)
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	82 30       	cpi	r24, 0x02	; 2
     f86:	71 f4       	brne	.+28     	; 0xfa4 <TIMER0_FastPwmMode+0x52>
	{
		SET_BIT(TCCR0,TCCR0_COM01);
     f88:	a3 e5       	ldi	r26, 0x53	; 83
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e3 e5       	ldi	r30, 0x53	; 83
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	80 62       	ori	r24, 0x20	; 32
     f94:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM00);
     f96:	a3 e5       	ldi	r26, 0x53	; 83
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e3 e5       	ldi	r30, 0x53	; 83
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	80 61       	ori	r24, 0x10	; 16
     fa2:	8c 93       	st	X, r24
	}
}
     fa4:	0f 90       	pop	r0
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <TIMER_OC0State>:

void TIMER_OC0State()
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
#if OC0State ==  disconnected
	CLR_BIT(TCCR0,TCCR0_COM01);
	CLR_BIT(TCCR0,TCCR0_COM00);
#elif OC0State == Toggle
	CLR_BIT(TCCR0,TCCR0_COM01);
     fb4:	a3 e5       	ldi	r26, 0x53	; 83
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e3 e5       	ldi	r30, 0x53	; 83
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	8f 7d       	andi	r24, 0xDF	; 223
     fc0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_COM00);
     fc2:	a3 e5       	ldi	r26, 0x53	; 83
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e3 e5       	ldi	r30, 0x53	; 83
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	80 61       	ori	r24, 0x10	; 16
     fce:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_COM01);
	SET_BIT(TCCR0,TCCR0_COM00);
#else
#error "Warning :OC0State is not correct "
#endif
}
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <TIMER_SetOCR0TO>:
void TIMER_SetOCR0TO(u8 num)
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	89 83       	std	Y+1, r24	; 0x01
	OCR0=num;
     fe2:	ec e5       	ldi	r30, 0x5C	; 92
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	80 83       	st	Z, r24
}
     fea:	0f 90       	pop	r0
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <TIMER_SetTCNT0TO>:
void TIMER_SetTCNT0TO(u8 num)
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	0f 92       	push	r0
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=num;
     ffe:	e2 e5       	ldi	r30, 0x52	; 82
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	80 83       	st	Z, r24
}
    1006:	0f 90       	pop	r0
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <TIMER_delay_ms>:

void TIMER_delay_ms(u16 time_ms)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	00 d0       	rcall	.+0      	; 0x1014 <TIMER_delay_ms+0x6>
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	9a 83       	std	Y+2, r25	; 0x02
    101a:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(TCCR0,TCCR0_CS01);
		CLR_BIT(TCCR0,TCCR0_CS00);

	 * **/

	GIE_voidEnable();
    101c:	0e 94 2d 0a 	call	0x145a	; 0x145a <GIE_voidEnable>
	/*To Enable Interubt*/
	TCCR0 |=0b00000010;
    1020:	a3 e5       	ldi	r26, 0x53	; 83
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e3 e5       	ldi	r30, 0x53	; 83
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	82 60       	ori	r24, 0x02	; 2
    102c:	8c 93       	st	X, r24
	TCNT0=20;
    102e:	e2 e5       	ldi	r30, 0x52	; 82
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	84 e1       	ldi	r24, 0x14	; 20
    1034:	80 83       	st	Z, r24
	TIMER_SetCallBack(&time_for_1ms);
    1036:	82 e5       	ldi	r24, 0x52	; 82
    1038:	97 e0       	ldi	r25, 0x07	; 7
    103a:	0e 94 38 08 	call	0x1070	; 0x1070 <TIMER_SetCallBack>

	/*Enable overflow interupt*/
	SET_BIT(TIMSK,TIMSK_TOIE0);
    103e:	a9 e5       	ldi	r26, 0x59	; 89
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e9 e5       	ldi	r30, 0x59	; 89
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	81 60       	ori	r24, 0x01	; 1
    104a:	8c 93       	st	X, r24

	while(ms != time_ms)
    104c:	20 91 88 02 	lds	r18, 0x0288
    1050:	30 91 89 02 	lds	r19, 0x0289
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	9a 81       	ldd	r25, Y+2	; 0x02
    1058:	28 17       	cp	r18, r24
    105a:	39 07       	cpc	r19, r25
    105c:	b9 f7       	brne	.-18     	; 0x104c <TIMER_delay_ms+0x3e>
	{}
	ms =0;
    105e:	10 92 89 02 	sts	0x0289, r1
    1062:	10 92 88 02 	sts	0x0288, r1
}
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <TIMER_SetCallBack>:




u8 TIMER_SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <TIMER_SetCallBack+0x6>
    1076:	0f 92       	push	r0
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	9b 83       	std	Y+3, r25	; 0x03
    107e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStauts=OK;
    1080:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc != NULL)
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	9b 81       	ldd	r25, Y+3	; 0x03
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	31 f0       	breq	.+12     	; 0x1096 <TIMER_SetCallBack+0x26>
	{
		TIMER0_pvCallBackFunc=Copy_pvCallBackFunc;
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	9b 81       	ldd	r25, Y+3	; 0x03
    108e:	90 93 83 02 	sts	0x0283, r25
    1092:	80 93 82 02 	sts	0x0282, r24
	}
	else
	{

	}
	return Local_u8ErrorStauts;
    1096:	89 81       	ldd	r24, Y+1	; 0x01
}
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <ICU_Init>:



void ICU_Init()
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62

	///**Set to rising eddge*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    10ac:	ae e4       	ldi	r26, 0x4E	; 78
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	ee e4       	ldi	r30, 0x4E	; 78
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	80 64       	ori	r24, 0x40	; 64
    10b8:	8c 93       	st	X, r24
	/*Enable interupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    10ba:	a9 e5       	ldi	r26, 0x59	; 89
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e9 e5       	ldi	r30, 0x59	; 89
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	80 62       	ori	r24, 0x20	; 32
    10c6:	8c 93       	st	X, r24


}
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <ICU_SetEdge>:

void ICU_SetEdge(u8 Edge)
{
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	0f 92       	push	r0
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	89 83       	std	Y+1, r24	; 0x01
	if(Edge==ICU_RISING_EDGE)
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	41 f4       	brne	.+16     	; 0x10f0 <ICU_SetEdge+0x22>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    10e0:	ae e4       	ldi	r26, 0x4E	; 78
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	ee e4       	ldi	r30, 0x4E	; 78
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	80 64       	ori	r24, 0x40	; 64
    10ec:	8c 93       	st	X, r24
    10ee:	0a c0       	rjmp	.+20     	; 0x1104 <ICU_SetEdge+0x36>
	}
	else if(Edge==ICU_FALLING_EDGE)
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	82 30       	cpi	r24, 0x02	; 2
    10f4:	39 f4       	brne	.+14     	; 0x1104 <ICU_SetEdge+0x36>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    10f6:	ae e4       	ldi	r26, 0x4E	; 78
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	ee e4       	ldi	r30, 0x4E	; 78
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	8f 7b       	andi	r24, 0xBF	; 191
    1102:	8c 93       	st	X, r24
	}

}
    1104:	0f 90       	pop	r0
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <ICU_EnableIntrupt>:

void ICU_EnableIntrupt()
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1114:	a9 e5       	ldi	r26, 0x59	; 89
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e9 e5       	ldi	r30, 0x59	; 89
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 62       	ori	r24, 0x20	; 32
    1120:	8c 93       	st	X, r24
}
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <ICU_DisableIntrupt>:

void ICU_DisableIntrupt()
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    1130:	a9 e5       	ldi	r26, 0x59	; 89
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e9 e5       	ldi	r30, 0x59	; 89
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	8f 7d       	andi	r24, 0xDF	; 223
    113c:	8c 93       	st	X, r24
}
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <ICU_ReadICU>:

u16 ICU_ReadICU()
{
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    114c:	e6 e4       	ldi	r30, 0x46	; 70
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	91 81       	ldd	r25, Z+1	; 0x01
}
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <ICU_SetCallBack>:

u8 ICU_SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <ICU_SetCallBack+0x6>
    1160:	0f 92       	push	r0
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	9b 83       	std	Y+3, r25	; 0x03
    1168:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ErrorStauts=OK;
    116a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc!=NULL)
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	9b 81       	ldd	r25, Y+3	; 0x03
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	39 f0       	breq	.+14     	; 0x1182 <ICU_SetCallBack+0x28>
	{
		ICU_pvCallBackFunc=Copy_pvCallBackFunc;
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	9b 81       	ldd	r25, Y+3	; 0x03
    1178:	90 93 87 02 	sts	0x0287, r25
    117c:	80 93 86 02 	sts	0x0286, r24
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <ICU_SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStauts=NOT_OK;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStauts;
    1186:	89 81       	ldd	r24, Y+1	; 0x01

}
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <__vector_11>:

void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
    1194:	1f 92       	push	r1
    1196:	0f 92       	push	r0
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	0f 92       	push	r0
    119c:	11 24       	eor	r1, r1
    119e:	2f 93       	push	r18
    11a0:	3f 93       	push	r19
    11a2:	4f 93       	push	r20
    11a4:	5f 93       	push	r21
    11a6:	6f 93       	push	r22
    11a8:	7f 93       	push	r23
    11aa:	8f 93       	push	r24
    11ac:	9f 93       	push	r25
    11ae:	af 93       	push	r26
    11b0:	bf 93       	push	r27
    11b2:	ef 93       	push	r30
    11b4:	ff 93       	push	r31
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL)
    11be:	80 91 82 02 	lds	r24, 0x0282
    11c2:	90 91 83 02 	lds	r25, 0x0283
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	29 f0       	breq	.+10     	; 0x11d4 <__vector_11+0x40>
	{
		TIMER0_pvCallBackFunc();
    11ca:	e0 91 82 02 	lds	r30, 0x0282
    11ce:	f0 91 83 02 	lds	r31, 0x0283
    11d2:	09 95       	icall
	}

}
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	ff 91       	pop	r31
    11da:	ef 91       	pop	r30
    11dc:	bf 91       	pop	r27
    11de:	af 91       	pop	r26
    11e0:	9f 91       	pop	r25
    11e2:	8f 91       	pop	r24
    11e4:	7f 91       	pop	r23
    11e6:	6f 91       	pop	r22
    11e8:	5f 91       	pop	r21
    11ea:	4f 91       	pop	r20
    11ec:	3f 91       	pop	r19
    11ee:	2f 91       	pop	r18
    11f0:	0f 90       	pop	r0
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	0f 90       	pop	r0
    11f6:	1f 90       	pop	r1
    11f8:	18 95       	reti

000011fa <Timer1_init>:
///////////////////////// TIMER1 /////////////////////////////////
void Timer1_init()
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
	/*Fast PWM non-inverting mode*/
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1202:	af e4       	ldi	r26, 0x4F	; 79
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	ef e4       	ldi	r30, 0x4F	; 79
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	80 68       	ori	r24, 0x80	; 128
    120e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1210:	af e4       	ldi	r26, 0x4F	; 79
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	ef e4       	ldi	r30, 0x4F	; 79
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	8f 7b       	andi	r24, 0xBF	; 191
    121c:	8c 93       	st	X, r24

	/*Set to fast PWM mode*/
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    121e:	af e4       	ldi	r26, 0x4F	; 79
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	ef e4       	ldi	r30, 0x4F	; 79
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	8e 7f       	andi	r24, 0xFE	; 254
    122a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    122c:	af e4       	ldi	r26, 0x4F	; 79
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	ef e4       	ldi	r30, 0x4F	; 79
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	82 60       	ori	r24, 0x02	; 2
    1238:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    123a:	ae e4       	ldi	r26, 0x4E	; 78
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	ee e4       	ldi	r30, 0x4E	; 78
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	88 60       	ori	r24, 0x08	; 8
    1246:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    1248:	ae e4       	ldi	r26, 0x4E	; 78
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	ee e4       	ldi	r30, 0x4E	; 78
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	80 61       	ori	r24, 0x10	; 16
    1254:	8c 93       	st	X, r24

	/*Set Clock*/
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    1256:	ae e4       	ldi	r26, 0x4E	; 78
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	ee e4       	ldi	r30, 0x4E	; 78
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	8e 7f       	andi	r24, 0xFE	; 254
    1262:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    1264:	ae e4       	ldi	r26, 0x4E	; 78
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	ee e4       	ldi	r30, 0x4E	; 78
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	8b 7f       	andi	r24, 0xFB	; 251
    1270:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    1272:	ae e4       	ldi	r26, 0x4E	; 78
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	ee e4       	ldi	r30, 0x4E	; 78
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	82 60       	ori	r24, 0x02	; 2
    127e:	8c 93       	st	X, r24

}
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <Timer1_SetICR>:


void Timer1_SetICR(u16 Copy_data)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	00 d0       	rcall	.+0      	; 0x128c <Timer1_SetICR+0x6>
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	9a 83       	std	Y+2, r25	; 0x02
    1292:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_data;
    1294:	e6 e4       	ldi	r30, 0x46	; 70
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	9a 81       	ldd	r25, Y+2	; 0x02
    129c:	91 83       	std	Z+1, r25	; 0x01
    129e:	80 83       	st	Z, r24
	}
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <Timer1_SetChannelACompaermach>:

void Timer1_SetChannelACompaermach(u16 Copy_data)
{
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <Timer1_SetChannelACompaermach+0x6>
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	9a 83       	std	Y+2, r25	; 0x02
    12b6:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_data;
    12b8:	ea e4       	ldi	r30, 0x4A	; 74
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	9a 81       	ldd	r25, Y+2	; 0x02
    12c0:	91 83       	std	Z+1, r25	; 0x01
    12c2:	80 83       	st	Z, r24
}
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <Timer2_init>:
/////////////////////////// TIMER2 ////////////////////////////

void Timer2_init()
{
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
	//set to Normal mode
	CLR_BIT(TCCR2,TCCR2_WGM20);
    12d6:	a5 e4       	ldi	r26, 0x45	; 69
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e5 e4       	ldi	r30, 0x45	; 69
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	8f 7b       	andi	r24, 0xBF	; 191
    12e2:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_WGM21);
    12e4:	a5 e4       	ldi	r26, 0x45	; 69
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e5 e4       	ldi	r30, 0x45	; 69
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	87 7f       	andi	r24, 0xF7	; 247
    12f0:	8c 93       	st	X, r24

	//OC2 is disconnected
	CLR_BIT(TCCR2,TCCR2_COM20);
    12f2:	a5 e4       	ldi	r26, 0x45	; 69
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e5 e4       	ldi	r30, 0x45	; 69
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	8f 7e       	andi	r24, 0xEF	; 239
    12fe:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_COM21);
    1300:	a5 e4       	ldi	r26, 0x45	; 69
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e5 e4       	ldi	r30, 0x45	; 69
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	8f 7d       	andi	r24, 0xDF	; 223
    130c:	8c 93       	st	X, r24

	//set prescaler to 128
	CLR_BIT(TCCR2,TCCR2_CS21);
    130e:	a5 e4       	ldi	r26, 0x45	; 69
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e5 e4       	ldi	r30, 0x45	; 69
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	8d 7f       	andi	r24, 0xFD	; 253
    131a:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_CS20);
    131c:	a5 e4       	ldi	r26, 0x45	; 69
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e5 e4       	ldi	r30, 0x45	; 69
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	81 60       	ori	r24, 0x01	; 1
    1328:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_CS22);
    132a:	a5 e4       	ldi	r26, 0x45	; 69
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e5 e4       	ldi	r30, 0x45	; 69
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	84 60       	ori	r24, 0x04	; 4
    1336:	8c 93       	st	X, r24

	//Emable overflow Interupt
	SET_BIT(TIMSK,TIMSK_TOIE2);
    1338:	a9 e5       	ldi	r26, 0x59	; 89
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e9 e5       	ldi	r30, 0x59	; 89
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	80 64       	ori	r24, 0x40	; 64
    1344:	8c 93       	st	X, r24

	OCR2=255;
    1346:	e3 e4       	ldi	r30, 0x43	; 67
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	8f ef       	ldi	r24, 0xFF	; 255
    134c:	80 83       	st	Z, r24
}
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <TIMER2_SetCallBack>:

u8 TIMER2_SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	00 d0       	rcall	.+0      	; 0x135a <TIMER2_SetCallBack+0x6>
    135a:	0f 92       	push	r0
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	9b 83       	std	Y+3, r25	; 0x03
    1362:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStauts=OK;
    1364:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc != NULL)
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	9b 81       	ldd	r25, Y+3	; 0x03
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	39 f0       	breq	.+14     	; 0x137c <TIMER2_SetCallBack+0x28>
	{
		TIMER2_pvCallBackFunc=Copy_pvCallBackFunc;
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	9b 81       	ldd	r25, Y+3	; 0x03
    1372:	90 93 85 02 	sts	0x0285, r25
    1376:	80 93 84 02 	sts	0x0284, r24
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <TIMER2_SetCallBack+0x2c>

	}
	else
	{
		Local_u8ErrorStauts=NOT_OK;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStauts;
    1380:	89 81       	ldd	r24, Y+1	; 0x01
}
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <__vector_6>:
///////////////////////////////////////////////////////////////

void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    138e:	1f 92       	push	r1
    1390:	0f 92       	push	r0
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	0f 92       	push	r0
    1396:	11 24       	eor	r1, r1
    1398:	2f 93       	push	r18
    139a:	3f 93       	push	r19
    139c:	4f 93       	push	r20
    139e:	5f 93       	push	r21
    13a0:	6f 93       	push	r22
    13a2:	7f 93       	push	r23
    13a4:	8f 93       	push	r24
    13a6:	9f 93       	push	r25
    13a8:	af 93       	push	r26
    13aa:	bf 93       	push	r27
    13ac:	ef 93       	push	r30
    13ae:	ff 93       	push	r31
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
	if(ICU_pvCallBackFunc != NULL)
    13b8:	80 91 86 02 	lds	r24, 0x0286
    13bc:	90 91 87 02 	lds	r25, 0x0287
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	29 f0       	breq	.+10     	; 0x13ce <__vector_6+0x40>
	{
		ICU_pvCallBackFunc();
    13c4:	e0 91 86 02 	lds	r30, 0x0286
    13c8:	f0 91 87 02 	lds	r31, 0x0287
    13cc:	09 95       	icall
	}

}
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	ff 91       	pop	r31
    13d4:	ef 91       	pop	r30
    13d6:	bf 91       	pop	r27
    13d8:	af 91       	pop	r26
    13da:	9f 91       	pop	r25
    13dc:	8f 91       	pop	r24
    13de:	7f 91       	pop	r23
    13e0:	6f 91       	pop	r22
    13e2:	5f 91       	pop	r21
    13e4:	4f 91       	pop	r20
    13e6:	3f 91       	pop	r19
    13e8:	2f 91       	pop	r18
    13ea:	0f 90       	pop	r0
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	0f 90       	pop	r0
    13f0:	1f 90       	pop	r1
    13f2:	18 95       	reti

000013f4 <__vector_5>:

void __vector_5 (void) __attribute__((signal));
void __vector_5 (void)
{
    13f4:	1f 92       	push	r1
    13f6:	0f 92       	push	r0
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	0f 92       	push	r0
    13fc:	11 24       	eor	r1, r1
    13fe:	2f 93       	push	r18
    1400:	3f 93       	push	r19
    1402:	4f 93       	push	r20
    1404:	5f 93       	push	r21
    1406:	6f 93       	push	r22
    1408:	7f 93       	push	r23
    140a:	8f 93       	push	r24
    140c:	9f 93       	push	r25
    140e:	af 93       	push	r26
    1410:	bf 93       	push	r27
    1412:	ef 93       	push	r30
    1414:	ff 93       	push	r31
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_pvCallBackFunc != NULL)
    141e:	80 91 84 02 	lds	r24, 0x0284
    1422:	90 91 85 02 	lds	r25, 0x0285
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	29 f0       	breq	.+10     	; 0x1434 <__vector_5+0x40>
	{
		TIMER2_pvCallBackFunc();
    142a:	e0 91 84 02 	lds	r30, 0x0284
    142e:	f0 91 85 02 	lds	r31, 0x0285
    1432:	09 95       	icall
	}

}
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	ff 91       	pop	r31
    143a:	ef 91       	pop	r30
    143c:	bf 91       	pop	r27
    143e:	af 91       	pop	r26
    1440:	9f 91       	pop	r25
    1442:	8f 91       	pop	r24
    1444:	7f 91       	pop	r23
    1446:	6f 91       	pop	r22
    1448:	5f 91       	pop	r21
    144a:	4f 91       	pop	r20
    144c:	3f 91       	pop	r19
    144e:	2f 91       	pop	r18
    1450:	0f 90       	pop	r0
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	0f 90       	pop	r0
    1456:	1f 90       	pop	r1
    1458:	18 95       	reti

0000145a <GIE_voidEnable>:
#include "GIE_PRIVET.h"



void GIE_voidEnable(void)
{
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1462:	af e5       	ldi	r26, 0x5F	; 95
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	ef e5       	ldi	r30, 0x5F	; 95
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	80 68       	ori	r24, 0x80	; 128
    146e:	8c 93       	st	X, r24
	}
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <GIE_voidDesable>:
void GIE_voidDesable(void)
{
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    147e:	af e5       	ldi	r26, 0x5F	; 95
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	ef e5       	ldi	r30, 0x5F	; 95
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	8f 77       	andi	r24, 0x7F	; 127
    148a:	8c 93       	st	X, r24
	}
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	08 95       	ret

00001492 <DIO_SetPinDirection>:
#include "DIO_INTERFACE.h"



void DIO_SetPinDirection(u8 Port , u8 Pin , u8 Direction)
{
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	00 d0       	rcall	.+0      	; 0x1498 <DIO_SetPinDirection+0x6>
    1498:	00 d0       	rcall	.+0      	; 0x149a <DIO_SetPinDirection+0x8>
    149a:	0f 92       	push	r0
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	89 83       	std	Y+1, r24	; 0x01
    14a2:	6a 83       	std	Y+2, r22	; 0x02
    14a4:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	3d 83       	std	Y+5, r19	; 0x05
    14ae:	2c 83       	std	Y+4, r18	; 0x04
    14b0:	8c 81       	ldd	r24, Y+4	; 0x04
    14b2:	9d 81       	ldd	r25, Y+5	; 0x05
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	91 05       	cpc	r25, r1
    14b8:	09 f4       	brne	.+2      	; 0x14bc <DIO_SetPinDirection+0x2a>
    14ba:	47 c0       	rjmp	.+142    	; 0x154a <DIO_SetPinDirection+0xb8>
    14bc:	2c 81       	ldd	r18, Y+4	; 0x04
    14be:	3d 81       	ldd	r19, Y+5	; 0x05
    14c0:	22 30       	cpi	r18, 0x02	; 2
    14c2:	31 05       	cpc	r19, r1
    14c4:	2c f4       	brge	.+10     	; 0x14d0 <DIO_SetPinDirection+0x3e>
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	71 f0       	breq	.+28     	; 0x14ea <DIO_SetPinDirection+0x58>
    14ce:	cb c0       	rjmp	.+406    	; 0x1666 <DIO_SetPinDirection+0x1d4>
    14d0:	2c 81       	ldd	r18, Y+4	; 0x04
    14d2:	3d 81       	ldd	r19, Y+5	; 0x05
    14d4:	22 30       	cpi	r18, 0x02	; 2
    14d6:	31 05       	cpc	r19, r1
    14d8:	09 f4       	brne	.+2      	; 0x14dc <DIO_SetPinDirection+0x4a>
    14da:	67 c0       	rjmp	.+206    	; 0x15aa <DIO_SetPinDirection+0x118>
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	9d 81       	ldd	r25, Y+5	; 0x05
    14e0:	83 30       	cpi	r24, 0x03	; 3
    14e2:	91 05       	cpc	r25, r1
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <DIO_SetPinDirection+0x56>
    14e6:	91 c0       	rjmp	.+290    	; 0x160a <DIO_SetPinDirection+0x178>
    14e8:	be c0       	rjmp	.+380    	; 0x1666 <DIO_SetPinDirection+0x1d4>
	{
		case DIO_PORTA: 
		if(Direction == DIO_INPUT) 
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	88 23       	and	r24, r24
    14ee:	a9 f4       	brne	.+42     	; 0x151a <DIO_SetPinDirection+0x88>
		{ 
			CLR_BIT(DDRA_REG,Pin);
    14f0:	aa e3       	ldi	r26, 0x3A	; 58
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	ea e3       	ldi	r30, 0x3A	; 58
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	48 2f       	mov	r20, r24
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 2e       	mov	r0, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <DIO_SetPinDirection+0x7c>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	0a 94       	dec	r0
    1510:	e2 f7       	brpl	.-8      	; 0x150a <DIO_SetPinDirection+0x78>
    1512:	80 95       	com	r24
    1514:	84 23       	and	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	a6 c0       	rjmp	.+332    	; 0x1666 <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	09 f0       	breq	.+2      	; 0x1522 <DIO_SetPinDirection+0x90>
    1520:	a2 c0       	rjmp	.+324    	; 0x1666 <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRA_REG,Pin);
    1522:	aa e3       	ldi	r26, 0x3A	; 58
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	ea e3       	ldi	r30, 0x3A	; 58
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 2e       	mov	r0, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <DIO_SetPinDirection+0xae>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <DIO_SetPinDirection+0xaa>
    1544:	84 2b       	or	r24, r20
    1546:	8c 93       	st	X, r24
    1548:	8e c0       	rjmp	.+284    	; 0x1666 <DIO_SetPinDirection+0x1d4>
		}  
		break;
		case DIO_PORTB: 
		if(Direction == DIO_INPUT) 
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	88 23       	and	r24, r24
    154e:	a9 f4       	brne	.+42     	; 0x157a <DIO_SetPinDirection+0xe8>
		{ 
			CLR_BIT(DDRB_REG,Pin);
    1550:	a7 e3       	ldi	r26, 0x37	; 55
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e7 e3       	ldi	r30, 0x37	; 55
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	48 2f       	mov	r20, r24
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	02 2e       	mov	r0, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <DIO_SetPinDirection+0xdc>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	0a 94       	dec	r0
    1570:	e2 f7       	brpl	.-8      	; 0x156a <DIO_SetPinDirection+0xd8>
    1572:	80 95       	com	r24
    1574:	84 23       	and	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	76 c0       	rjmp	.+236    	; 0x1666 <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	09 f0       	breq	.+2      	; 0x1582 <DIO_SetPinDirection+0xf0>
    1580:	72 c0       	rjmp	.+228    	; 0x1666 <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRB_REG,Pin);
    1582:	a7 e3       	ldi	r26, 0x37	; 55
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e7 e3       	ldi	r30, 0x37	; 55
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	48 2f       	mov	r20, r24
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 2e       	mov	r0, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <DIO_SetPinDirection+0x10e>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	0a 94       	dec	r0
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <DIO_SetPinDirection+0x10a>
    15a4:	84 2b       	or	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	5e c0       	rjmp	.+188    	; 0x1666 <DIO_SetPinDirection+0x1d4>
		}  
		break;
		case DIO_PORTC: 
		if(Direction == DIO_INPUT) 
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	88 23       	and	r24, r24
    15ae:	a9 f4       	brne	.+42     	; 0x15da <DIO_SetPinDirection+0x148>
		{ 
			CLR_BIT(DDRC_REG,Pin);
    15b0:	a4 e3       	ldi	r26, 0x34	; 52
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e4 e3       	ldi	r30, 0x34	; 52
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	48 2f       	mov	r20, r24
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	02 2e       	mov	r0, r18
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <DIO_SetPinDirection+0x13c>
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	0a 94       	dec	r0
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <DIO_SetPinDirection+0x138>
    15d2:	80 95       	com	r24
    15d4:	84 23       	and	r24, r20
    15d6:	8c 93       	st	X, r24
    15d8:	46 c0       	rjmp	.+140    	; 0x1666 <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	09 f0       	breq	.+2      	; 0x15e2 <DIO_SetPinDirection+0x150>
    15e0:	42 c0       	rjmp	.+132    	; 0x1666 <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRC_REG,Pin);
    15e2:	a4 e3       	ldi	r26, 0x34	; 52
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e4 e3       	ldi	r30, 0x34	; 52
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <DIO_SetPinDirection+0x16e>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <DIO_SetPinDirection+0x16a>
    1604:	84 2b       	or	r24, r20
    1606:	8c 93       	st	X, r24
    1608:	2e c0       	rjmp	.+92     	; 0x1666 <DIO_SetPinDirection+0x1d4>
		}  
		break;
		case DIO_PORTD: 
		if(Direction == DIO_INPUT) 
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	88 23       	and	r24, r24
    160e:	a9 f4       	brne	.+42     	; 0x163a <DIO_SetPinDirection+0x1a8>
		{ 
			CLR_BIT(DDRD_REG,Pin);
    1610:	a1 e3       	ldi	r26, 0x31	; 49
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e1 e3       	ldi	r30, 0x31	; 49
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 2e       	mov	r0, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_SetPinDirection+0x19c>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	0a 94       	dec	r0
    1630:	e2 f7       	brpl	.-8      	; 0x162a <DIO_SetPinDirection+0x198>
    1632:	80 95       	com	r24
    1634:	84 23       	and	r24, r20
    1636:	8c 93       	st	X, r24
    1638:	16 c0       	rjmp	.+44     	; 0x1666 <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	99 f4       	brne	.+38     	; 0x1666 <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRD_REG,Pin);
    1640:	a1 e3       	ldi	r26, 0x31	; 49
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e1 e3       	ldi	r30, 0x31	; 49
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	48 2f       	mov	r20, r24
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	02 2e       	mov	r0, r18
    1658:	02 c0       	rjmp	.+4      	; 0x165e <DIO_SetPinDirection+0x1cc>
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	0a 94       	dec	r0
    1660:	e2 f7       	brpl	.-8      	; 0x165a <DIO_SetPinDirection+0x1c8>
    1662:	84 2b       	or	r24, r20
    1664:	8c 93       	st	X, r24
		default:
		// " Port or Pin or Direction not valid "
		break;
	}
	
}
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <DIO_SetPinValue>:

void DIO_SetPinValue    (u8 Port , u8 Pin , u8 Value )
{
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	00 d0       	rcall	.+0      	; 0x167c <DIO_SetPinValue+0x6>
    167c:	00 d0       	rcall	.+0      	; 0x167e <DIO_SetPinValue+0x8>
    167e:	0f 92       	push	r0
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	89 83       	std	Y+1, r24	; 0x01
    1686:	6a 83       	std	Y+2, r22	; 0x02
    1688:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	3d 83       	std	Y+5, r19	; 0x05
    1692:	2c 83       	std	Y+4, r18	; 0x04
    1694:	8c 81       	ldd	r24, Y+4	; 0x04
    1696:	9d 81       	ldd	r25, Y+5	; 0x05
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	91 05       	cpc	r25, r1
    169c:	09 f4       	brne	.+2      	; 0x16a0 <DIO_SetPinValue+0x2a>
    169e:	47 c0       	rjmp	.+142    	; 0x172e <DIO_SetPinValue+0xb8>
    16a0:	2c 81       	ldd	r18, Y+4	; 0x04
    16a2:	3d 81       	ldd	r19, Y+5	; 0x05
    16a4:	22 30       	cpi	r18, 0x02	; 2
    16a6:	31 05       	cpc	r19, r1
    16a8:	2c f4       	brge	.+10     	; 0x16b4 <DIO_SetPinValue+0x3e>
    16aa:	8c 81       	ldd	r24, Y+4	; 0x04
    16ac:	9d 81       	ldd	r25, Y+5	; 0x05
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	71 f0       	breq	.+28     	; 0x16ce <DIO_SetPinValue+0x58>
    16b2:	cb c0       	rjmp	.+406    	; 0x184a <DIO_SetPinValue+0x1d4>
    16b4:	2c 81       	ldd	r18, Y+4	; 0x04
    16b6:	3d 81       	ldd	r19, Y+5	; 0x05
    16b8:	22 30       	cpi	r18, 0x02	; 2
    16ba:	31 05       	cpc	r19, r1
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <DIO_SetPinValue+0x4a>
    16be:	67 c0       	rjmp	.+206    	; 0x178e <DIO_SetPinValue+0x118>
    16c0:	8c 81       	ldd	r24, Y+4	; 0x04
    16c2:	9d 81       	ldd	r25, Y+5	; 0x05
    16c4:	83 30       	cpi	r24, 0x03	; 3
    16c6:	91 05       	cpc	r25, r1
    16c8:	09 f4       	brne	.+2      	; 0x16cc <DIO_SetPinValue+0x56>
    16ca:	91 c0       	rjmp	.+290    	; 0x17ee <DIO_SetPinValue+0x178>
    16cc:	be c0       	rjmp	.+380    	; 0x184a <DIO_SetPinValue+0x1d4>
	{
		case DIO_PORTA: 
		if(Value == DIO_HIGH)
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	a1 f4       	brne	.+40     	; 0x16fc <DIO_SetPinValue+0x86>
		{ 
			SET_BIT(PORTA_REG,Pin);
    16d4:	ab e3       	ldi	r26, 0x3B	; 59
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	eb e3       	ldi	r30, 0x3B	; 59
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <DIO_SetPinValue+0x7c>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <DIO_SetPinValue+0x78>
    16f6:	84 2b       	or	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	a7 c0       	rjmp	.+334    	; 0x184a <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	88 23       	and	r24, r24
    1700:	09 f0       	breq	.+2      	; 0x1704 <DIO_SetPinValue+0x8e>
    1702:	a3 c0       	rjmp	.+326    	; 0x184a <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTA_REG,Pin);
    1704:	ab e3       	ldi	r26, 0x3B	; 59
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	eb e3       	ldi	r30, 0x3B	; 59
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	48 2f       	mov	r20, r24
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	02 2e       	mov	r0, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <DIO_SetPinValue+0xac>
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	0a 94       	dec	r0
    1724:	e2 f7       	brpl	.-8      	; 0x171e <DIO_SetPinValue+0xa8>
    1726:	80 95       	com	r24
    1728:	84 23       	and	r24, r20
    172a:	8c 93       	st	X, r24
    172c:	8e c0       	rjmp	.+284    	; 0x184a <DIO_SetPinValue+0x1d4>
		}  
		break;
		case DIO_PORTB: 
		if(Value == DIO_HIGH)
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	a1 f4       	brne	.+40     	; 0x175c <DIO_SetPinValue+0xe6>
		{ 
			SET_BIT(PORTB_REG,Pin);
    1734:	a8 e3       	ldi	r26, 0x38	; 56
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e8 e3       	ldi	r30, 0x38	; 56
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	48 2f       	mov	r20, r24
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	02 2e       	mov	r0, r18
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <DIO_SetPinValue+0xdc>
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	0a 94       	dec	r0
    1754:	e2 f7       	brpl	.-8      	; 0x174e <DIO_SetPinValue+0xd8>
    1756:	84 2b       	or	r24, r20
    1758:	8c 93       	st	X, r24
    175a:	77 c0       	rjmp	.+238    	; 0x184a <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	88 23       	and	r24, r24
    1760:	09 f0       	breq	.+2      	; 0x1764 <DIO_SetPinValue+0xee>
    1762:	73 c0       	rjmp	.+230    	; 0x184a <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTB_REG,Pin);
    1764:	a8 e3       	ldi	r26, 0x38	; 56
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e8 e3       	ldi	r30, 0x38	; 56
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	48 2f       	mov	r20, r24
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	02 2e       	mov	r0, r18
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <DIO_SetPinValue+0x10c>
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	0a 94       	dec	r0
    1784:	e2 f7       	brpl	.-8      	; 0x177e <DIO_SetPinValue+0x108>
    1786:	80 95       	com	r24
    1788:	84 23       	and	r24, r20
    178a:	8c 93       	st	X, r24
    178c:	5e c0       	rjmp	.+188    	; 0x184a <DIO_SetPinValue+0x1d4>
		}  
		break;
		case DIO_PORTC: 
		if(Value == DIO_HIGH)
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	a1 f4       	brne	.+40     	; 0x17bc <DIO_SetPinValue+0x146>
		{ 
			SET_BIT(PORTC_REG,Pin);
    1794:	a5 e3       	ldi	r26, 0x35	; 53
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e5 e3       	ldi	r30, 0x35	; 53
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	48 2f       	mov	r20, r24
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	02 2e       	mov	r0, r18
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <DIO_SetPinValue+0x13c>
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	0a 94       	dec	r0
    17b4:	e2 f7       	brpl	.-8      	; 0x17ae <DIO_SetPinValue+0x138>
    17b6:	84 2b       	or	r24, r20
    17b8:	8c 93       	st	X, r24
    17ba:	47 c0       	rjmp	.+142    	; 0x184a <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	88 23       	and	r24, r24
    17c0:	09 f0       	breq	.+2      	; 0x17c4 <DIO_SetPinValue+0x14e>
    17c2:	43 c0       	rjmp	.+134    	; 0x184a <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTC_REG,Pin);
    17c4:	a5 e3       	ldi	r26, 0x35	; 53
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e5 e3       	ldi	r30, 0x35	; 53
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <DIO_SetPinValue+0x16c>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <DIO_SetPinValue+0x168>
    17e6:	80 95       	com	r24
    17e8:	84 23       	and	r24, r20
    17ea:	8c 93       	st	X, r24
    17ec:	2e c0       	rjmp	.+92     	; 0x184a <DIO_SetPinValue+0x1d4>
		}  
		break;
		case DIO_PORTD: 
		if(Value == DIO_HIGH)
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	81 30       	cpi	r24, 0x01	; 1
    17f2:	a1 f4       	brne	.+40     	; 0x181c <DIO_SetPinValue+0x1a6>
		{ 
			SET_BIT(PORTD_REG,Pin);
    17f4:	a2 e3       	ldi	r26, 0x32	; 50
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e2 e3       	ldi	r30, 0x32	; 50
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	48 2f       	mov	r20, r24
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	02 2e       	mov	r0, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <DIO_SetPinValue+0x19c>
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	0a 94       	dec	r0
    1814:	e2 f7       	brpl	.-8      	; 0x180e <DIO_SetPinValue+0x198>
    1816:	84 2b       	or	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	17 c0       	rjmp	.+46     	; 0x184a <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	88 23       	and	r24, r24
    1820:	a1 f4       	brne	.+40     	; 0x184a <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTD_REG,Pin);
    1822:	a2 e3       	ldi	r26, 0x32	; 50
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e2 e3       	ldi	r30, 0x32	; 50
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	48 2f       	mov	r20, r24
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 2e       	mov	r0, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <DIO_SetPinValue+0x1ca>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	0a 94       	dec	r0
    1842:	e2 f7       	brpl	.-8      	; 0x183c <DIO_SetPinValue+0x1c6>
    1844:	80 95       	com	r24
    1846:	84 23       	and	r24, r20
    1848:	8c 93       	st	X, r24
		default:
		// " Port or Pin or Value not valid "
		break;
	}
	
}
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <DIO_GetPinValue>:

u8   DIO_GetPinValue    (u8 Port , u8 Pin )
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	00 d0       	rcall	.+0      	; 0x1860 <DIO_GetPinValue+0x6>
    1860:	00 d0       	rcall	.+0      	; 0x1862 <DIO_GetPinValue+0x8>
    1862:	0f 92       	push	r0
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	8a 83       	std	Y+2, r24	; 0x02
    186a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Value;
	switch(Port)
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	3d 83       	std	Y+5, r19	; 0x05
    1874:	2c 83       	std	Y+4, r18	; 0x04
    1876:	4c 81       	ldd	r20, Y+4	; 0x04
    1878:	5d 81       	ldd	r21, Y+5	; 0x05
    187a:	41 30       	cpi	r20, 0x01	; 1
    187c:	51 05       	cpc	r21, r1
    187e:	41 f1       	breq	.+80     	; 0x18d0 <DIO_GetPinValue+0x76>
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	9d 81       	ldd	r25, Y+5	; 0x05
    1884:	82 30       	cpi	r24, 0x02	; 2
    1886:	91 05       	cpc	r25, r1
    1888:	34 f4       	brge	.+12     	; 0x1896 <DIO_GetPinValue+0x3c>
    188a:	2c 81       	ldd	r18, Y+4	; 0x04
    188c:	3d 81       	ldd	r19, Y+5	; 0x05
    188e:	21 15       	cp	r18, r1
    1890:	31 05       	cpc	r19, r1
    1892:	61 f0       	breq	.+24     	; 0x18ac <DIO_GetPinValue+0x52>
    1894:	52 c0       	rjmp	.+164    	; 0x193a <DIO_GetPinValue+0xe0>
    1896:	4c 81       	ldd	r20, Y+4	; 0x04
    1898:	5d 81       	ldd	r21, Y+5	; 0x05
    189a:	42 30       	cpi	r20, 0x02	; 2
    189c:	51 05       	cpc	r21, r1
    189e:	51 f1       	breq	.+84     	; 0x18f4 <DIO_GetPinValue+0x9a>
    18a0:	8c 81       	ldd	r24, Y+4	; 0x04
    18a2:	9d 81       	ldd	r25, Y+5	; 0x05
    18a4:	83 30       	cpi	r24, 0x03	; 3
    18a6:	91 05       	cpc	r25, r1
    18a8:	b9 f1       	breq	.+110    	; 0x1918 <DIO_GetPinValue+0xbe>
    18aa:	47 c0       	rjmp	.+142    	; 0x193a <DIO_GetPinValue+0xe0>
	{
		case DIO_PORTA: Value = GET_BIT(PINA_REG,Pin); break;
    18ac:	e9 e3       	ldi	r30, 0x39	; 57
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a9 01       	movw	r20, r18
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <DIO_GetPinValue+0x6a>
    18c0:	55 95       	asr	r21
    18c2:	47 95       	ror	r20
    18c4:	8a 95       	dec	r24
    18c6:	e2 f7       	brpl	.-8      	; 0x18c0 <DIO_GetPinValue+0x66>
    18c8:	ca 01       	movw	r24, r20
    18ca:	81 70       	andi	r24, 0x01	; 1
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	35 c0       	rjmp	.+106    	; 0x193a <DIO_GetPinValue+0xe0>
		case DIO_PORTB: Value = GET_BIT(PINB_REG,Pin); break;
    18d0:	e6 e3       	ldi	r30, 0x36	; 54
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	88 2f       	mov	r24, r24
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	a9 01       	movw	r20, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <DIO_GetPinValue+0x8e>
    18e4:	55 95       	asr	r21
    18e6:	47 95       	ror	r20
    18e8:	8a 95       	dec	r24
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <DIO_GetPinValue+0x8a>
    18ec:	ca 01       	movw	r24, r20
    18ee:	81 70       	andi	r24, 0x01	; 1
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	23 c0       	rjmp	.+70     	; 0x193a <DIO_GetPinValue+0xe0>
		case DIO_PORTC: Value = GET_BIT(PINC_REG,Pin); break;
    18f4:	e3 e3       	ldi	r30, 0x33	; 51
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	88 2f       	mov	r24, r24
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	a9 01       	movw	r20, r18
    1906:	02 c0       	rjmp	.+4      	; 0x190c <DIO_GetPinValue+0xb2>
    1908:	55 95       	asr	r21
    190a:	47 95       	ror	r20
    190c:	8a 95       	dec	r24
    190e:	e2 f7       	brpl	.-8      	; 0x1908 <DIO_GetPinValue+0xae>
    1910:	ca 01       	movw	r24, r20
    1912:	81 70       	andi	r24, 0x01	; 1
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	11 c0       	rjmp	.+34     	; 0x193a <DIO_GetPinValue+0xe0>
		case DIO_PORTD: Value = GET_BIT(PIND_REG,Pin); break;
    1918:	e0 e3       	ldi	r30, 0x30	; 48
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	88 2f       	mov	r24, r24
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	a9 01       	movw	r20, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <DIO_GetPinValue+0xd6>
    192c:	55 95       	asr	r21
    192e:	47 95       	ror	r20
    1930:	8a 95       	dec	r24
    1932:	e2 f7       	brpl	.-8      	; 0x192c <DIO_GetPinValue+0xd2>
    1934:	ca 01       	movw	r24, r20
    1936:	81 70       	andi	r24, 0x01	; 1
    1938:	89 83       	std	Y+1, r24	; 0x01
		default:
		break;
	}
	return Value;
    193a:	89 81       	ldd	r24, Y+1	; 0x01
}
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <DIO_SetPortDirection>:

void DIO_SetPortDirection(u8 Port , u8 Direction)
{
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	00 d0       	rcall	.+0      	; 0x1952 <DIO_SetPortDirection+0x6>
    1952:	00 d0       	rcall	.+0      	; 0x1954 <DIO_SetPortDirection+0x8>
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	3c 83       	std	Y+4, r19	; 0x04
    1964:	2b 83       	std	Y+3, r18	; 0x03
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	81 30       	cpi	r24, 0x01	; 1
    196c:	91 05       	cpc	r25, r1
    196e:	d1 f0       	breq	.+52     	; 0x19a4 <DIO_SetPortDirection+0x58>
    1970:	2b 81       	ldd	r18, Y+3	; 0x03
    1972:	3c 81       	ldd	r19, Y+4	; 0x04
    1974:	22 30       	cpi	r18, 0x02	; 2
    1976:	31 05       	cpc	r19, r1
    1978:	2c f4       	brge	.+10     	; 0x1984 <DIO_SetPortDirection+0x38>
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	9c 81       	ldd	r25, Y+4	; 0x04
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	61 f0       	breq	.+24     	; 0x199a <DIO_SetPortDirection+0x4e>
    1982:	1e c0       	rjmp	.+60     	; 0x19c0 <DIO_SetPortDirection+0x74>
    1984:	2b 81       	ldd	r18, Y+3	; 0x03
    1986:	3c 81       	ldd	r19, Y+4	; 0x04
    1988:	22 30       	cpi	r18, 0x02	; 2
    198a:	31 05       	cpc	r19, r1
    198c:	81 f0       	breq	.+32     	; 0x19ae <DIO_SetPortDirection+0x62>
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	9c 81       	ldd	r25, Y+4	; 0x04
    1992:	83 30       	cpi	r24, 0x03	; 3
    1994:	91 05       	cpc	r25, r1
    1996:	81 f0       	breq	.+32     	; 0x19b8 <DIO_SetPortDirection+0x6c>
    1998:	13 c0       	rjmp	.+38     	; 0x19c0 <DIO_SetPortDirection+0x74>
	{
		case DIO_PORTA: DDRA_REG = Direction; break;
    199a:	ea e3       	ldi	r30, 0x3A	; 58
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	80 83       	st	Z, r24
    19a2:	0e c0       	rjmp	.+28     	; 0x19c0 <DIO_SetPortDirection+0x74>
		case DIO_PORTB: DDRB_REG = Direction; break;
    19a4:	e7 e3       	ldi	r30, 0x37	; 55
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	80 83       	st	Z, r24
    19ac:	09 c0       	rjmp	.+18     	; 0x19c0 <DIO_SetPortDirection+0x74>
		case DIO_PORTC: DDRC_REG = Direction; break;
    19ae:	e4 e3       	ldi	r30, 0x34	; 52
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	80 83       	st	Z, r24
    19b6:	04 c0       	rjmp	.+8      	; 0x19c0 <DIO_SetPortDirection+0x74>
		case DIO_PORTD: DDRD_REG = Direction; break;
    19b8:	e1 e3       	ldi	r30, 0x31	; 49
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	80 83       	st	Z, r24
		default:
		break;
	}
}
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <DIO_SetPortValue>:


void DIO_SetPortValue    (u8 Port , u8 Value   )
{
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <DIO_SetPortValue+0x6>
    19d4:	00 d0       	rcall	.+0      	; 0x19d6 <DIO_SetPortValue+0x8>
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	3c 83       	std	Y+4, r19	; 0x04
    19e6:	2b 83       	std	Y+3, r18	; 0x03
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	9c 81       	ldd	r25, Y+4	; 0x04
    19ec:	81 30       	cpi	r24, 0x01	; 1
    19ee:	91 05       	cpc	r25, r1
    19f0:	d1 f0       	breq	.+52     	; 0x1a26 <DIO_SetPortValue+0x58>
    19f2:	2b 81       	ldd	r18, Y+3	; 0x03
    19f4:	3c 81       	ldd	r19, Y+4	; 0x04
    19f6:	22 30       	cpi	r18, 0x02	; 2
    19f8:	31 05       	cpc	r19, r1
    19fa:	2c f4       	brge	.+10     	; 0x1a06 <DIO_SetPortValue+0x38>
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	61 f0       	breq	.+24     	; 0x1a1c <DIO_SetPortValue+0x4e>
    1a04:	1e c0       	rjmp	.+60     	; 0x1a42 <DIO_SetPortValue+0x74>
    1a06:	2b 81       	ldd	r18, Y+3	; 0x03
    1a08:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0a:	22 30       	cpi	r18, 0x02	; 2
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	81 f0       	breq	.+32     	; 0x1a30 <DIO_SetPortValue+0x62>
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	9c 81       	ldd	r25, Y+4	; 0x04
    1a14:	83 30       	cpi	r24, 0x03	; 3
    1a16:	91 05       	cpc	r25, r1
    1a18:	81 f0       	breq	.+32     	; 0x1a3a <DIO_SetPortValue+0x6c>
    1a1a:	13 c0       	rjmp	.+38     	; 0x1a42 <DIO_SetPortValue+0x74>
	{
		case DIO_PORTA: PORTA_REG = Value; break;
    1a1c:	eb e3       	ldi	r30, 0x3B	; 59
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	80 83       	st	Z, r24
    1a24:	0e c0       	rjmp	.+28     	; 0x1a42 <DIO_SetPortValue+0x74>
		case DIO_PORTB: PORTB_REG = Value; break;
    1a26:	e8 e3       	ldi	r30, 0x38	; 56
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	80 83       	st	Z, r24
    1a2e:	09 c0       	rjmp	.+18     	; 0x1a42 <DIO_SetPortValue+0x74>
		case DIO_PORTC: PORTC_REG = Value; break;
    1a30:	e5 e3       	ldi	r30, 0x35	; 53
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	80 83       	st	Z, r24
    1a38:	04 c0       	rjmp	.+8      	; 0x1a42 <DIO_SetPortValue+0x74>
		case DIO_PORTD: PORTD_REG = Value; break;
    1a3a:	e2 e3       	ldi	r30, 0x32	; 50
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	80 83       	st	Z, r24
		default:
		break;
	}
}
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	08 95       	ret

00001a50 <ADC_Init>:




void ADC_Init(void)
{
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
	// ADC Enable
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    1a58:	a6 e2       	ldi	r26, 0x26	; 38
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e6 e2       	ldi	r30, 0x26	; 38
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	80 68       	ori	r24, 0x80	; 128
    1a64:	8c 93       	st	X, r24

	// Prescaler Configuration as 128
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
    1a66:	a6 e2       	ldi	r26, 0x26	; 38
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e6 e2       	ldi	r30, 0x26	; 38
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	84 60       	ori	r24, 0x04	; 4
    1a72:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
    1a74:	a6 e2       	ldi	r26, 0x26	; 38
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e6 e2       	ldi	r30, 0x26	; 38
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	82 60       	ori	r24, 0x02	; 2
    1a80:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
    1a82:	a6 e2       	ldi	r26, 0x26	; 38
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e6 e2       	ldi	r30, 0x26	; 38
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	81 60       	ori	r24, 0x01	; 1
    1a8e:	8c 93       	st	X, r24
	// Referance Voltage as AVCC with external capacitor
	CLR_BIT(ADMUX,ADMUX_REFS1);
    1a90:	a7 e2       	ldi	r26, 0x27	; 39
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e7 e2       	ldi	r30, 0x27	; 39
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	8f 77       	andi	r24, 0x7F	; 127
    1a9c:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
    1a9e:	a7 e2       	ldi	r26, 0x27	; 39
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e7 e2       	ldi	r30, 0x27	; 39
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	80 64       	ori	r24, 0x40	; 64
    1aaa:	8c 93       	st	X, r24

	CLR_BIT(ADMUX,ADMUX_ADLAR);
    1aac:	a7 e2       	ldi	r26, 0x27	; 39
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e7 e2       	ldi	r30, 0x27	; 39
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	8f 7d       	andi	r24, 0xDF	; 223
    1ab8:	8c 93       	st	X, r24
}
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <ADC_Read>:

u16 ADC_Read (u8 channel)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	0f 92       	push	r0
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	89 83       	std	Y+1, r24	; 0x01
	// ADC Channel Selection
	channel &= 0x07;
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	87 70       	andi	r24, 0x07	; 7
    1ad0:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0;
    1ad2:	a7 e2       	ldi	r26, 0x27	; 39
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e7 e2       	ldi	r30, 0x27	; 39
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	80 7e       	andi	r24, 0xE0	; 224
    1ade:	8c 93       	st	X, r24
	ADMUX |= channel;
    1ae0:	a7 e2       	ldi	r26, 0x27	; 39
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e7 e2       	ldi	r30, 0x27	; 39
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	90 81       	ld	r25, Z
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	89 2b       	or	r24, r25
    1aee:	8c 93       	st	X, r24


	SET_BIT(ADCSRA,ADCSRA_ADSC);
    1af0:	a6 e2       	ldi	r26, 0x26	; 38
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e6 e2       	ldi	r30, 0x26	; 38
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	80 64       	ori	r24, 0x40	; 64
    1afc:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA,ADCSRA_ADIF)==0);
    1afe:	e6 e2       	ldi	r30, 0x26	; 38
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	82 95       	swap	r24
    1b06:	8f 70       	andi	r24, 0x0F	; 15
    1b08:	88 2f       	mov	r24, r24
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	81 70       	andi	r24, 0x01	; 1
    1b0e:	90 70       	andi	r25, 0x00	; 0
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	a9 f3       	breq	.-22     	; 0x1afe <ADC_Read+0x3e>

	SET_BIT(ADCSRA,ADCSRA_ADIF);
    1b14:	a6 e2       	ldi	r26, 0x26	; 38
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e6 e2       	ldi	r30, 0x26	; 38
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	80 61       	ori	r24, 0x10	; 16
    1b20:	8c 93       	st	X, r24

	return ADC;
    1b22:	e4 e2       	ldi	r30, 0x24	; 36
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	91 81       	ldd	r25, Z+1	; 0x01

}
    1b2a:	0f 90       	pop	r0
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	08 95       	ret

00001b32 <LCD_Init>:
#include "LCD_INTERFACE.h"



void LCD_Init(void)
{
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	e8 97       	sbiw	r28, 0x38	; 56
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinDirection(RS,DIO_OUTPUT); //RS
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	41 e0       	ldi	r20, 0x01	; 1
    1b4c:	0e 94 49 0a 	call	0x1492	; 0x1492 <DIO_SetPinDirection>
	DIO_SetPinDirection(EN,DIO_OUTPUT); //EN
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	61 e0       	ldi	r22, 0x01	; 1
    1b54:	41 e0       	ldi	r20, 0x01	; 1
    1b56:	0e 94 49 0a 	call	0x1492	; 0x1492 <DIO_SetPinDirection>

	DIO_SetPortDirection(LCD_PORT,0xFF);
    1b5a:	82 e0       	ldi	r24, 0x02	; 2
    1b5c:	6f ef       	ldi	r22, 0xFF	; 255
    1b5e:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_SetPortDirection>
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	a8 ec       	ldi	r26, 0xC8	; 200
    1b68:	b2 e4       	ldi	r27, 0x42	; 66
    1b6a:	8d ab       	std	Y+53, r24	; 0x35
    1b6c:	9e ab       	std	Y+54, r25	; 0x36
    1b6e:	af ab       	std	Y+55, r26	; 0x37
    1b70:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b72:	6d a9       	ldd	r22, Y+53	; 0x35
    1b74:	7e a9       	ldd	r23, Y+54	; 0x36
    1b76:	8f a9       	ldd	r24, Y+55	; 0x37
    1b78:	98 ad       	ldd	r25, Y+56	; 0x38
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	4a ef       	ldi	r20, 0xFA	; 250
    1b80:	54 e4       	ldi	r21, 0x44	; 68
    1b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	89 ab       	std	Y+49, r24	; 0x31
    1b8c:	9a ab       	std	Y+50, r25	; 0x32
    1b8e:	ab ab       	std	Y+51, r26	; 0x33
    1b90:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b92:	69 a9       	ldd	r22, Y+49	; 0x31
    1b94:	7a a9       	ldd	r23, Y+50	; 0x32
    1b96:	8b a9       	ldd	r24, Y+51	; 0x33
    1b98:	9c a9       	ldd	r25, Y+52	; 0x34
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e8       	ldi	r20, 0x80	; 128
    1ba0:	5f e3       	ldi	r21, 0x3F	; 63
    1ba2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba6:	88 23       	and	r24, r24
    1ba8:	2c f4       	brge	.+10     	; 0x1bb4 <LCD_Init+0x82>
		__ticks = 1;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	98 ab       	std	Y+48, r25	; 0x30
    1bb0:	8f a7       	std	Y+47, r24	; 0x2f
    1bb2:	3f c0       	rjmp	.+126    	; 0x1c32 <LCD_Init+0x100>
	else if (__tmp > 65535)
    1bb4:	69 a9       	ldd	r22, Y+49	; 0x31
    1bb6:	7a a9       	ldd	r23, Y+50	; 0x32
    1bb8:	8b a9       	ldd	r24, Y+51	; 0x33
    1bba:	9c a9       	ldd	r25, Y+52	; 0x34
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	3f ef       	ldi	r19, 0xFF	; 255
    1bc0:	4f e7       	ldi	r20, 0x7F	; 127
    1bc2:	57 e4       	ldi	r21, 0x47	; 71
    1bc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bc8:	18 16       	cp	r1, r24
    1bca:	4c f5       	brge	.+82     	; 0x1c1e <LCD_Init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bcc:	6d a9       	ldd	r22, Y+53	; 0x35
    1bce:	7e a9       	ldd	r23, Y+54	; 0x36
    1bd0:	8f a9       	ldd	r24, Y+55	; 0x37
    1bd2:	98 ad       	ldd	r25, Y+56	; 0x38
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	40 e2       	ldi	r20, 0x20	; 32
    1bda:	51 e4       	ldi	r21, 0x41	; 65
    1bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	bc 01       	movw	r22, r24
    1be6:	cd 01       	movw	r24, r26
    1be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	98 ab       	std	Y+48, r25	; 0x30
    1bf2:	8f a7       	std	Y+47, r24	; 0x2f
    1bf4:	0f c0       	rjmp	.+30     	; 0x1c14 <LCD_Init+0xe2>
    1bf6:	88 ec       	ldi	r24, 0xC8	; 200
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	9e a7       	std	Y+46, r25	; 0x2e
    1bfc:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bfe:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c00:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <LCD_Init+0xd0>
    1c06:	9e a7       	std	Y+46, r25	; 0x2e
    1c08:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c0c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	98 ab       	std	Y+48, r25	; 0x30
    1c12:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c16:	98 a9       	ldd	r25, Y+48	; 0x30
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	69 f7       	brne	.-38     	; 0x1bf6 <LCD_Init+0xc4>
    1c1c:	14 c0       	rjmp	.+40     	; 0x1c46 <LCD_Init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c20:	7a a9       	ldd	r23, Y+50	; 0x32
    1c22:	8b a9       	ldd	r24, Y+51	; 0x33
    1c24:	9c a9       	ldd	r25, Y+52	; 0x34
    1c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	98 ab       	std	Y+48, r25	; 0x30
    1c30:	8f a7       	std	Y+47, r24	; 0x2f
    1c32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c34:	98 a9       	ldd	r25, Y+48	; 0x30
    1c36:	9c a7       	std	Y+44, r25	; 0x2c
    1c38:	8b a7       	std	Y+43, r24	; 0x2b
    1c3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <LCD_Init+0x10c>
    1c42:	9c a7       	std	Y+44, r25	; 0x2c
    1c44:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);

	LCD_WriteCommand(0x38);
    1c46:	88 e3       	ldi	r24, 0x38	; 56
    1c48:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_WriteCommand>
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	a0 e8       	ldi	r26, 0x80	; 128
    1c52:	bf e3       	ldi	r27, 0x3F	; 63
    1c54:	8f a3       	std	Y+39, r24	; 0x27
    1c56:	98 a7       	std	Y+40, r25	; 0x28
    1c58:	a9 a7       	std	Y+41, r26	; 0x29
    1c5a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5c:	6f a1       	ldd	r22, Y+39	; 0x27
    1c5e:	78 a5       	ldd	r23, Y+40	; 0x28
    1c60:	89 a5       	ldd	r24, Y+41	; 0x29
    1c62:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	4a ef       	ldi	r20, 0xFA	; 250
    1c6a:	54 e4       	ldi	r21, 0x44	; 68
    1c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	8b a3       	std	Y+35, r24	; 0x23
    1c76:	9c a3       	std	Y+36, r25	; 0x24
    1c78:	ad a3       	std	Y+37, r26	; 0x25
    1c7a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c80:	8d a1       	ldd	r24, Y+37	; 0x25
    1c82:	9e a1       	ldd	r25, Y+38	; 0x26
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e8       	ldi	r20, 0x80	; 128
    1c8a:	5f e3       	ldi	r21, 0x3F	; 63
    1c8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c90:	88 23       	and	r24, r24
    1c92:	2c f4       	brge	.+10     	; 0x1c9e <LCD_Init+0x16c>
		__ticks = 1;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	9a a3       	std	Y+34, r25	; 0x22
    1c9a:	89 a3       	std	Y+33, r24	; 0x21
    1c9c:	3f c0       	rjmp	.+126    	; 0x1d1c <LCD_Init+0x1ea>
	else if (__tmp > 65535)
    1c9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1ca0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ca2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ca4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	3f ef       	ldi	r19, 0xFF	; 255
    1caa:	4f e7       	ldi	r20, 0x7F	; 127
    1cac:	57 e4       	ldi	r21, 0x47	; 71
    1cae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb2:	18 16       	cp	r1, r24
    1cb4:	4c f5       	brge	.+82     	; 0x1d08 <LCD_Init+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb6:	6f a1       	ldd	r22, Y+39	; 0x27
    1cb8:	78 a5       	ldd	r23, Y+40	; 0x28
    1cba:	89 a5       	ldd	r24, Y+41	; 0x29
    1cbc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e2       	ldi	r20, 0x20	; 32
    1cc4:	51 e4       	ldi	r21, 0x41	; 65
    1cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	bc 01       	movw	r22, r24
    1cd0:	cd 01       	movw	r24, r26
    1cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	9a a3       	std	Y+34, r25	; 0x22
    1cdc:	89 a3       	std	Y+33, r24	; 0x21
    1cde:	0f c0       	rjmp	.+30     	; 0x1cfe <LCD_Init+0x1cc>
    1ce0:	88 ec       	ldi	r24, 0xC8	; 200
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	98 a3       	std	Y+32, r25	; 0x20
    1ce6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ce8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cea:	98 a1       	ldd	r25, Y+32	; 0x20
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <LCD_Init+0x1ba>
    1cf0:	98 a3       	std	Y+32, r25	; 0x20
    1cf2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf4:	89 a1       	ldd	r24, Y+33	; 0x21
    1cf6:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	9a a3       	std	Y+34, r25	; 0x22
    1cfc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfe:	89 a1       	ldd	r24, Y+33	; 0x21
    1d00:	9a a1       	ldd	r25, Y+34	; 0x22
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	69 f7       	brne	.-38     	; 0x1ce0 <LCD_Init+0x1ae>
    1d06:	14 c0       	rjmp	.+40     	; 0x1d30 <LCD_Init+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d08:	6b a1       	ldd	r22, Y+35	; 0x23
    1d0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	9a a3       	std	Y+34, r25	; 0x22
    1d1a:	89 a3       	std	Y+33, r24	; 0x21
    1d1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d20:	9e 8f       	std	Y+30, r25	; 0x1e
    1d22:	8d 8f       	std	Y+29, r24	; 0x1d
    1d24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <LCD_Init+0x1f6>
    1d2c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d2e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_WriteCommand(0x0C);
    1d30:	8c e0       	ldi	r24, 0x0C	; 12
    1d32:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_WriteCommand>
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	a0 e8       	ldi	r26, 0x80	; 128
    1d3c:	bf e3       	ldi	r27, 0x3F	; 63
    1d3e:	89 8f       	std	Y+25, r24	; 0x19
    1d40:	9a 8f       	std	Y+26, r25	; 0x1a
    1d42:	ab 8f       	std	Y+27, r26	; 0x1b
    1d44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d46:	69 8d       	ldd	r22, Y+25	; 0x19
    1d48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	4a ef       	ldi	r20, 0xFA	; 250
    1d54:	54 e4       	ldi	r21, 0x44	; 68
    1d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	8d 8b       	std	Y+21, r24	; 0x15
    1d60:	9e 8b       	std	Y+22, r25	; 0x16
    1d62:	af 8b       	std	Y+23, r26	; 0x17
    1d64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d66:	6d 89       	ldd	r22, Y+21	; 0x15
    1d68:	7e 89       	ldd	r23, Y+22	; 0x16
    1d6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e8       	ldi	r20, 0x80	; 128
    1d74:	5f e3       	ldi	r21, 0x3F	; 63
    1d76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d7a:	88 23       	and	r24, r24
    1d7c:	2c f4       	brge	.+10     	; 0x1d88 <LCD_Init+0x256>
		__ticks = 1;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	9c 8b       	std	Y+20, r25	; 0x14
    1d84:	8b 8b       	std	Y+19, r24	; 0x13
    1d86:	3f c0       	rjmp	.+126    	; 0x1e06 <LCD_Init+0x2d4>
	else if (__tmp > 65535)
    1d88:	6d 89       	ldd	r22, Y+21	; 0x15
    1d8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	3f ef       	ldi	r19, 0xFF	; 255
    1d94:	4f e7       	ldi	r20, 0x7F	; 127
    1d96:	57 e4       	ldi	r21, 0x47	; 71
    1d98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d9c:	18 16       	cp	r1, r24
    1d9e:	4c f5       	brge	.+82     	; 0x1df2 <LCD_Init+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da0:	69 8d       	ldd	r22, Y+25	; 0x19
    1da2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e2       	ldi	r20, 0x20	; 32
    1dae:	51 e4       	ldi	r21, 0x41	; 65
    1db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	bc 01       	movw	r22, r24
    1dba:	cd 01       	movw	r24, r26
    1dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	9c 8b       	std	Y+20, r25	; 0x14
    1dc6:	8b 8b       	std	Y+19, r24	; 0x13
    1dc8:	0f c0       	rjmp	.+30     	; 0x1de8 <LCD_Init+0x2b6>
    1dca:	88 ec       	ldi	r24, 0xC8	; 200
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9a 8b       	std	Y+18, r25	; 0x12
    1dd0:	89 8b       	std	Y+17, r24	; 0x11
    1dd2:	89 89       	ldd	r24, Y+17	; 0x11
    1dd4:	9a 89       	ldd	r25, Y+18	; 0x12
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	f1 f7       	brne	.-4      	; 0x1dd6 <LCD_Init+0x2a4>
    1dda:	9a 8b       	std	Y+18, r25	; 0x12
    1ddc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dde:	8b 89       	ldd	r24, Y+19	; 0x13
    1de0:	9c 89       	ldd	r25, Y+20	; 0x14
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	9c 8b       	std	Y+20, r25	; 0x14
    1de6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dea:	9c 89       	ldd	r25, Y+20	; 0x14
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	69 f7       	brne	.-38     	; 0x1dca <LCD_Init+0x298>
    1df0:	14 c0       	rjmp	.+40     	; 0x1e1a <LCD_Init+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df2:	6d 89       	ldd	r22, Y+21	; 0x15
    1df4:	7e 89       	ldd	r23, Y+22	; 0x16
    1df6:	8f 89       	ldd	r24, Y+23	; 0x17
    1df8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	9c 8b       	std	Y+20, r25	; 0x14
    1e04:	8b 8b       	std	Y+19, r24	; 0x13
    1e06:	8b 89       	ldd	r24, Y+19	; 0x13
    1e08:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0a:	98 8b       	std	Y+16, r25	; 0x10
    1e0c:	8f 87       	std	Y+15, r24	; 0x0f
    1e0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e10:	98 89       	ldd	r25, Y+16	; 0x10
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <LCD_Init+0x2e0>
    1e16:	98 8b       	std	Y+16, r25	; 0x10
    1e18:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_WriteCommand(0x01);
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_WriteCommand>
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	a0 e0       	ldi	r26, 0x00	; 0
    1e26:	b0 e4       	ldi	r27, 0x40	; 64
    1e28:	8b 87       	std	Y+11, r24	; 0x0b
    1e2a:	9c 87       	std	Y+12, r25	; 0x0c
    1e2c:	ad 87       	std	Y+13, r26	; 0x0d
    1e2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	4a ef       	ldi	r20, 0xFA	; 250
    1e3e:	54 e4       	ldi	r21, 0x44	; 68
    1e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	8f 83       	std	Y+7, r24	; 0x07
    1e4a:	98 87       	std	Y+8, r25	; 0x08
    1e4c:	a9 87       	std	Y+9, r26	; 0x09
    1e4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e50:	6f 81       	ldd	r22, Y+7	; 0x07
    1e52:	78 85       	ldd	r23, Y+8	; 0x08
    1e54:	89 85       	ldd	r24, Y+9	; 0x09
    1e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e8       	ldi	r20, 0x80	; 128
    1e5e:	5f e3       	ldi	r21, 0x3F	; 63
    1e60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e64:	88 23       	and	r24, r24
    1e66:	2c f4       	brge	.+10     	; 0x1e72 <LCD_Init+0x340>
		__ticks = 1;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
    1e70:	3f c0       	rjmp	.+126    	; 0x1ef0 <LCD_Init+0x3be>
	else if (__tmp > 65535)
    1e72:	6f 81       	ldd	r22, Y+7	; 0x07
    1e74:	78 85       	ldd	r23, Y+8	; 0x08
    1e76:	89 85       	ldd	r24, Y+9	; 0x09
    1e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	3f ef       	ldi	r19, 0xFF	; 255
    1e7e:	4f e7       	ldi	r20, 0x7F	; 127
    1e80:	57 e4       	ldi	r21, 0x47	; 71
    1e82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e86:	18 16       	cp	r1, r24
    1e88:	4c f5       	brge	.+82     	; 0x1edc <LCD_Init+0x3aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e2       	ldi	r20, 0x20	; 32
    1e98:	51 e4       	ldi	r21, 0x41	; 65
    1e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	bc 01       	movw	r22, r24
    1ea4:	cd 01       	movw	r24, r26
    1ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	9e 83       	std	Y+6, r25	; 0x06
    1eb0:	8d 83       	std	Y+5, r24	; 0x05
    1eb2:	0f c0       	rjmp	.+30     	; 0x1ed2 <LCD_Init+0x3a0>
    1eb4:	88 ec       	ldi	r24, 0xC8	; 200
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9c 83       	std	Y+4, r25	; 0x04
    1eba:	8b 83       	std	Y+3, r24	; 0x03
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	f1 f7       	brne	.-4      	; 0x1ec0 <LCD_Init+0x38e>
    1ec4:	9c 83       	std	Y+4, r25	; 0x04
    1ec6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	9e 83       	std	Y+6, r25	; 0x06
    1ed0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	69 f7       	brne	.-38     	; 0x1eb4 <LCD_Init+0x382>
    1eda:	14 c0       	rjmp	.+40     	; 0x1f04 <LCD_Init+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1edc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ede:	78 85       	ldd	r23, Y+8	; 0x08
    1ee0:	89 85       	ldd	r24, Y+9	; 0x09
    1ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	9e 83       	std	Y+6, r25	; 0x06
    1eee:	8d 83       	std	Y+5, r24	; 0x05
    1ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef4:	9a 83       	std	Y+2, r25	; 0x02
    1ef6:	89 83       	std	Y+1, r24	; 0x01
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	9a 81       	ldd	r25, Y+2	; 0x02
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <LCD_Init+0x3ca>
    1f00:	9a 83       	std	Y+2, r25	; 0x02
    1f02:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_WriteCommand(0x06);
    1f04:	86 e0       	ldi	r24, 0x06	; 6
    1f06:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_WriteCommand>
}
    1f0a:	e8 96       	adiw	r28, 0x38	; 56
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	de bf       	out	0x3e, r29	; 62
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	cd bf       	out	0x3d, r28	; 61
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <LCD_WriteCommand>:

void LCD_WriteCommand(u8 Command)
{
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	6d 97       	sbiw	r28, 0x1d	; 29
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Rs = 0*/
	DIO_SetPinValue(RS,DIO_LOW);
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	60 e0       	ldi	r22, 0x00	; 0
    1f36:	40 e0       	ldi	r20, 0x00	; 0
    1f38:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
	/* Rw = 0*/

	DIO_SetPortValue(LCD_PORT,Command);
    1f3c:	82 e0       	ldi	r24, 0x02	; 2
    1f3e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1f40:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <DIO_SetPortValue>
	/*Set Enable */
	DIO_SetPinValue(EN,DIO_HIGH); //EN
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	61 e0       	ldi	r22, 0x01	; 1
    1f48:	41 e0       	ldi	r20, 0x01	; 1
    1f4a:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	a0 e8       	ldi	r26, 0x80	; 128
    1f54:	bf e3       	ldi	r27, 0x3F	; 63
    1f56:	89 8f       	std	Y+25, r24	; 0x19
    1f58:	9a 8f       	std	Y+26, r25	; 0x1a
    1f5a:	ab 8f       	std	Y+27, r26	; 0x1b
    1f5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	4a ef       	ldi	r20, 0xFA	; 250
    1f6c:	54 e4       	ldi	r21, 0x44	; 68
    1f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	8d 8b       	std	Y+21, r24	; 0x15
    1f78:	9e 8b       	std	Y+22, r25	; 0x16
    1f7a:	af 8b       	std	Y+23, r26	; 0x17
    1f7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f80:	7e 89       	ldd	r23, Y+22	; 0x16
    1f82:	8f 89       	ldd	r24, Y+23	; 0x17
    1f84:	98 8d       	ldd	r25, Y+24	; 0x18
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e8       	ldi	r20, 0x80	; 128
    1f8c:	5f e3       	ldi	r21, 0x3F	; 63
    1f8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f92:	88 23       	and	r24, r24
    1f94:	2c f4       	brge	.+10     	; 0x1fa0 <LCD_WriteCommand+0x84>
		__ticks = 1;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	9c 8b       	std	Y+20, r25	; 0x14
    1f9c:	8b 8b       	std	Y+19, r24	; 0x13
    1f9e:	3f c0       	rjmp	.+126    	; 0x201e <LCD_WriteCommand+0x102>
	else if (__tmp > 65535)
    1fa0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	3f ef       	ldi	r19, 0xFF	; 255
    1fac:	4f e7       	ldi	r20, 0x7F	; 127
    1fae:	57 e4       	ldi	r21, 0x47	; 71
    1fb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb4:	18 16       	cp	r1, r24
    1fb6:	4c f5       	brge	.+82     	; 0x200a <LCD_WriteCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb8:	69 8d       	ldd	r22, Y+25	; 0x19
    1fba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e2       	ldi	r20, 0x20	; 32
    1fc6:	51 e4       	ldi	r21, 0x41	; 65
    1fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	bc 01       	movw	r22, r24
    1fd2:	cd 01       	movw	r24, r26
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9c 8b       	std	Y+20, r25	; 0x14
    1fde:	8b 8b       	std	Y+19, r24	; 0x13
    1fe0:	0f c0       	rjmp	.+30     	; 0x2000 <LCD_WriteCommand+0xe4>
    1fe2:	88 ec       	ldi	r24, 0xC8	; 200
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	9a 8b       	std	Y+18, r25	; 0x12
    1fe8:	89 8b       	std	Y+17, r24	; 0x11
    1fea:	89 89       	ldd	r24, Y+17	; 0x11
    1fec:	9a 89       	ldd	r25, Y+18	; 0x12
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <LCD_WriteCommand+0xd2>
    1ff2:	9a 8b       	std	Y+18, r25	; 0x12
    1ff4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff8:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	9c 8b       	std	Y+20, r25	; 0x14
    1ffe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2000:	8b 89       	ldd	r24, Y+19	; 0x13
    2002:	9c 89       	ldd	r25, Y+20	; 0x14
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	69 f7       	brne	.-38     	; 0x1fe2 <LCD_WriteCommand+0xc6>
    2008:	14 c0       	rjmp	.+40     	; 0x2032 <LCD_WriteCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200a:	6d 89       	ldd	r22, Y+21	; 0x15
    200c:	7e 89       	ldd	r23, Y+22	; 0x16
    200e:	8f 89       	ldd	r24, Y+23	; 0x17
    2010:	98 8d       	ldd	r25, Y+24	; 0x18
    2012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	9c 8b       	std	Y+20, r25	; 0x14
    201c:	8b 8b       	std	Y+19, r24	; 0x13
    201e:	8b 89       	ldd	r24, Y+19	; 0x13
    2020:	9c 89       	ldd	r25, Y+20	; 0x14
    2022:	98 8b       	std	Y+16, r25	; 0x10
    2024:	8f 87       	std	Y+15, r24	; 0x0f
    2026:	8f 85       	ldd	r24, Y+15	; 0x0f
    2028:	98 89       	ldd	r25, Y+16	; 0x10
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <LCD_WriteCommand+0x10e>
    202e:	98 8b       	std	Y+16, r25	; 0x10
    2030:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_SetPinValue(EN,DIO_LOW);
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	61 e0       	ldi	r22, 0x01	; 1
    2036:	40 e0       	ldi	r20, 0x00	; 0
    2038:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	a0 ea       	ldi	r26, 0xA0	; 160
    2042:	b0 e4       	ldi	r27, 0x40	; 64
    2044:	8b 87       	std	Y+11, r24	; 0x0b
    2046:	9c 87       	std	Y+12, r25	; 0x0c
    2048:	ad 87       	std	Y+13, r26	; 0x0d
    204a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204c:	6b 85       	ldd	r22, Y+11	; 0x0b
    204e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2050:	8d 85       	ldd	r24, Y+13	; 0x0d
    2052:	9e 85       	ldd	r25, Y+14	; 0x0e
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	4a ef       	ldi	r20, 0xFA	; 250
    205a:	54 e4       	ldi	r21, 0x44	; 68
    205c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	8f 83       	std	Y+7, r24	; 0x07
    2066:	98 87       	std	Y+8, r25	; 0x08
    2068:	a9 87       	std	Y+9, r26	; 0x09
    206a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    206c:	6f 81       	ldd	r22, Y+7	; 0x07
    206e:	78 85       	ldd	r23, Y+8	; 0x08
    2070:	89 85       	ldd	r24, Y+9	; 0x09
    2072:	9a 85       	ldd	r25, Y+10	; 0x0a
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	40 e8       	ldi	r20, 0x80	; 128
    207a:	5f e3       	ldi	r21, 0x3F	; 63
    207c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2080:	88 23       	and	r24, r24
    2082:	2c f4       	brge	.+10     	; 0x208e <LCD_WriteCommand+0x172>
		__ticks = 1;
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	9e 83       	std	Y+6, r25	; 0x06
    208a:	8d 83       	std	Y+5, r24	; 0x05
    208c:	3f c0       	rjmp	.+126    	; 0x210c <LCD_WriteCommand+0x1f0>
	else if (__tmp > 65535)
    208e:	6f 81       	ldd	r22, Y+7	; 0x07
    2090:	78 85       	ldd	r23, Y+8	; 0x08
    2092:	89 85       	ldd	r24, Y+9	; 0x09
    2094:	9a 85       	ldd	r25, Y+10	; 0x0a
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	3f ef       	ldi	r19, 0xFF	; 255
    209a:	4f e7       	ldi	r20, 0x7F	; 127
    209c:	57 e4       	ldi	r21, 0x47	; 71
    209e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20a2:	18 16       	cp	r1, r24
    20a4:	4c f5       	brge	.+82     	; 0x20f8 <LCD_WriteCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e2       	ldi	r20, 0x20	; 32
    20b4:	51 e4       	ldi	r21, 0x41	; 65
    20b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	bc 01       	movw	r22, r24
    20c0:	cd 01       	movw	r24, r26
    20c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	9e 83       	std	Y+6, r25	; 0x06
    20cc:	8d 83       	std	Y+5, r24	; 0x05
    20ce:	0f c0       	rjmp	.+30     	; 0x20ee <LCD_WriteCommand+0x1d2>
    20d0:	88 ec       	ldi	r24, 0xC8	; 200
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	9c 83       	std	Y+4, r25	; 0x04
    20d6:	8b 83       	std	Y+3, r24	; 0x03
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	9c 81       	ldd	r25, Y+4	; 0x04
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	f1 f7       	brne	.-4      	; 0x20dc <LCD_WriteCommand+0x1c0>
    20e0:	9c 83       	std	Y+4, r25	; 0x04
    20e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e4:	8d 81       	ldd	r24, Y+5	; 0x05
    20e6:	9e 81       	ldd	r25, Y+6	; 0x06
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	9e 83       	std	Y+6, r25	; 0x06
    20ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ee:	8d 81       	ldd	r24, Y+5	; 0x05
    20f0:	9e 81       	ldd	r25, Y+6	; 0x06
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	69 f7       	brne	.-38     	; 0x20d0 <LCD_WriteCommand+0x1b4>
    20f6:	14 c0       	rjmp	.+40     	; 0x2120 <LCD_WriteCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f8:	6f 81       	ldd	r22, Y+7	; 0x07
    20fa:	78 85       	ldd	r23, Y+8	; 0x08
    20fc:	89 85       	ldd	r24, Y+9	; 0x09
    20fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	9e 83       	std	Y+6, r25	; 0x06
    210a:	8d 83       	std	Y+5, r24	; 0x05
    210c:	8d 81       	ldd	r24, Y+5	; 0x05
    210e:	9e 81       	ldd	r25, Y+6	; 0x06
    2110:	9a 83       	std	Y+2, r25	; 0x02
    2112:	89 83       	std	Y+1, r24	; 0x01
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	9a 81       	ldd	r25, Y+2	; 0x02
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	f1 f7       	brne	.-4      	; 0x2118 <LCD_WriteCommand+0x1fc>
    211c:	9a 83       	std	Y+2, r25	; 0x02
    211e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2120:	6d 96       	adiw	r28, 0x1d	; 29
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <LCD_WriteData>:
void LCD_WriteData(u8 Data)
{
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	6d 97       	sbiw	r28, 0x1d	; 29
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	de bf       	out	0x3e, r29	; 62
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	cd bf       	out	0x3d, r28	; 61
    2146:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Rs = 0*/
	DIO_SetPinValue(RS,DIO_HIGH);
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	41 e0       	ldi	r20, 0x01	; 1
    214e:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
	/* Rw = 0*/

	DIO_SetPortValue(LCD_PORT,Data);
    2152:	82 e0       	ldi	r24, 0x02	; 2
    2154:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2156:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <DIO_SetPortValue>
	/*Set Enable */
	DIO_SetPinValue(EN,DIO_HIGH); //EN
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	61 e0       	ldi	r22, 0x01	; 1
    215e:	41 e0       	ldi	r20, 0x01	; 1
    2160:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	a0 e8       	ldi	r26, 0x80	; 128
    216a:	bf e3       	ldi	r27, 0x3F	; 63
    216c:	89 8f       	std	Y+25, r24	; 0x19
    216e:	9a 8f       	std	Y+26, r25	; 0x1a
    2170:	ab 8f       	std	Y+27, r26	; 0x1b
    2172:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2174:	69 8d       	ldd	r22, Y+25	; 0x19
    2176:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2178:	8b 8d       	ldd	r24, Y+27	; 0x1b
    217a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	4a ef       	ldi	r20, 0xFA	; 250
    2182:	54 e4       	ldi	r21, 0x44	; 68
    2184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	8d 8b       	std	Y+21, r24	; 0x15
    218e:	9e 8b       	std	Y+22, r25	; 0x16
    2190:	af 8b       	std	Y+23, r26	; 0x17
    2192:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2194:	6d 89       	ldd	r22, Y+21	; 0x15
    2196:	7e 89       	ldd	r23, Y+22	; 0x16
    2198:	8f 89       	ldd	r24, Y+23	; 0x17
    219a:	98 8d       	ldd	r25, Y+24	; 0x18
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e8       	ldi	r20, 0x80	; 128
    21a2:	5f e3       	ldi	r21, 0x3F	; 63
    21a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21a8:	88 23       	and	r24, r24
    21aa:	2c f4       	brge	.+10     	; 0x21b6 <LCD_WriteData+0x84>
		__ticks = 1;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	9c 8b       	std	Y+20, r25	; 0x14
    21b2:	8b 8b       	std	Y+19, r24	; 0x13
    21b4:	3f c0       	rjmp	.+126    	; 0x2234 <LCD_WriteData+0x102>
	else if (__tmp > 65535)
    21b6:	6d 89       	ldd	r22, Y+21	; 0x15
    21b8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ba:	8f 89       	ldd	r24, Y+23	; 0x17
    21bc:	98 8d       	ldd	r25, Y+24	; 0x18
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	3f ef       	ldi	r19, 0xFF	; 255
    21c2:	4f e7       	ldi	r20, 0x7F	; 127
    21c4:	57 e4       	ldi	r21, 0x47	; 71
    21c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ca:	18 16       	cp	r1, r24
    21cc:	4c f5       	brge	.+82     	; 0x2220 <LCD_WriteData+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ce:	69 8d       	ldd	r22, Y+25	; 0x19
    21d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e2       	ldi	r20, 0x20	; 32
    21dc:	51 e4       	ldi	r21, 0x41	; 65
    21de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	bc 01       	movw	r22, r24
    21e8:	cd 01       	movw	r24, r26
    21ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	9c 8b       	std	Y+20, r25	; 0x14
    21f4:	8b 8b       	std	Y+19, r24	; 0x13
    21f6:	0f c0       	rjmp	.+30     	; 0x2216 <LCD_WriteData+0xe4>
    21f8:	88 ec       	ldi	r24, 0xC8	; 200
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	9a 8b       	std	Y+18, r25	; 0x12
    21fe:	89 8b       	std	Y+17, r24	; 0x11
    2200:	89 89       	ldd	r24, Y+17	; 0x11
    2202:	9a 89       	ldd	r25, Y+18	; 0x12
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <LCD_WriteData+0xd2>
    2208:	9a 8b       	std	Y+18, r25	; 0x12
    220a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220c:	8b 89       	ldd	r24, Y+19	; 0x13
    220e:	9c 89       	ldd	r25, Y+20	; 0x14
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	9c 8b       	std	Y+20, r25	; 0x14
    2214:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2216:	8b 89       	ldd	r24, Y+19	; 0x13
    2218:	9c 89       	ldd	r25, Y+20	; 0x14
    221a:	00 97       	sbiw	r24, 0x00	; 0
    221c:	69 f7       	brne	.-38     	; 0x21f8 <LCD_WriteData+0xc6>
    221e:	14 c0       	rjmp	.+40     	; 0x2248 <LCD_WriteData+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2220:	6d 89       	ldd	r22, Y+21	; 0x15
    2222:	7e 89       	ldd	r23, Y+22	; 0x16
    2224:	8f 89       	ldd	r24, Y+23	; 0x17
    2226:	98 8d       	ldd	r25, Y+24	; 0x18
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9c 8b       	std	Y+20, r25	; 0x14
    2232:	8b 8b       	std	Y+19, r24	; 0x13
    2234:	8b 89       	ldd	r24, Y+19	; 0x13
    2236:	9c 89       	ldd	r25, Y+20	; 0x14
    2238:	98 8b       	std	Y+16, r25	; 0x10
    223a:	8f 87       	std	Y+15, r24	; 0x0f
    223c:	8f 85       	ldd	r24, Y+15	; 0x0f
    223e:	98 89       	ldd	r25, Y+16	; 0x10
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <LCD_WriteData+0x10e>
    2244:	98 8b       	std	Y+16, r25	; 0x10
    2246:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_SetPinValue(EN,DIO_LOW);
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	61 e0       	ldi	r22, 0x01	; 1
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	a0 ea       	ldi	r26, 0xA0	; 160
    2258:	b0 e4       	ldi	r27, 0x40	; 64
    225a:	8b 87       	std	Y+11, r24	; 0x0b
    225c:	9c 87       	std	Y+12, r25	; 0x0c
    225e:	ad 87       	std	Y+13, r26	; 0x0d
    2260:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2262:	6b 85       	ldd	r22, Y+11	; 0x0b
    2264:	7c 85       	ldd	r23, Y+12	; 0x0c
    2266:	8d 85       	ldd	r24, Y+13	; 0x0d
    2268:	9e 85       	ldd	r25, Y+14	; 0x0e
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	4a ef       	ldi	r20, 0xFA	; 250
    2270:	54 e4       	ldi	r21, 0x44	; 68
    2272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	8f 83       	std	Y+7, r24	; 0x07
    227c:	98 87       	std	Y+8, r25	; 0x08
    227e:	a9 87       	std	Y+9, r26	; 0x09
    2280:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2282:	6f 81       	ldd	r22, Y+7	; 0x07
    2284:	78 85       	ldd	r23, Y+8	; 0x08
    2286:	89 85       	ldd	r24, Y+9	; 0x09
    2288:	9a 85       	ldd	r25, Y+10	; 0x0a
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e8       	ldi	r20, 0x80	; 128
    2290:	5f e3       	ldi	r21, 0x3F	; 63
    2292:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2296:	88 23       	and	r24, r24
    2298:	2c f4       	brge	.+10     	; 0x22a4 <LCD_WriteData+0x172>
		__ticks = 1;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	9e 83       	std	Y+6, r25	; 0x06
    22a0:	8d 83       	std	Y+5, r24	; 0x05
    22a2:	3f c0       	rjmp	.+126    	; 0x2322 <LCD_WriteData+0x1f0>
	else if (__tmp > 65535)
    22a4:	6f 81       	ldd	r22, Y+7	; 0x07
    22a6:	78 85       	ldd	r23, Y+8	; 0x08
    22a8:	89 85       	ldd	r24, Y+9	; 0x09
    22aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	3f ef       	ldi	r19, 0xFF	; 255
    22b0:	4f e7       	ldi	r20, 0x7F	; 127
    22b2:	57 e4       	ldi	r21, 0x47	; 71
    22b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22b8:	18 16       	cp	r1, r24
    22ba:	4c f5       	brge	.+82     	; 0x230e <LCD_WriteData+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22be:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e2       	ldi	r20, 0x20	; 32
    22ca:	51 e4       	ldi	r21, 0x41	; 65
    22cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	bc 01       	movw	r22, r24
    22d6:	cd 01       	movw	r24, r26
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	9e 83       	std	Y+6, r25	; 0x06
    22e2:	8d 83       	std	Y+5, r24	; 0x05
    22e4:	0f c0       	rjmp	.+30     	; 0x2304 <LCD_WriteData+0x1d2>
    22e6:	88 ec       	ldi	r24, 0xC8	; 200
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	9c 83       	std	Y+4, r25	; 0x04
    22ec:	8b 83       	std	Y+3, r24	; 0x03
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	9c 81       	ldd	r25, Y+4	; 0x04
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <LCD_WriteData+0x1c0>
    22f6:	9c 83       	std	Y+4, r25	; 0x04
    22f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fa:	8d 81       	ldd	r24, Y+5	; 0x05
    22fc:	9e 81       	ldd	r25, Y+6	; 0x06
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	9e 83       	std	Y+6, r25	; 0x06
    2302:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2304:	8d 81       	ldd	r24, Y+5	; 0x05
    2306:	9e 81       	ldd	r25, Y+6	; 0x06
    2308:	00 97       	sbiw	r24, 0x00	; 0
    230a:	69 f7       	brne	.-38     	; 0x22e6 <LCD_WriteData+0x1b4>
    230c:	14 c0       	rjmp	.+40     	; 0x2336 <LCD_WriteData+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230e:	6f 81       	ldd	r22, Y+7	; 0x07
    2310:	78 85       	ldd	r23, Y+8	; 0x08
    2312:	89 85       	ldd	r24, Y+9	; 0x09
    2314:	9a 85       	ldd	r25, Y+10	; 0x0a
    2316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	9e 83       	std	Y+6, r25	; 0x06
    2320:	8d 83       	std	Y+5, r24	; 0x05
    2322:	8d 81       	ldd	r24, Y+5	; 0x05
    2324:	9e 81       	ldd	r25, Y+6	; 0x06
    2326:	9a 83       	std	Y+2, r25	; 0x02
    2328:	89 83       	std	Y+1, r24	; 0x01
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	9a 81       	ldd	r25, Y+2	; 0x02
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	f1 f7       	brne	.-4      	; 0x232e <LCD_WriteData+0x1fc>
    2332:	9a 83       	std	Y+2, r25	; 0x02
    2334:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2336:	6d 96       	adiw	r28, 0x1d	; 29
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <LCD_WriteString>:




void LCD_WriteString(char *Ptr)
{
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	00 d0       	rcall	.+0      	; 0x234e <LCD_WriteString+0x6>
    234e:	0f 92       	push	r0
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	9b 83       	std	Y+3, r25	; 0x03
    2356:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2358:	19 82       	std	Y+1, r1	; 0x01
    235a:	0e c0       	rjmp	.+28     	; 0x2378 <LCD_WriteString+0x30>
	while(Ptr[i] != '\0')
	{
		LCD_WriteData(Ptr[i]);
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	28 2f       	mov	r18, r24
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	9b 81       	ldd	r25, Y+3	; 0x03
    2366:	fc 01       	movw	r30, r24
    2368:	e2 0f       	add	r30, r18
    236a:	f3 1f       	adc	r31, r19
    236c:	80 81       	ld	r24, Z
    236e:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_WriteData>
		i++;
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	8f 5f       	subi	r24, 0xFF	; 255
    2376:	89 83       	std	Y+1, r24	; 0x01


void LCD_WriteString(char *Ptr)
{
	u8 i = 0;
	while(Ptr[i] != '\0')
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	8a 81       	ldd	r24, Y+2	; 0x02
    2380:	9b 81       	ldd	r25, Y+3	; 0x03
    2382:	fc 01       	movw	r30, r24
    2384:	e2 0f       	add	r30, r18
    2386:	f3 1f       	adc	r31, r19
    2388:	80 81       	ld	r24, Z
    238a:	88 23       	and	r24, r24
    238c:	39 f7       	brne	.-50     	; 0x235c <LCD_WriteString+0x14>
	{
		LCD_WriteData(Ptr[i]);
		i++;
	}
}
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <LCD_GoToXY>:




void LCD_GoToXY(u8 X_Pos , u8 Y_Pos)
{
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <LCD_GoToXY+0x6>
    23a0:	0f 92       	push	r0
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	8a 83       	std	Y+2, r24	; 0x02
    23a8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Adress;

	if (X_Pos==0)
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	88 23       	and	r24, r24
    23ae:	19 f4       	brne	.+6      	; 0x23b6 <LCD_GoToXY+0x1c>
	{
		Local_Adress=Y_Pos;
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	89 83       	std	Y+1, r24	; 0x01
    23b4:	06 c0       	rjmp	.+12     	; 0x23c2 <LCD_GoToXY+0x28>

	}

	else if (X_Pos==1)
    23b6:	8a 81       	ldd	r24, Y+2	; 0x02
    23b8:	81 30       	cpi	r24, 0x01	; 1
    23ba:	19 f4       	brne	.+6      	; 0x23c2 <LCD_GoToXY+0x28>
	{
		Local_Adress = Y_Pos+ 0x40 ;
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	80 5c       	subi	r24, 0xC0	; 192
    23c0:	89 83       	std	Y+1, r24	; 0x01
	}

	/* set the calculated address into DDRAM */
	LCD_WriteCommand(Local_Adress+128);
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	80 58       	subi	r24, 0x80	; 128
    23c6:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_WriteCommand>


}
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <LCD_voidDisplayIntegar>:


void LCD_voidDisplayIntegar(u32 COPY_u32Number)
{
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
    23de:	64 97       	sbiw	r28, 0x14	; 20
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
    23ea:	69 8b       	std	Y+17, r22	; 0x11
    23ec:	7a 8b       	std	Y+18, r23	; 0x12
    23ee:	8b 8b       	std	Y+19, r24	; 0x13
    23f0:	9c 8b       	std	Y+20, r25	; 0x14
	u8 LOCAL_u8Num[10]={0};
    23f2:	8a e0       	ldi	r24, 0x0A	; 10
    23f4:	fe 01       	movw	r30, r28
    23f6:	37 96       	adiw	r30, 0x07	; 7
    23f8:	df 01       	movw	r26, r30
    23fa:	98 2f       	mov	r25, r24
    23fc:	1d 92       	st	X+, r1
    23fe:	9a 95       	dec	r25
    2400:	e9 f7       	brne	.-6      	; 0x23fc <LCD_voidDisplayIntegar+0x26>
	s16 i=0;
    2402:	1e 82       	std	Y+6, r1	; 0x06
    2404:	1d 82       	std	Y+5, r1	; 0x05
	u32 LOCAL_u32Remainder;
	if(COPY_u32Number==0)
    2406:	89 89       	ldd	r24, Y+17	; 0x11
    2408:	9a 89       	ldd	r25, Y+18	; 0x12
    240a:	ab 89       	ldd	r26, Y+19	; 0x13
    240c:	bc 89       	ldd	r27, Y+20	; 0x14
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	a1 05       	cpc	r26, r1
    2412:	b1 05       	cpc	r27, r1
    2414:	19 f4       	brne	.+6      	; 0x241c <LCD_voidDisplayIntegar+0x46>
	{
		LCD_WriteData('0');
    2416:	80 e3       	ldi	r24, 0x30	; 48
    2418:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_WriteData>
	}

	if(COPY_u32Number>0)
    241c:	89 89       	ldd	r24, Y+17	; 0x11
    241e:	9a 89       	ldd	r25, Y+18	; 0x12
    2420:	ab 89       	ldd	r26, Y+19	; 0x13
    2422:	bc 89       	ldd	r27, Y+20	; 0x14
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	a1 05       	cpc	r26, r1
    2428:	b1 05       	cpc	r27, r1
    242a:	09 f4       	brne	.+2      	; 0x242e <LCD_voidDisplayIntegar+0x58>
    242c:	55 c0       	rjmp	.+170    	; 0x24d8 <LCD_voidDisplayIntegar+0x102>
    242e:	32 c0       	rjmp	.+100    	; 0x2494 <LCD_voidDisplayIntegar+0xbe>
	{
		while(COPY_u32Number!=0)
		{
			LOCAL_u32Remainder=COPY_u32Number%10;
    2430:	89 89       	ldd	r24, Y+17	; 0x11
    2432:	9a 89       	ldd	r25, Y+18	; 0x12
    2434:	ab 89       	ldd	r26, Y+19	; 0x13
    2436:	bc 89       	ldd	r27, Y+20	; 0x14
    2438:	2a e0       	ldi	r18, 0x0A	; 10
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e0       	ldi	r20, 0x00	; 0
    243e:	50 e0       	ldi	r21, 0x00	; 0
    2440:	bc 01       	movw	r22, r24
    2442:	cd 01       	movw	r24, r26
    2444:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__udivmodsi4>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	9a 83       	std	Y+2, r25	; 0x02
    2450:	ab 83       	std	Y+3, r26	; 0x03
    2452:	bc 83       	std	Y+4, r27	; 0x04
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
    2454:	2d 81       	ldd	r18, Y+5	; 0x05
    2456:	3e 81       	ldd	r19, Y+6	; 0x06
    2458:	49 81       	ldd	r20, Y+1	; 0x01
    245a:	ce 01       	movw	r24, r28
    245c:	07 96       	adiw	r24, 0x07	; 7
    245e:	fc 01       	movw	r30, r24
    2460:	e2 0f       	add	r30, r18
    2462:	f3 1f       	adc	r31, r19
    2464:	40 83       	st	Z, r20
			COPY_u32Number=COPY_u32Number/10;
    2466:	89 89       	ldd	r24, Y+17	; 0x11
    2468:	9a 89       	ldd	r25, Y+18	; 0x12
    246a:	ab 89       	ldd	r26, Y+19	; 0x13
    246c:	bc 89       	ldd	r27, Y+20	; 0x14
    246e:	2a e0       	ldi	r18, 0x0A	; 10
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e0       	ldi	r20, 0x00	; 0
    2474:	50 e0       	ldi	r21, 0x00	; 0
    2476:	bc 01       	movw	r22, r24
    2478:	cd 01       	movw	r24, r26
    247a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__udivmodsi4>
    247e:	da 01       	movw	r26, r20
    2480:	c9 01       	movw	r24, r18
    2482:	89 8b       	std	Y+17, r24	; 0x11
    2484:	9a 8b       	std	Y+18, r25	; 0x12
    2486:	ab 8b       	std	Y+19, r26	; 0x13
    2488:	bc 8b       	std	Y+20, r27	; 0x14
			i++;
    248a:	8d 81       	ldd	r24, Y+5	; 0x05
    248c:	9e 81       	ldd	r25, Y+6	; 0x06
    248e:	01 96       	adiw	r24, 0x01	; 1
    2490:	9e 83       	std	Y+6, r25	; 0x06
    2492:	8d 83       	std	Y+5, r24	; 0x05
		LCD_WriteData('0');
	}

	if(COPY_u32Number>0)
	{
		while(COPY_u32Number!=0)
    2494:	89 89       	ldd	r24, Y+17	; 0x11
    2496:	9a 89       	ldd	r25, Y+18	; 0x12
    2498:	ab 89       	ldd	r26, Y+19	; 0x13
    249a:	bc 89       	ldd	r27, Y+20	; 0x14
    249c:	00 97       	sbiw	r24, 0x00	; 0
    249e:	a1 05       	cpc	r26, r1
    24a0:	b1 05       	cpc	r27, r1
    24a2:	31 f6       	brne	.-116    	; 0x2430 <LCD_voidDisplayIntegar+0x5a>
			LOCAL_u32Remainder=COPY_u32Number%10;
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
			COPY_u32Number=COPY_u32Number/10;
			i++;
		}
        i--;
    24a4:	8d 81       	ldd	r24, Y+5	; 0x05
    24a6:	9e 81       	ldd	r25, Y+6	; 0x06
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	9e 83       	std	Y+6, r25	; 0x06
    24ac:	8d 83       	std	Y+5, r24	; 0x05
    24ae:	10 c0       	rjmp	.+32     	; 0x24d0 <LCD_voidDisplayIntegar+0xfa>
		while(i>=0)
		{
			LCD_WriteData(LOCAL_u8Num[i]+48);
    24b0:	2d 81       	ldd	r18, Y+5	; 0x05
    24b2:	3e 81       	ldd	r19, Y+6	; 0x06
    24b4:	ce 01       	movw	r24, r28
    24b6:	07 96       	adiw	r24, 0x07	; 7
    24b8:	fc 01       	movw	r30, r24
    24ba:	e2 0f       	add	r30, r18
    24bc:	f3 1f       	adc	r31, r19
    24be:	80 81       	ld	r24, Z
    24c0:	80 5d       	subi	r24, 0xD0	; 208
    24c2:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_WriteData>
			i--;
    24c6:	8d 81       	ldd	r24, Y+5	; 0x05
    24c8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	8d 83       	std	Y+5, r24	; 0x05
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
			COPY_u32Number=COPY_u32Number/10;
			i++;
		}
        i--;
		while(i>=0)
    24d0:	8d 81       	ldd	r24, Y+5	; 0x05
    24d2:	9e 81       	ldd	r25, Y+6	; 0x06
    24d4:	99 23       	and	r25, r25
    24d6:	64 f7       	brge	.-40     	; 0x24b0 <LCD_voidDisplayIntegar+0xda>
		{
			LCD_WriteData(LOCAL_u8Num[i]+48);
			i--;
		}
	}
}
    24d8:	64 96       	adiw	r28, 0x14	; 20
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	f8 94       	cli
    24de:	de bf       	out	0x3e, r29	; 62
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	cd bf       	out	0x3d, r28	; 61
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <LCD_voidDisplaySpecialChar>:


void LCD_voidDisplaySpecialChar(u8* Ptr_u8PtrChar,u8 CGRam_index,u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    24f2:	27 97       	sbiw	r28, 0x07	; 7
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	de bf       	out	0x3e, r29	; 62
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	cd bf       	out	0x3d, r28	; 61
    24fe:	9c 83       	std	Y+4, r25	; 0x04
    2500:	8b 83       	std	Y+3, r24	; 0x03
    2502:	6d 83       	std	Y+5, r22	; 0x05
    2504:	4e 83       	std	Y+6, r20	; 0x06
    2506:	2f 83       	std	Y+7, r18	; 0x07
	LCD_GoToXY( Copy_u8RowNum, Copy_u8ColNum);
    2508:	8e 81       	ldd	r24, Y+6	; 0x06
    250a:	6f 81       	ldd	r22, Y+7	; 0x07
    250c:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_GoToXY>
	LCD_WriteData(CGRam_index);
    2510:	8d 81       	ldd	r24, Y+5	; 0x05
    2512:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_WriteData>
	u8 Local_u8address;
	u8 Local_u8Index;
	if (CGRam_index < 8)
    2516:	8d 81       	ldd	r24, Y+5	; 0x05
    2518:	88 30       	cpi	r24, 0x08	; 8
    251a:	18 f5       	brcc	.+70     	; 0x2562 <LCD_voidDisplaySpecialChar+0x78>
	{
		Local_u8address= CGRam_index * 8;
    251c:	8d 81       	ldd	r24, Y+5	; 0x05
    251e:	88 2f       	mov	r24, r24
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	88 0f       	add	r24, r24
    2524:	99 1f       	adc	r25, r25
    2526:	88 0f       	add	r24, r24
    2528:	99 1f       	adc	r25, r25
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8address=SET_BIT(Local_u8address,6);
    2530:	8a 81       	ldd	r24, Y+2	; 0x02
    2532:	80 64       	ori	r24, 0x40	; 64
    2534:	8a 83       	std	Y+2, r24	; 0x02
		LCD_WriteCommand(Local_u8address);
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_WriteCommand>
		for(Local_u8Index = 0;Local_u8Index < 8;Local_u8Index++)
    253c:	19 82       	std	Y+1, r1	; 0x01
    253e:	0e c0       	rjmp	.+28     	; 0x255c <LCD_voidDisplaySpecialChar+0x72>
		{
			LCD_WriteData(Ptr_u8PtrChar[Local_u8Index]);
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	28 2f       	mov	r18, r24
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	9c 81       	ldd	r25, Y+4	; 0x04
    254a:	fc 01       	movw	r30, r24
    254c:	e2 0f       	add	r30, r18
    254e:	f3 1f       	adc	r31, r19
    2550:	80 81       	ld	r24, Z
    2552:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_WriteData>
	if (CGRam_index < 8)
	{
		Local_u8address= CGRam_index * 8;
		Local_u8address=SET_BIT(Local_u8address,6);
		LCD_WriteCommand(Local_u8address);
		for(Local_u8Index = 0;Local_u8Index < 8;Local_u8Index++)
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	8f 5f       	subi	r24, 0xFF	; 255
    255a:	89 83       	std	Y+1, r24	; 0x01
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	88 30       	cpi	r24, 0x08	; 8
    2560:	78 f3       	brcs	.-34     	; 0x2540 <LCD_voidDisplaySpecialChar+0x56>
		{
			LCD_WriteData(Ptr_u8PtrChar[Local_u8Index]);
		}
	}
	LCD_WriteCommand(0x02);
    2562:	82 e0       	ldi	r24, 0x02	; 2
    2564:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_WriteCommand>

}
    2568:	27 96       	adiw	r28, 0x07	; 7
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	cd bf       	out	0x3d, r28	; 61
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <KPD_Init>:
#include "KPD_CONFIG.h"
#include "KPD_INTERFACE.h"


void KPD_Init()
{
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
			DIO_SetPinDirection(KPD_PORT,KPD_COULMN0_PIN,DIO_OUTPUT);
    2582:	83 e0       	ldi	r24, 0x03	; 3
    2584:	60 e0       	ldi	r22, 0x00	; 0
    2586:	41 e0       	ldi	r20, 0x01	; 1
    2588:	0e 94 49 0a 	call	0x1492	; 0x1492 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_COULMN1_PIN,DIO_OUTPUT);
    258c:	83 e0       	ldi	r24, 0x03	; 3
    258e:	61 e0       	ldi	r22, 0x01	; 1
    2590:	41 e0       	ldi	r20, 0x01	; 1
    2592:	0e 94 49 0a 	call	0x1492	; 0x1492 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_COULMN2_PIN,DIO_OUTPUT);
    2596:	83 e0       	ldi	r24, 0x03	; 3
    2598:	62 e0       	ldi	r22, 0x02	; 2
    259a:	41 e0       	ldi	r20, 0x01	; 1
    259c:	0e 94 49 0a 	call	0x1492	; 0x1492 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_COULMN3_PIN,DIO_OUTPUT);
    25a0:	83 e0       	ldi	r24, 0x03	; 3
    25a2:	63 e0       	ldi	r22, 0x03	; 3
    25a4:	41 e0       	ldi	r20, 0x01	; 1
    25a6:	0e 94 49 0a 	call	0x1492	; 0x1492 <DIO_SetPinDirection>

			DIO_SetPinDirection(KPD_PORT,KPD_ROW0_PIN,DIO_INPUT);
    25aa:	83 e0       	ldi	r24, 0x03	; 3
    25ac:	64 e0       	ldi	r22, 0x04	; 4
    25ae:	40 e0       	ldi	r20, 0x00	; 0
    25b0:	0e 94 49 0a 	call	0x1492	; 0x1492 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_ROW1_PIN,DIO_INPUT);
    25b4:	83 e0       	ldi	r24, 0x03	; 3
    25b6:	65 e0       	ldi	r22, 0x05	; 5
    25b8:	40 e0       	ldi	r20, 0x00	; 0
    25ba:	0e 94 49 0a 	call	0x1492	; 0x1492 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_ROW2_PIN,DIO_INPUT);
    25be:	83 e0       	ldi	r24, 0x03	; 3
    25c0:	66 e0       	ldi	r22, 0x06	; 6
    25c2:	40 e0       	ldi	r20, 0x00	; 0
    25c4:	0e 94 49 0a 	call	0x1492	; 0x1492 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_ROW3_PIN,DIO_INPUT);
    25c8:	83 e0       	ldi	r24, 0x03	; 3
    25ca:	67 e0       	ldi	r22, 0x07	; 7
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	0e 94 49 0a 	call	0x1492	; 0x1492 <DIO_SetPinDirection>
			//DIO_SetPortValue(KPD_PORT,0b00001111);
			DIO_SetPortValue(KPD_PORT,0xff);
    25d2:	83 e0       	ldi	r24, 0x03	; 3
    25d4:	6f ef       	ldi	r22, 0xFF	; 255
    25d6:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <DIO_SetPortValue>
}
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <KPD_u8GetPressedKye>:

u8 KPD_u8GetPressedKye(void)
{
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	a1 97       	sbiw	r28, 0x21	; 33
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	f8 94       	cli
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	cd bf       	out	0x3d, r28	; 61

	/*Indication for the pressed key value*/
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY;
    25f4:	8f ef       	ldi	r24, 0xFF	; 255
    25f6:	8b 83       	std	Y+3, r24	; 0x03

	u8 Local_u8CoulmnArr[COULMN_NUM]={KPD_COULMN0_PIN,KPD_COULMN1_PIN,KPD_COULMN2_PIN,KPD_COULMN3_PIN};
    25f8:	1c 82       	std	Y+4, r1	; 0x04
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	8d 83       	std	Y+5, r24	; 0x05
    25fe:	82 e0       	ldi	r24, 0x02	; 2
    2600:	8e 83       	std	Y+6, r24	; 0x06
    2602:	83 e0       	ldi	r24, 0x03	; 3
    2604:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8RowArr[COULMN_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
    2606:	84 e0       	ldi	r24, 0x04	; 4
    2608:	88 87       	std	Y+8, r24	; 0x08
    260a:	85 e0       	ldi	r24, 0x05	; 5
    260c:	89 87       	std	Y+9, r24	; 0x09
    260e:	86 e0       	ldi	r24, 0x06	; 6
    2610:	8a 87       	std	Y+10, r24	; 0x0a
    2612:	87 e0       	ldi	r24, 0x07	; 7
    2614:	8b 87       	std	Y+11, r24	; 0x0b

	/*Array of values of key pad*/
	u8 Local_u8KPDArr[ROW_NUM][COULMN_NUM]= KPD_ARR_VAL;
    2616:	ce 01       	movw	r24, r28
    2618:	0c 96       	adiw	r24, 0x0c	; 12
    261a:	9e 8f       	std	Y+30, r25	; 0x1e
    261c:	8d 8f       	std	Y+29, r24	; 0x1d
    261e:	ef e3       	ldi	r30, 0x3F	; 63
    2620:	f2 e0       	ldi	r31, 0x02	; 2
    2622:	f8 a3       	std	Y+32, r31	; 0x20
    2624:	ef 8f       	std	Y+31, r30	; 0x1f
    2626:	f0 e1       	ldi	r31, 0x10	; 16
    2628:	f9 a3       	std	Y+33, r31	; 0x21
    262a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    262c:	f8 a1       	ldd	r31, Y+32	; 0x20
    262e:	00 80       	ld	r0, Z
    2630:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2632:	98 a1       	ldd	r25, Y+32	; 0x20
    2634:	01 96       	adiw	r24, 0x01	; 1
    2636:	98 a3       	std	Y+32, r25	; 0x20
    2638:	8f 8f       	std	Y+31, r24	; 0x1f
    263a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    263c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    263e:	00 82       	st	Z, r0
    2640:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2642:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2644:	01 96       	adiw	r24, 0x01	; 1
    2646:	9e 8f       	std	Y+30, r25	; 0x1e
    2648:	8d 8f       	std	Y+29, r24	; 0x1d
    264a:	99 a1       	ldd	r25, Y+33	; 0x21
    264c:	91 50       	subi	r25, 0x01	; 1
    264e:	99 a3       	std	Y+33, r25	; 0x21
    2650:	e9 a1       	ldd	r30, Y+33	; 0x21
    2652:	ee 23       	and	r30, r30
    2654:	51 f7       	brne	.-44     	; 0x262a <KPD_u8GetPressedKye+0x4a>

	u8 Local_u8ColumnIndex,Local_u8RowIndex;

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex < COULMN_NUM; Local_u8ColumnIndex++)
    2656:	1a 82       	std	Y+2, r1	; 0x02
    2658:	72 c0       	rjmp	.+228    	; 0x273e <KPD_u8GetPressedKye+0x15e>
	{

		DIO_SetPinValue(KPD_PORT,Local_u8CoulmnArr[Local_u8ColumnIndex],DIO_LOW);
    265a:	8a 81       	ldd	r24, Y+2	; 0x02
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	ce 01       	movw	r24, r28
    2662:	04 96       	adiw	r24, 0x04	; 4
    2664:	fc 01       	movw	r30, r24
    2666:	e2 0f       	add	r30, r18
    2668:	f3 1f       	adc	r31, r19
    266a:	90 81       	ld	r25, Z
    266c:	83 e0       	ldi	r24, 0x03	; 3
    266e:	69 2f       	mov	r22, r25
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>

		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
    2676:	19 82       	std	Y+1, r1	; 0x01
    2678:	4d c0       	rjmp	.+154    	; 0x2714 <KPD_u8GetPressedKye+0x134>
		{
			if(DIO_GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex])==DIO_LOW)
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	28 2f       	mov	r18, r24
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	ce 01       	movw	r24, r28
    2682:	08 96       	adiw	r24, 0x08	; 8
    2684:	fc 01       	movw	r30, r24
    2686:	e2 0f       	add	r30, r18
    2688:	f3 1f       	adc	r31, r19
    268a:	90 81       	ld	r25, Z
    268c:	83 e0       	ldi	r24, 0x03	; 3
    268e:	69 2f       	mov	r22, r25
    2690:	0e 94 2d 0c 	call	0x185a	; 0x185a <DIO_GetPinValue>
    2694:	88 23       	and	r24, r24
    2696:	d9 f5       	brne	.+118    	; 0x270e <KPD_u8GetPressedKye+0x12e>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	28 2f       	mov	r18, r24
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	8a 81       	ldd	r24, Y+2	; 0x02
    26a0:	48 2f       	mov	r20, r24
    26a2:	50 e0       	ldi	r21, 0x00	; 0
    26a4:	22 0f       	add	r18, r18
    26a6:	33 1f       	adc	r19, r19
    26a8:	22 0f       	add	r18, r18
    26aa:	33 1f       	adc	r19, r19
    26ac:	ce 01       	movw	r24, r28
    26ae:	01 96       	adiw	r24, 0x01	; 1
    26b0:	82 0f       	add	r24, r18
    26b2:	93 1f       	adc	r25, r19
    26b4:	84 0f       	add	r24, r20
    26b6:	95 1f       	adc	r25, r21
    26b8:	fc 01       	movw	r30, r24
    26ba:	3b 96       	adiw	r30, 0x0b	; 11
    26bc:	80 81       	ld	r24, Z
    26be:	8b 83       	std	Y+3, r24	; 0x03
    26c0:	14 c0       	rjmp	.+40     	; 0x26ea <KPD_u8GetPressedKye+0x10a>
				while(DIO_GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex])==DIO_LOW)
				{
					Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	28 2f       	mov	r18, r24
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ca:	48 2f       	mov	r20, r24
    26cc:	50 e0       	ldi	r21, 0x00	; 0
    26ce:	22 0f       	add	r18, r18
    26d0:	33 1f       	adc	r19, r19
    26d2:	22 0f       	add	r18, r18
    26d4:	33 1f       	adc	r19, r19
    26d6:	ce 01       	movw	r24, r28
    26d8:	01 96       	adiw	r24, 0x01	; 1
    26da:	82 0f       	add	r24, r18
    26dc:	93 1f       	adc	r25, r19
    26de:	84 0f       	add	r24, r20
    26e0:	95 1f       	adc	r25, r21
    26e2:	fc 01       	movw	r30, r24
    26e4:	3b 96       	adiw	r30, 0x0b	; 11
    26e6:	80 81       	ld	r24, Z
    26e8:	8b 83       	std	Y+3, r24	; 0x03
		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
		{
			if(DIO_GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex])==DIO_LOW)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
				while(DIO_GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex])==DIO_LOW)
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	28 2f       	mov	r18, r24
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	ce 01       	movw	r24, r28
    26f2:	08 96       	adiw	r24, 0x08	; 8
    26f4:	fc 01       	movw	r30, r24
    26f6:	e2 0f       	add	r30, r18
    26f8:	f3 1f       	adc	r31, r19
    26fa:	90 81       	ld	r25, Z
    26fc:	83 e0       	ldi	r24, 0x03	; 3
    26fe:	69 2f       	mov	r22, r25
    2700:	0e 94 2d 0c 	call	0x185a	; 0x185a <DIO_GetPinValue>
    2704:	88 23       	and	r24, r24
    2706:	e9 f2       	breq	.-70     	; 0x26c2 <KPD_u8GetPressedKye+0xe2>
				{
					Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
				}

				return Local_u8PressedKey;
    2708:	fb 81       	ldd	r31, Y+3	; 0x03
    270a:	fc 8f       	std	Y+28, r31	; 0x1c
    270c:	1e c0       	rjmp	.+60     	; 0x274a <KPD_u8GetPressedKye+0x16a>
	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex < COULMN_NUM; Local_u8ColumnIndex++)
	{

		DIO_SetPinValue(KPD_PORT,Local_u8CoulmnArr[Local_u8ColumnIndex],DIO_LOW);

		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	8f 5f       	subi	r24, 0xFF	; 255
    2712:	89 83       	std	Y+1, r24	; 0x01
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	84 30       	cpi	r24, 0x04	; 4
    2718:	08 f4       	brcc	.+2      	; 0x271c <KPD_u8GetPressedKye+0x13c>
    271a:	af cf       	rjmp	.-162    	; 0x267a <KPD_u8GetPressedKye+0x9a>
				}

				return Local_u8PressedKey;
			}
		}
		DIO_SetPinValue(KPD_PORT,Local_u8CoulmnArr[Local_u8ColumnIndex],DIO_HIGH);
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	28 2f       	mov	r18, r24
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	ce 01       	movw	r24, r28
    2724:	04 96       	adiw	r24, 0x04	; 4
    2726:	fc 01       	movw	r30, r24
    2728:	e2 0f       	add	r30, r18
    272a:	f3 1f       	adc	r31, r19
    272c:	90 81       	ld	r25, Z
    272e:	83 e0       	ldi	r24, 0x03	; 3
    2730:	69 2f       	mov	r22, r25
    2732:	41 e0       	ldi	r20, 0x01	; 1
    2734:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
	/*Array of values of key pad*/
	u8 Local_u8KPDArr[ROW_NUM][COULMN_NUM]= KPD_ARR_VAL;

	u8 Local_u8ColumnIndex,Local_u8RowIndex;

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex < COULMN_NUM; Local_u8ColumnIndex++)
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	8f 5f       	subi	r24, 0xFF	; 255
    273c:	8a 83       	std	Y+2, r24	; 0x02
    273e:	8a 81       	ldd	r24, Y+2	; 0x02
    2740:	84 30       	cpi	r24, 0x04	; 4
    2742:	08 f4       	brcc	.+2      	; 0x2746 <KPD_u8GetPressedKye+0x166>
    2744:	8a cf       	rjmp	.-236    	; 0x265a <KPD_u8GetPressedKye+0x7a>
				return Local_u8PressedKey;
			}
		}
		DIO_SetPinValue(KPD_PORT,Local_u8CoulmnArr[Local_u8ColumnIndex],DIO_HIGH);
	}
	return Local_u8PressedKey;
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	8c 8f       	std	Y+28, r24	; 0x1c
    274a:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    274c:	a1 96       	adiw	r28, 0x21	; 33
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	de bf       	out	0x3e, r29	; 62
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	cd bf       	out	0x3d, r28	; 61
    2758:	cf 91       	pop	r28
    275a:	df 91       	pop	r29
    275c:	08 95       	ret

0000275e <main>:
		0b00000,
		0b00000,
};

int main(void)
{
    275e:	df 93       	push	r29
    2760:	cf 93       	push	r28
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	68 97       	sbiw	r28, 0x18	; 24
    2768:	0f b6       	in	r0, 0x3f	; 63
    276a:	f8 94       	cli
    276c:	de bf       	out	0x3e, r29	; 62
    276e:	0f be       	out	0x3f, r0	; 63
    2770:	cd bf       	out	0x3d, r28	; 61

	DIO_SetPinDirection(DIO_PORTD,DIO_PIN0,DIO_INPUT);		//RXD pin
    2772:	83 e0       	ldi	r24, 0x03	; 3
    2774:	60 e0       	ldi	r22, 0x00	; 0
    2776:	40 e0       	ldi	r20, 0x00	; 0
    2778:	0e 94 49 0a 	call	0x1492	; 0x1492 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN1,DIO_OUTPUT);		//TXD pin
    277c:	83 e0       	ldi	r24, 0x03	; 3
    277e:	61 e0       	ldi	r22, 0x01	; 1
    2780:	41 e0       	ldi	r20, 0x01	; 1
    2782:	0e 94 49 0a 	call	0x1492	; 0x1492 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);		//OCA1 pin
    2786:	83 e0       	ldi	r24, 0x03	; 3
    2788:	65 e0       	ldi	r22, 0x05	; 5
    278a:	41 e0       	ldi	r20, 0x01	; 1
    278c:	0e 94 49 0a 	call	0x1492	; 0x1492 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN5,DIO_OUTPUT);		//room3
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	65 e0       	ldi	r22, 0x05	; 5
    2794:	41 e0       	ldi	r20, 0x01	; 1
    2796:	0e 94 49 0a 	call	0x1492	; 0x1492 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN6,DIO_OUTPUT);		//room2
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	66 e0       	ldi	r22, 0x06	; 6
    279e:	41 e0       	ldi	r20, 0x01	; 1
    27a0:	0e 94 49 0a 	call	0x1492	; 0x1492 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN7,DIO_OUTPUT);		//room1
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	67 e0       	ldi	r22, 0x07	; 7
    27a8:	41 e0       	ldi	r20, 0x01	; 1
    27aa:	0e 94 49 0a 	call	0x1492	; 0x1492 <DIO_SetPinDirection>
	DIO_SetPinValue(DIO_PORTA,DIO_PIN5,DIO_LOW);			//room3 value
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	65 e0       	ldi	r22, 0x05	; 5
    27b2:	40 e0       	ldi	r20, 0x00	; 0
    27b4:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTA,DIO_PIN6,DIO_LOW); 			//room2	value
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	66 e0       	ldi	r22, 0x06	; 6
    27bc:	40 e0       	ldi	r20, 0x00	; 0
    27be:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTA,DIO_PIN7,DIO_LOW); 			//room1 value
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	67 e0       	ldi	r22, 0x07	; 7
    27c6:	40 e0       	ldi	r20, 0x00	; 0
    27c8:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN0,DIO_INPUT);		//LDR pin
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	60 e0       	ldi	r22, 0x00	; 0
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	0e 94 49 0a 	call	0x1492	; 0x1492 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN1,DIO_INPUT);		//LM35 pin
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	61 e0       	ldi	r22, 0x01	; 1
    27da:	40 e0       	ldi	r20, 0x00	; 0
    27dc:	0e 94 49 0a 	call	0x1492	; 0x1492 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN3,DIO_OUTPUT);		//Motot pin
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	63 e0       	ldi	r22, 0x03	; 3
    27e4:	41 e0       	ldi	r20, 0x01	; 1
    27e6:	0e 94 49 0a 	call	0x1492	; 0x1492 <DIO_SetPinDirection>
	Timer_init();											// timer0 init
    27ea:	0e 94 71 07 	call	0xee2	; 0xee2 <Timer_init>
	ADC_Init();												//ADC init
    27ee:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <ADC_Init>
	LCD_Init();												//LCD init
    27f2:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <LCD_Init>
	USART_voidInit();										//UART init
    27f6:	0e 94 50 06 	call	0xca0	; 0xca0 <USART_voidInit>
	Timer1_init();											//timer1 init
    27fa:	0e 94 fd 08 	call	0x11fa	; 0x11fa <Timer1_init>
	Timer1_SetICR(20000);									//timner 1 top value 20000
    27fe:	80 e2       	ldi	r24, 0x20	; 32
    2800:	9e e4       	ldi	r25, 0x4E	; 78
    2802:	0e 94 43 09 	call	0x1286	; 0x1286 <Timer1_SetICR>
	Timer1_SetChannelACompaermach(2000);					//timer 1 compare mach value 2000
    2806:	80 ed       	ldi	r24, 0xD0	; 208
    2808:	97 e0       	ldi	r25, 0x07	; 7
    280a:	0e 94 55 09 	call	0x12aa	; 0x12aa <Timer1_SetChannelACompaermach>
	TIMER_SetOCR0TO(200);
    280e:	88 ec       	ldi	r24, 0xC8	; 200
    2810:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <TIMER_SetOCR0TO>
	//Timer2_init();											//timer2 init
	//TIMER2_SetCallBack(&action);							//timer2 callback
	ADC_LM35=0;
    2814:	10 92 8c 02 	sts	0x028C, r1
    2818:	10 92 8b 02 	sts	0x028B, r1
	ADC_Motor=0;
    281c:	10 92 8d 02 	sts	0x028D, r1
	u8 USAERT_chice='0';
    2820:	80 e3       	ldi	r24, 0x30	; 48
    2822:	8e 8b       	std	Y+22, r24	; 0x16
	u8 access=0, counter=0,id=0;
    2824:	1d 8a       	std	Y+21, r1	; 0x15
    2826:	1c 8a       	std	Y+20, r1	; 0x14
    2828:	1b 8a       	std	Y+19, r1	; 0x13

	u8 * z=NULL;
    282a:	1a 8a       	std	Y+18, r1	; 0x12
    282c:	19 8a       	std	Y+17, r1	; 0x11
	u8* pass=NULL;
    282e:	18 8a       	std	Y+16, r1	; 0x10
    2830:	1f 86       	std	Y+15, r1	; 0x0f
    2832:	ad c0       	rjmp	.+346    	; 0x298e <main+0x230>
	while((pass==NULL))
	{

		USART_SendString("Enter your name: ");
    2834:	80 e6       	ldi	r24, 0x60	; 96
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	0e 94 ca 06 	call	0xd94	; 0xd94 <USART_SendString>
		z=USART_ReciveString();
    283c:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_ReciveString>
    2840:	9a 8b       	std	Y+18, r25	; 0x12
    2842:	89 8b       	std	Y+17, r24	; 0x11
		if((strcmp(z,"mohmaed")==0)||(strcmp(z,"mohmaed"+0x08)==0)){id=1;}
    2844:	89 89       	ldd	r24, Y+17	; 0x11
    2846:	9a 89       	ldd	r25, Y+18	; 0x12
    2848:	22 e7       	ldi	r18, 0x72	; 114
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	b9 01       	movw	r22, r18
    284e:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <strcmp>
    2852:	00 97       	sbiw	r24, 0x00	; 0
    2854:	49 f0       	breq	.+18     	; 0x2868 <main+0x10a>
    2856:	2a e7       	ldi	r18, 0x7A	; 122
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	89 89       	ldd	r24, Y+17	; 0x11
    285c:	9a 89       	ldd	r25, Y+18	; 0x12
    285e:	b9 01       	movw	r22, r18
    2860:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <strcmp>
    2864:	00 97       	sbiw	r24, 0x00	; 0
    2866:	19 f4       	brne	.+6      	; 0x286e <main+0x110>
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	8b 8b       	std	Y+19, r24	; 0x13
    286c:	89 c0       	rjmp	.+274    	; 0x2980 <main+0x222>
		else if((strcmp(z,"ahmed")==0)||(strcmp(z,"ahmed"+0x08)==0)){id=3;}
    286e:	89 89       	ldd	r24, Y+17	; 0x11
    2870:	9a 89       	ldd	r25, Y+18	; 0x12
    2872:	2a e7       	ldi	r18, 0x7A	; 122
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	b9 01       	movw	r22, r18
    2878:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <strcmp>
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	49 f0       	breq	.+18     	; 0x2892 <main+0x134>
    2880:	22 e8       	ldi	r18, 0x82	; 130
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	89 89       	ldd	r24, Y+17	; 0x11
    2886:	9a 89       	ldd	r25, Y+18	; 0x12
    2888:	b9 01       	movw	r22, r18
    288a:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <strcmp>
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	19 f4       	brne	.+6      	; 0x2898 <main+0x13a>
    2892:	83 e0       	ldi	r24, 0x03	; 3
    2894:	8b 8b       	std	Y+19, r24	; 0x13
    2896:	74 c0       	rjmp	.+232    	; 0x2980 <main+0x222>
		else{
			LCD_GoToXY(0,0);
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	60 e0       	ldi	r22, 0x00	; 0
    289c:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_GoToXY>
			LCD_WriteString("try agine");
    28a0:	80 e8       	ldi	r24, 0x80	; 128
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	0e 94 a4 11 	call	0x2348	; 0x2348 <LCD_WriteString>
    28a8:	6b c0       	rjmp	.+214    	; 0x2980 <main+0x222>
		}
		while((access==0)&&(id!=0))
		{
			USART_SendString("Enter your pass: ");
    28aa:	8a e8       	ldi	r24, 0x8A	; 138
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	0e 94 ca 06 	call	0xd94	; 0xd94 <USART_SendString>
			pass=USART_ReciveString();
    28b2:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_ReciveString>
    28b6:	98 8b       	std	Y+16, r25	; 0x10
    28b8:	8f 87       	std	Y+15, r24	; 0x0f
			if(((strcmp(pass,"1111")==0)||(strcmp(pass,"1111"+0x08)==0))&&(id==1)){
    28ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    28bc:	98 89       	ldd	r25, Y+16	; 0x10
    28be:	2c e9       	ldi	r18, 0x9C	; 156
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	b9 01       	movw	r22, r18
    28c4:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <strcmp>
    28c8:	00 97       	sbiw	r24, 0x00	; 0
    28ca:	49 f0       	breq	.+18     	; 0x28de <main+0x180>
    28cc:	24 ea       	ldi	r18, 0xA4	; 164
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    28d2:	98 89       	ldd	r25, Y+16	; 0x10
    28d4:	b9 01       	movw	r22, r18
    28d6:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <strcmp>
    28da:	00 97       	sbiw	r24, 0x00	; 0
    28dc:	b9 f4       	brne	.+46     	; 0x290c <main+0x1ae>
    28de:	8b 89       	ldd	r24, Y+19	; 0x13
    28e0:	81 30       	cpi	r24, 0x01	; 1
    28e2:	a1 f4       	brne	.+40     	; 0x290c <main+0x1ae>
				access++;
    28e4:	8d 89       	ldd	r24, Y+21	; 0x15
    28e6:	8f 5f       	subi	r24, 0xFF	; 255
    28e8:	8d 8b       	std	Y+21, r24	; 0x15
				LCD_GoToXY(0,0);
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	60 e0       	ldi	r22, 0x00	; 0
    28ee:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_GoToXY>
				LCD_WriteString("welcome back");
    28f2:	81 ea       	ldi	r24, 0xA1	; 161
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	0e 94 a4 11 	call	0x2348	; 0x2348 <LCD_WriteString>
				LCD_GoToXY(1,0);
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_GoToXY>
				LCD_WriteString("mohamed");
    2902:	8e ea       	ldi	r24, 0xAE	; 174
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	0e 94 a4 11 	call	0x2348	; 0x2348 <LCD_WriteString>
    290a:	3a c0       	rjmp	.+116    	; 0x2980 <main+0x222>
			}

			else if(((strcmp(pass,"3333")==0)||(strcmp(pass,"3333"+0x08)==0))&&(id==3)){
    290c:	8f 85       	ldd	r24, Y+15	; 0x0f
    290e:	98 89       	ldd	r25, Y+16	; 0x10
    2910:	26 eb       	ldi	r18, 0xB6	; 182
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	b9 01       	movw	r22, r18
    2916:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <strcmp>
    291a:	00 97       	sbiw	r24, 0x00	; 0
    291c:	49 f0       	breq	.+18     	; 0x2930 <main+0x1d2>
    291e:	2e eb       	ldi	r18, 0xBE	; 190
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	8f 85       	ldd	r24, Y+15	; 0x0f
    2924:	98 89       	ldd	r25, Y+16	; 0x10
    2926:	b9 01       	movw	r22, r18
    2928:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <strcmp>
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	b9 f4       	brne	.+46     	; 0x295e <main+0x200>
    2930:	8b 89       	ldd	r24, Y+19	; 0x13
    2932:	83 30       	cpi	r24, 0x03	; 3
    2934:	a1 f4       	brne	.+40     	; 0x295e <main+0x200>
				access++;
    2936:	8d 89       	ldd	r24, Y+21	; 0x15
    2938:	8f 5f       	subi	r24, 0xFF	; 255
    293a:	8d 8b       	std	Y+21, r24	; 0x15
				LCD_GoToXY(0,0);
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	60 e0       	ldi	r22, 0x00	; 0
    2940:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_GoToXY>
				LCD_WriteString("welcome back");
    2944:	81 ea       	ldi	r24, 0xA1	; 161
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	0e 94 a4 11 	call	0x2348	; 0x2348 <LCD_WriteString>
				LCD_GoToXY(1,0);
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	60 e0       	ldi	r22, 0x00	; 0
    2950:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_GoToXY>
				LCD_WriteString("ahmed");
    2954:	8a e7       	ldi	r24, 0x7A	; 122
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	0e 94 a4 11 	call	0x2348	; 0x2348 <LCD_WriteString>
    295c:	11 c0       	rjmp	.+34     	; 0x2980 <main+0x222>

			}
			else
			{

				USART_SendString("try agine!!");
    295e:	8b eb       	ldi	r24, 0xBB	; 187
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	0e 94 ca 06 	call	0xd94	; 0xd94 <USART_SendString>
				USART_voidSend(0x0D);
    2966:	8d e0       	ldi	r24, 0x0D	; 13
    2968:	0e 94 b0 06 	call	0xd60	; 0xd60 <USART_voidSend>
				counter++;
    296c:	8c 89       	ldd	r24, Y+20	; 0x14
    296e:	8f 5f       	subi	r24, 0xFF	; 255
    2970:	8c 8b       	std	Y+20, r24	; 0x14
				pass=NULL;
    2972:	18 8a       	std	Y+16, r1	; 0x10
    2974:	1f 86       	std	Y+15, r1	; 0x0f
				access=0;
    2976:	1d 8a       	std	Y+21, r1	; 0x15
				if(counter==3){id=0;}
    2978:	8c 89       	ldd	r24, Y+20	; 0x14
    297a:	83 30       	cpi	r24, 0x03	; 3
    297c:	09 f4       	brne	.+2      	; 0x2980 <main+0x222>
    297e:	1b 8a       	std	Y+19, r1	; 0x13
		else if((strcmp(z,"ahmed")==0)||(strcmp(z,"ahmed"+0x08)==0)){id=3;}
		else{
			LCD_GoToXY(0,0);
			LCD_WriteString("try agine");
		}
		while((access==0)&&(id!=0))
    2980:	8d 89       	ldd	r24, Y+21	; 0x15
    2982:	88 23       	and	r24, r24
    2984:	21 f4       	brne	.+8      	; 0x298e <main+0x230>
    2986:	8b 89       	ldd	r24, Y+19	; 0x13
    2988:	88 23       	and	r24, r24
    298a:	09 f0       	breq	.+2      	; 0x298e <main+0x230>
    298c:	8e cf       	rjmp	.-228    	; 0x28aa <main+0x14c>
	u8 USAERT_chice='0';
	u8 access=0, counter=0,id=0;

	u8 * z=NULL;
	u8* pass=NULL;
	while((pass==NULL))
    298e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2990:	98 89       	ldd	r25, Y+16	; 0x10
    2992:	00 97       	sbiw	r24, 0x00	; 0
    2994:	09 f4       	brne	.+2      	; 0x2998 <main+0x23a>
    2996:	4e cf       	rjmp	.-356    	; 0x2834 <main+0xd6>
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	aa ef       	ldi	r26, 0xFA	; 250
    299e:	b4 e4       	ldi	r27, 0x44	; 68
    29a0:	8b 87       	std	Y+11, r24	; 0x0b
    29a2:	9c 87       	std	Y+12, r25	; 0x0c
    29a4:	ad 87       	std	Y+13, r26	; 0x0d
    29a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	4a ef       	ldi	r20, 0xFA	; 250
    29b6:	54 e4       	ldi	r21, 0x44	; 68
    29b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	8f 83       	std	Y+7, r24	; 0x07
    29c2:	98 87       	std	Y+8, r25	; 0x08
    29c4:	a9 87       	std	Y+9, r26	; 0x09
    29c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29c8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ca:	78 85       	ldd	r23, Y+8	; 0x08
    29cc:	89 85       	ldd	r24, Y+9	; 0x09
    29ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	40 e8       	ldi	r20, 0x80	; 128
    29d6:	5f e3       	ldi	r21, 0x3F	; 63
    29d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29dc:	88 23       	and	r24, r24
    29de:	2c f4       	brge	.+10     	; 0x29ea <main+0x28c>
		__ticks = 1;
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	9e 83       	std	Y+6, r25	; 0x06
    29e6:	8d 83       	std	Y+5, r24	; 0x05
    29e8:	3f c0       	rjmp	.+126    	; 0x2a68 <main+0x30a>
	else if (__tmp > 65535)
    29ea:	6f 81       	ldd	r22, Y+7	; 0x07
    29ec:	78 85       	ldd	r23, Y+8	; 0x08
    29ee:	89 85       	ldd	r24, Y+9	; 0x09
    29f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	3f ef       	ldi	r19, 0xFF	; 255
    29f6:	4f e7       	ldi	r20, 0x7F	; 127
    29f8:	57 e4       	ldi	r21, 0x47	; 71
    29fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29fe:	18 16       	cp	r1, r24
    2a00:	4c f5       	brge	.+82     	; 0x2a54 <main+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	40 e2       	ldi	r20, 0x20	; 32
    2a10:	51 e4       	ldi	r21, 0x41	; 65
    2a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	bc 01       	movw	r22, r24
    2a1c:	cd 01       	movw	r24, r26
    2a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	9e 83       	std	Y+6, r25	; 0x06
    2a28:	8d 83       	std	Y+5, r24	; 0x05
    2a2a:	0f c0       	rjmp	.+30     	; 0x2a4a <main+0x2ec>
    2a2c:	88 ec       	ldi	r24, 0xC8	; 200
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	9c 83       	std	Y+4, r25	; 0x04
    2a32:	8b 83       	std	Y+3, r24	; 0x03
    2a34:	8b 81       	ldd	r24, Y+3	; 0x03
    2a36:	9c 81       	ldd	r25, Y+4	; 0x04
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	f1 f7       	brne	.-4      	; 0x2a38 <main+0x2da>
    2a3c:	9c 83       	std	Y+4, r25	; 0x04
    2a3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a40:	8d 81       	ldd	r24, Y+5	; 0x05
    2a42:	9e 81       	ldd	r25, Y+6	; 0x06
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	9e 83       	std	Y+6, r25	; 0x06
    2a48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4e:	00 97       	sbiw	r24, 0x00	; 0
    2a50:	69 f7       	brne	.-38     	; 0x2a2c <main+0x2ce>
    2a52:	14 c0       	rjmp	.+40     	; 0x2a7c <main+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a54:	6f 81       	ldd	r22, Y+7	; 0x07
    2a56:	78 85       	ldd	r23, Y+8	; 0x08
    2a58:	89 85       	ldd	r24, Y+9	; 0x09
    2a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	9e 83       	std	Y+6, r25	; 0x06
    2a66:	8d 83       	std	Y+5, r24	; 0x05
    2a68:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6c:	9a 83       	std	Y+2, r25	; 0x02
    2a6e:	89 83       	std	Y+1, r24	; 0x01
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	9a 81       	ldd	r25, Y+2	; 0x02
    2a74:	01 97       	sbiw	r24, 0x01	; 1
    2a76:	f1 f7       	brne	.-4      	; 0x2a74 <main+0x316>
    2a78:	9a 83       	std	Y+2, r25	; 0x02
    2a7a:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(2000);
	//Enable glable Interupts
	while(1)
	{
		ADC_LM35=ADC_Read(0);
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <ADC_Read>
    2a82:	90 93 8c 02 	sts	0x028C, r25
    2a86:	80 93 8b 02 	sts	0x028B, r24
		ADC_Motor=ADC_Read(1);
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <ADC_Read>
    2a90:	80 93 8d 02 	sts	0x028D, r24
		LCD_WriteCommand(lcd_clr);
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_WriteCommand>
		LCD_WriteString("Degres: ");
    2a9a:	87 ec       	ldi	r24, 0xC7	; 199
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	0e 94 a4 11 	call	0x2348	; 0x2348 <LCD_WriteString>
		LCD_voidDisplayIntegar(ADC_Motor*0.4868);
    2aa2:	80 91 8d 02 	lds	r24, 0x028D
    2aa6:	88 2f       	mov	r24, r24
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	aa 27       	eor	r26, r26
    2aac:	97 fd       	sbrc	r25, 7
    2aae:	a0 95       	com	r26
    2ab0:	ba 2f       	mov	r27, r26
    2ab2:	bc 01       	movw	r22, r24
    2ab4:	cd 01       	movw	r24, r26
    2ab6:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	bc 01       	movw	r22, r24
    2ac0:	cd 01       	movw	r24, r26
    2ac2:	29 ed       	ldi	r18, 0xD9	; 217
    2ac4:	3d e3       	ldi	r19, 0x3D	; 61
    2ac6:	49 ef       	ldi	r20, 0xF9	; 249
    2ac8:	5e e3       	ldi	r21, 0x3E	; 62
    2aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	bc 01       	movw	r22, r24
    2ad4:	cd 01       	movw	r24, r26
    2ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	bc 01       	movw	r22, r24
    2ae0:	cd 01       	movw	r24, r26
    2ae2:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <LCD_voidDisplayIntegar>
		LCD_voidDisplaySpecialChar(arr,0x01,0,10);
    2ae6:	87 e3       	ldi	r24, 0x37	; 55
    2ae8:	92 e0       	ldi	r25, 0x02	; 2
    2aea:	61 e0       	ldi	r22, 0x01	; 1
    2aec:	40 e0       	ldi	r20, 0x00	; 0
    2aee:	2a e0       	ldi	r18, 0x0A	; 10
    2af0:	0e 94 75 12 	call	0x24ea	; 0x24ea <LCD_voidDisplaySpecialChar>
		LCD_GoToXY(1,0);
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	60 e0       	ldi	r22, 0x00	; 0
    2af8:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_GoToXY>
		LCD_voidDisplayIntegar(ADC_LM35);
    2afc:	80 91 8b 02 	lds	r24, 0x028B
    2b00:	90 91 8c 02 	lds	r25, 0x028C
    2b04:	cc 01       	movw	r24, r24
    2b06:	a0 e0       	ldi	r26, 0x00	; 0
    2b08:	b0 e0       	ldi	r27, 0x00	; 0
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <LCD_voidDisplayIntegar>
		if((ADC_LM35<=456))
    2b12:	80 91 8b 02 	lds	r24, 0x028B
    2b16:	90 91 8c 02 	lds	r25, 0x028C
    2b1a:	21 e0       	ldi	r18, 0x01	; 1
    2b1c:	89 3c       	cpi	r24, 0xC9	; 201
    2b1e:	92 07       	cpc	r25, r18
    2b20:	80 f4       	brcc	.+32     	; 0x2b42 <main+0x3e4>
		{
			DIO_SetPinValue(DIO_PORTA,DIO_PIN5,DIO_HIGH); //room3
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	65 e0       	ldi	r22, 0x05	; 5
    2b26:	41 e0       	ldi	r20, 0x01	; 1
    2b28:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTA,DIO_PIN6,DIO_HIGH); //room2
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	66 e0       	ldi	r22, 0x06	; 6
    2b30:	41 e0       	ldi	r20, 0x01	; 1
    2b32:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTA,DIO_PIN7,DIO_HIGH); //room1
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	67 e0       	ldi	r22, 0x07	; 7
    2b3a:	41 e0       	ldi	r20, 0x01	; 1
    2b3c:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
    2b40:	4f c0       	rjmp	.+158    	; 0x2be0 <main+0x482>
		}
		else if((ADC_LM35<=519)&&(ADC_LM35>456))
    2b42:	80 91 8b 02 	lds	r24, 0x028B
    2b46:	90 91 8c 02 	lds	r25, 0x028C
    2b4a:	32 e0       	ldi	r19, 0x02	; 2
    2b4c:	88 30       	cpi	r24, 0x08	; 8
    2b4e:	93 07       	cpc	r25, r19
    2b50:	c0 f4       	brcc	.+48     	; 0x2b82 <main+0x424>
    2b52:	80 91 8b 02 	lds	r24, 0x028B
    2b56:	90 91 8c 02 	lds	r25, 0x028C
    2b5a:	21 e0       	ldi	r18, 0x01	; 1
    2b5c:	89 3c       	cpi	r24, 0xC9	; 201
    2b5e:	92 07       	cpc	r25, r18
    2b60:	80 f0       	brcs	.+32     	; 0x2b82 <main+0x424>
		{
			DIO_SetPinValue(DIO_PORTA,DIO_PIN5,DIO_HIGH); //room3
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	65 e0       	ldi	r22, 0x05	; 5
    2b66:	41 e0       	ldi	r20, 0x01	; 1
    2b68:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTA,DIO_PIN6,DIO_HIGH); //room2
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	66 e0       	ldi	r22, 0x06	; 6
    2b70:	41 e0       	ldi	r20, 0x01	; 1
    2b72:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTA,DIO_PIN7,DIO_LOW); //room1
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	67 e0       	ldi	r22, 0x07	; 7
    2b7a:	40 e0       	ldi	r20, 0x00	; 0
    2b7c:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
    2b80:	2f c0       	rjmp	.+94     	; 0x2be0 <main+0x482>
		}
		else if((ADC_LM35<=567)&&(ADC_LM35>519))
    2b82:	80 91 8b 02 	lds	r24, 0x028B
    2b86:	90 91 8c 02 	lds	r25, 0x028C
    2b8a:	32 e0       	ldi	r19, 0x02	; 2
    2b8c:	88 33       	cpi	r24, 0x38	; 56
    2b8e:	93 07       	cpc	r25, r19
    2b90:	c0 f4       	brcc	.+48     	; 0x2bc2 <main+0x464>
    2b92:	80 91 8b 02 	lds	r24, 0x028B
    2b96:	90 91 8c 02 	lds	r25, 0x028C
    2b9a:	22 e0       	ldi	r18, 0x02	; 2
    2b9c:	88 30       	cpi	r24, 0x08	; 8
    2b9e:	92 07       	cpc	r25, r18
    2ba0:	80 f0       	brcs	.+32     	; 0x2bc2 <main+0x464>
		{
			DIO_SetPinValue(DIO_PORTA,DIO_PIN5,DIO_HIGH); //room3
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	65 e0       	ldi	r22, 0x05	; 5
    2ba6:	41 e0       	ldi	r20, 0x01	; 1
    2ba8:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTA,DIO_PIN6,DIO_LOW); //room2
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	66 e0       	ldi	r22, 0x06	; 6
    2bb0:	40 e0       	ldi	r20, 0x00	; 0
    2bb2:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTA,DIO_PIN7,DIO_LOW); //room1
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	67 e0       	ldi	r22, 0x07	; 7
    2bba:	40 e0       	ldi	r20, 0x00	; 0
    2bbc:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
    2bc0:	0f c0       	rjmp	.+30     	; 0x2be0 <main+0x482>
		}
		else
		{
			DIO_SetPinValue(DIO_PORTA,DIO_PIN5,DIO_LOW); //room3
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	65 e0       	ldi	r22, 0x05	; 5
    2bc6:	40 e0       	ldi	r20, 0x00	; 0
    2bc8:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTA,DIO_PIN6,DIO_LOW); //room2
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	66 e0       	ldi	r22, 0x06	; 6
    2bd0:	40 e0       	ldi	r20, 0x00	; 0
    2bd2:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTA,DIO_PIN7,DIO_LOW); //room1
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	67 e0       	ldi	r22, 0x07	; 7
    2bda:	40 e0       	ldi	r20, 0x00	; 0
    2bdc:	0e 94 3b 0b 	call	0x1676	; 0x1676 <DIO_SetPinValue>
		}



		if((ADC_Motor<=100)&&(ADC_Motor>0))
    2be0:	80 91 8d 02 	lds	r24, 0x028D
    2be4:	85 36       	cpi	r24, 0x65	; 101
    2be6:	40 f4       	brcc	.+16     	; 0x2bf8 <main+0x49a>
    2be8:	80 91 8d 02 	lds	r24, 0x028D
    2bec:	88 23       	and	r24, r24
    2bee:	21 f0       	breq	.+8      	; 0x2bf8 <main+0x49a>
		{
			TIMER_SetOCR0TO(50);
    2bf0:	82 e3       	ldi	r24, 0x32	; 50
    2bf2:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <TIMER_SetOCR0TO>
    2bf6:	17 c0       	rjmp	.+46     	; 0x2c26 <main+0x4c8>
		}
		else if((ADC_Motor<=200)&&(ADC_Motor>100))
    2bf8:	80 91 8d 02 	lds	r24, 0x028D
    2bfc:	89 3c       	cpi	r24, 0xC9	; 201
    2bfe:	40 f4       	brcc	.+16     	; 0x2c10 <main+0x4b2>
    2c00:	80 91 8d 02 	lds	r24, 0x028D
    2c04:	85 36       	cpi	r24, 0x65	; 101
    2c06:	20 f0       	brcs	.+8      	; 0x2c10 <main+0x4b2>
		{
			TIMER_SetOCR0TO(100);
    2c08:	84 e6       	ldi	r24, 0x64	; 100
    2c0a:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <TIMER_SetOCR0TO>
    2c0e:	0b c0       	rjmp	.+22     	; 0x2c26 <main+0x4c8>
		}
		else if((ADC_Motor<=305)&&(ADC_Motor>200))
    2c10:	80 91 8d 02 	lds	r24, 0x028D
    2c14:	89 3c       	cpi	r24, 0xC9	; 201
    2c16:	20 f0       	brcs	.+8      	; 0x2c20 <main+0x4c2>
		{
			TIMER_SetOCR0TO(200);
    2c18:	88 ec       	ldi	r24, 0xC8	; 200
    2c1a:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <TIMER_SetOCR0TO>
    2c1e:	03 c0       	rjmp	.+6      	; 0x2c26 <main+0x4c8>
		}
		else
		{
			TIMER_SetOCR0TO(250);
    2c20:	8a ef       	ldi	r24, 0xFA	; 250
    2c22:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <TIMER_SetOCR0TO>
		}

		switch(USAERT_chice)
    2c26:	8e 89       	ldd	r24, Y+22	; 0x16
    2c28:	28 2f       	mov	r18, r24
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	38 8f       	std	Y+24, r19	; 0x18
    2c2e:	2f 8b       	std	Y+23, r18	; 0x17
    2c30:	8f 89       	ldd	r24, Y+23	; 0x17
    2c32:	98 8d       	ldd	r25, Y+24	; 0x18
    2c34:	81 33       	cpi	r24, 0x31	; 49
    2c36:	91 05       	cpc	r25, r1
    2c38:	29 f1       	breq	.+74     	; 0x2c84 <main+0x526>
    2c3a:	2f 89       	ldd	r18, Y+23	; 0x17
    2c3c:	38 8d       	ldd	r19, Y+24	; 0x18
    2c3e:	23 33       	cpi	r18, 0x33	; 51
    2c40:	31 05       	cpc	r19, r1
    2c42:	d1 f1       	breq	.+116    	; 0x2cb8 <main+0x55a>
    2c44:	8f 89       	ldd	r24, Y+23	; 0x17
    2c46:	98 8d       	ldd	r25, Y+24	; 0x18
    2c48:	80 33       	cpi	r24, 0x30	; 48
    2c4a:	91 05       	cpc	r25, r1
    2c4c:	09 f0       	breq	.+2      	; 0x2c50 <main+0x4f2>
    2c4e:	4a c0       	rjmp	.+148    	; 0x2ce4 <main+0x586>
		{
		case '0':
			USART_SendString("options: ");
    2c50:	80 ed       	ldi	r24, 0xD0	; 208
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	0e 94 ca 06 	call	0xd94	; 0xd94 <USART_SendString>
			USART_voidSend(0x0D);
    2c58:	8d e0       	ldi	r24, 0x0D	; 13
    2c5a:	0e 94 b0 06 	call	0xd60	; 0xd60 <USART_voidSend>
			USART_SendString("-close door: 1 ");
    2c5e:	8a ed       	ldi	r24, 0xDA	; 218
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	0e 94 ca 06 	call	0xd94	; 0xd94 <USART_SendString>
			USART_voidSend(0x0D);
    2c66:	8d e0       	ldi	r24, 0x0D	; 13
    2c68:	0e 94 b0 06 	call	0xd60	; 0xd60 <USART_voidSend>
			USART_SendString("-refresh data: 3 ");
    2c6c:	8a ee       	ldi	r24, 0xEA	; 234
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	0e 94 ca 06 	call	0xd94	; 0xd94 <USART_SendString>
			USART_voidSend(0x0D);
    2c74:	8d e0       	ldi	r24, 0x0D	; 13
    2c76:	0e 94 b0 06 	call	0xd60	; 0xd60 <USART_voidSend>
			Timer1_SetChannelACompaermach(2000);
    2c7a:	80 ed       	ldi	r24, 0xD0	; 208
    2c7c:	97 e0       	ldi	r25, 0x07	; 7
    2c7e:	0e 94 55 09 	call	0x12aa	; 0x12aa <Timer1_SetChannelACompaermach>
    2c82:	37 c0       	rjmp	.+110    	; 0x2cf2 <main+0x594>
			break;
		case '1':
			USART_SendString("options: ");
    2c84:	80 ed       	ldi	r24, 0xD0	; 208
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	0e 94 ca 06 	call	0xd94	; 0xd94 <USART_SendString>
			USART_voidSend(0x0D);
    2c8c:	8d e0       	ldi	r24, 0x0D	; 13
    2c8e:	0e 94 b0 06 	call	0xd60	; 0xd60 <USART_voidSend>
			USART_SendString("-open door: 0 ");
    2c92:	8c ef       	ldi	r24, 0xFC	; 252
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	0e 94 ca 06 	call	0xd94	; 0xd94 <USART_SendString>
			USART_voidSend(0x0D);
    2c9a:	8d e0       	ldi	r24, 0x0D	; 13
    2c9c:	0e 94 b0 06 	call	0xd60	; 0xd60 <USART_voidSend>
			USART_SendString("-refresh data: 3 ");
    2ca0:	8a ee       	ldi	r24, 0xEA	; 234
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	0e 94 ca 06 	call	0xd94	; 0xd94 <USART_SendString>
			USART_voidSend(0x0D);
    2ca8:	8d e0       	ldi	r24, 0x0D	; 13
    2caa:	0e 94 b0 06 	call	0xd60	; 0xd60 <USART_voidSend>
			Timer1_SetChannelACompaermach(999);
    2cae:	87 ee       	ldi	r24, 0xE7	; 231
    2cb0:	93 e0       	ldi	r25, 0x03	; 3
    2cb2:	0e 94 55 09 	call	0x12aa	; 0x12aa <Timer1_SetChannelACompaermach>
    2cb6:	1d c0       	rjmp	.+58     	; 0x2cf2 <main+0x594>
			break;
		case '3':
			USART_SendString("options: ");
    2cb8:	80 ed       	ldi	r24, 0xD0	; 208
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	0e 94 ca 06 	call	0xd94	; 0xd94 <USART_SendString>
			USART_voidSend(0x0D);
    2cc0:	8d e0       	ldi	r24, 0x0D	; 13
    2cc2:	0e 94 b0 06 	call	0xd60	; 0xd60 <USART_voidSend>
			USART_SendString("-open door: 0 ");
    2cc6:	8c ef       	ldi	r24, 0xFC	; 252
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	0e 94 ca 06 	call	0xd94	; 0xd94 <USART_SendString>
			USART_voidSend(0x0D);
    2cce:	8d e0       	ldi	r24, 0x0D	; 13
    2cd0:	0e 94 b0 06 	call	0xd60	; 0xd60 <USART_voidSend>
			USART_SendString("-refresh data: 3 ");
    2cd4:	8a ee       	ldi	r24, 0xEA	; 234
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	0e 94 ca 06 	call	0xd94	; 0xd94 <USART_SendString>
			USART_voidSend(0x0D);
    2cdc:	8d e0       	ldi	r24, 0x0D	; 13
    2cde:	0e 94 b0 06 	call	0xd60	; 0xd60 <USART_voidSend>
    2ce2:	07 c0       	rjmp	.+14     	; 0x2cf2 <main+0x594>
			break;
		default:
			USART_SendString("not valid option");
    2ce4:	8b e0       	ldi	r24, 0x0B	; 11
    2ce6:	91 e0       	ldi	r25, 0x01	; 1
    2ce8:	0e 94 ca 06 	call	0xd94	; 0xd94 <USART_SendString>
			USART_voidSend(0x0D);
    2cec:	8d e0       	ldi	r24, 0x0D	; 13
    2cee:	0e 94 b0 06 	call	0xd60	; 0xd60 <USART_voidSend>
			break;
		}
		USART_SendString("Enter your option:");
    2cf2:	8c e1       	ldi	r24, 0x1C	; 28
    2cf4:	91 e0       	ldi	r25, 0x01	; 1
    2cf6:	0e 94 ca 06 	call	0xd94	; 0xd94 <USART_SendString>
		USAERT_chice=USART_u8Read();
    2cfa:	0e 94 a1 06 	call	0xd42	; 0xd42 <USART_u8Read>
    2cfe:	8e 8b       	std	Y+22, r24	; 0x16
		while(USART_u8Read()!=0x0D);
    2d00:	0e 94 a1 06 	call	0xd42	; 0xd42 <USART_u8Read>
    2d04:	8d 30       	cpi	r24, 0x0D	; 13
    2d06:	e1 f7       	brne	.-8      	; 0x2d00 <main+0x5a2>
    2d08:	b9 ce       	rjmp	.-654    	; 0x2a7c <main+0x31e>

00002d0a <__udivmodsi4>:
    2d0a:	a1 e2       	ldi	r26, 0x21	; 33
    2d0c:	1a 2e       	mov	r1, r26
    2d0e:	aa 1b       	sub	r26, r26
    2d10:	bb 1b       	sub	r27, r27
    2d12:	fd 01       	movw	r30, r26
    2d14:	0d c0       	rjmp	.+26     	; 0x2d30 <__udivmodsi4_ep>

00002d16 <__udivmodsi4_loop>:
    2d16:	aa 1f       	adc	r26, r26
    2d18:	bb 1f       	adc	r27, r27
    2d1a:	ee 1f       	adc	r30, r30
    2d1c:	ff 1f       	adc	r31, r31
    2d1e:	a2 17       	cp	r26, r18
    2d20:	b3 07       	cpc	r27, r19
    2d22:	e4 07       	cpc	r30, r20
    2d24:	f5 07       	cpc	r31, r21
    2d26:	20 f0       	brcs	.+8      	; 0x2d30 <__udivmodsi4_ep>
    2d28:	a2 1b       	sub	r26, r18
    2d2a:	b3 0b       	sbc	r27, r19
    2d2c:	e4 0b       	sbc	r30, r20
    2d2e:	f5 0b       	sbc	r31, r21

00002d30 <__udivmodsi4_ep>:
    2d30:	66 1f       	adc	r22, r22
    2d32:	77 1f       	adc	r23, r23
    2d34:	88 1f       	adc	r24, r24
    2d36:	99 1f       	adc	r25, r25
    2d38:	1a 94       	dec	r1
    2d3a:	69 f7       	brne	.-38     	; 0x2d16 <__udivmodsi4_loop>
    2d3c:	60 95       	com	r22
    2d3e:	70 95       	com	r23
    2d40:	80 95       	com	r24
    2d42:	90 95       	com	r25
    2d44:	9b 01       	movw	r18, r22
    2d46:	ac 01       	movw	r20, r24
    2d48:	bd 01       	movw	r22, r26
    2d4a:	cf 01       	movw	r24, r30
    2d4c:	08 95       	ret

00002d4e <__prologue_saves__>:
    2d4e:	2f 92       	push	r2
    2d50:	3f 92       	push	r3
    2d52:	4f 92       	push	r4
    2d54:	5f 92       	push	r5
    2d56:	6f 92       	push	r6
    2d58:	7f 92       	push	r7
    2d5a:	8f 92       	push	r8
    2d5c:	9f 92       	push	r9
    2d5e:	af 92       	push	r10
    2d60:	bf 92       	push	r11
    2d62:	cf 92       	push	r12
    2d64:	df 92       	push	r13
    2d66:	ef 92       	push	r14
    2d68:	ff 92       	push	r15
    2d6a:	0f 93       	push	r16
    2d6c:	1f 93       	push	r17
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	ca 1b       	sub	r28, r26
    2d78:	db 0b       	sbc	r29, r27
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	de bf       	out	0x3e, r29	; 62
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	cd bf       	out	0x3d, r28	; 61
    2d84:	09 94       	ijmp

00002d86 <__epilogue_restores__>:
    2d86:	2a 88       	ldd	r2, Y+18	; 0x12
    2d88:	39 88       	ldd	r3, Y+17	; 0x11
    2d8a:	48 88       	ldd	r4, Y+16	; 0x10
    2d8c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d8e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d90:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d92:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d94:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d96:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d98:	b9 84       	ldd	r11, Y+9	; 0x09
    2d9a:	c8 84       	ldd	r12, Y+8	; 0x08
    2d9c:	df 80       	ldd	r13, Y+7	; 0x07
    2d9e:	ee 80       	ldd	r14, Y+6	; 0x06
    2da0:	fd 80       	ldd	r15, Y+5	; 0x05
    2da2:	0c 81       	ldd	r16, Y+4	; 0x04
    2da4:	1b 81       	ldd	r17, Y+3	; 0x03
    2da6:	aa 81       	ldd	r26, Y+2	; 0x02
    2da8:	b9 81       	ldd	r27, Y+1	; 0x01
    2daa:	ce 0f       	add	r28, r30
    2dac:	d1 1d       	adc	r29, r1
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	f8 94       	cli
    2db2:	de bf       	out	0x3e, r29	; 62
    2db4:	0f be       	out	0x3f, r0	; 63
    2db6:	cd bf       	out	0x3d, r28	; 61
    2db8:	ed 01       	movw	r28, r26
    2dba:	08 95       	ret

00002dbc <strcmp>:
    2dbc:	fb 01       	movw	r30, r22
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	8d 91       	ld	r24, X+
    2dc2:	01 90       	ld	r0, Z+
    2dc4:	80 19       	sub	r24, r0
    2dc6:	01 10       	cpse	r0, r1
    2dc8:	d9 f3       	breq	.-10     	; 0x2dc0 <strcmp+0x4>
    2dca:	99 0b       	sbc	r25, r25
    2dcc:	08 95       	ret

00002dce <_exit>:
    2dce:	f8 94       	cli

00002dd0 <__stop_program>:
    2dd0:	ff cf       	rjmp	.-2      	; 0x2dd0 <__stop_program>
