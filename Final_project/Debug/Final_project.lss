
Final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  00800060  00002b36  00002bca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  00800100  00800100  00002c6a  2**0
                  ALLOC
  3 .stab         00002ff4  00000000  00000000  00002c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001655  00000000  00000000  00005c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000072b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000073f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007565  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000091ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ae48  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000afa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b235  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ba03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 30       	cpi	r26, 0x00	; 0
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 33       	cpi	r26, 0x39	; 57
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 61 12 	call	0x24c2	; 0x24c2 <main>
      8a:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ee       	ldi	r26, 0xE7	; 231
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ee       	ldi	r24, 0xE7	; 231
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 69 15 	jmp	0x2ad2	; 0x2ad2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 85 15 	jmp	0x2b0a	; 0x2b0a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <USART_voidInit>:
#include "USART_INTERFACE.h"
#include "USART_RIGSTER.h"
#include "USART_PRIVET.h"

void USART_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	/*set BUAD rate*/
	CLR_BIT(UCSRA,UCSRA_U2X);
     b50:	ab e2       	ldi	r26, 0x2B	; 43
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	eb e2       	ldi	r30, 0x2B	; 43
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	8d 7f       	andi	r24, 0xFD	; 253
     b5c:	8c 93       	st	X, r24
	UBRRL=51;
     b5e:	e9 e2       	ldi	r30, 0x29	; 41
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	83 e3       	ldi	r24, 0x33	; 51
     b64:	80 83       	st	Z, r24

	u8 Local_u8Value=0;
     b66:	19 82       	std	Y+1, r1	; 0x01
	/*Using UCSRC register*/
	SET_BIT(Local_u8Value,UCSRC_URSEL);
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	80 68       	ori	r24, 0x80	; 128
     b6c:	89 83       	std	Y+1, r24	; 0x01

	//*Asynchronous*/
	CLR_BIT(Local_u8Value,UCSRC_UMSEL);
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	8f 7b       	andi	r24, 0xBF	; 191
     b72:	89 83       	std	Y+1, r24	; 0x01
	/*no parity*/
	CLR_BIT(Local_u8Value,UCSRC_UPM1);
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	8f 7d       	andi	r24, 0xDF	; 223
     b78:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8Value,UCSRC_UPM0);
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	8f 7e       	andi	r24, 0xEF	; 239
     b7e:	89 83       	std	Y+1, r24	; 0x01


	/**one stop bit*/
	CLR_BIT(Local_u8Value,UCSRC_USBS);
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	87 7f       	andi	r24, 0xF7	; 247
     b84:	89 83       	std	Y+1, r24	; 0x01

	/*on char size 8-bit mode*/
	SET_BIT(Local_u8Value,UCSRC_UCSZ1);
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	84 60       	ori	r24, 0x04	; 4
     b8a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8Value,UCSRC_UCSZ0);
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	82 60       	ori	r24, 0x02	; 2
     b90:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
     b92:	aa e2       	ldi	r26, 0x2A	; 42
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	ea e2       	ldi	r30, 0x2A	; 42
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	8b 7f       	andi	r24, 0xFB	; 251
     b9e:	8c 93       	st	X, r24

	UCSRC=Local_u8Value;
     ba0:	e0 e4       	ldi	r30, 0x40	; 64
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	80 83       	st	Z, r24

	SET_BIT(UCSRB,UCSRB_TXEN);    //transmitter enable
     ba8:	aa e2       	ldi	r26, 0x2A	; 42
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	ea e2       	ldi	r30, 0x2A	; 42
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	88 60       	ori	r24, 0x08	; 8
     bb4:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_RXEN);    //receiver   enable
     bb6:	aa e2       	ldi	r26, 0x2A	; 42
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	ea e2       	ldi	r30, 0x2A	; 42
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	80 61       	ori	r24, 0x10	; 16
     bc2:	8c 93       	st	X, r24

}
     bc4:	0f 90       	pop	r0
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret

00000bcc <USART_u8Read>:



u8 USART_u8Read()
{
     bcc:	df 93       	push	r29
     bce:	cf 93       	push	r28
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,UCSRA_RXC)==0);
     bd4:	eb e2       	ldi	r30, 0x2B	; 43
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	88 23       	and	r24, r24
     bdc:	dc f7       	brge	.-10     	; 0xbd4 <USART_u8Read+0x8>
	return UDR;
     bde:	ec e2       	ldi	r30, 0x2C	; 44
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
}
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	08 95       	ret

00000bea <USART_voidSend>:

void USART_voidSend(u8 Copy_data)
{
     bea:	df 93       	push	r29
     bec:	cf 93       	push	r28
     bee:	0f 92       	push	r0
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UCSRA_UDRE)==0);
     bf6:	eb e2       	ldi	r30, 0x2B	; 43
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	82 95       	swap	r24
     bfe:	86 95       	lsr	r24
     c00:	87 70       	andi	r24, 0x07	; 7
     c02:	88 2f       	mov	r24, r24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	81 70       	andi	r24, 0x01	; 1
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	00 97       	sbiw	r24, 0x00	; 0
     c0c:	a1 f3       	breq	.-24     	; 0xbf6 <USART_voidSend+0xc>
	UDR=Copy_data;
     c0e:	ec e2       	ldi	r30, 0x2C	; 44
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	80 83       	st	Z, r24

}
     c16:	0f 90       	pop	r0
     c18:	cf 91       	pop	r28
     c1a:	df 91       	pop	r29
     c1c:	08 95       	ret

00000c1e <USART_SendString>:

void USART_SendString(u8* Copy_data)
{
     c1e:	df 93       	push	r29
     c20:	cf 93       	push	r28
     c22:	00 d0       	rcall	.+0      	; 0xc24 <USART_SendString+0x6>
     c24:	0f 92       	push	r0
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	9b 83       	std	Y+3, r25	; 0x03
     c2c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
     c2e:	19 82       	std	Y+1, r1	; 0x01
     c30:	0e c0       	rjmp	.+28     	; 0xc4e <USART_SendString+0x30>
	while(Copy_data[i]!='\0')
	{
		USART_voidSend(Copy_data[i]);
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	9b 81       	ldd	r25, Y+3	; 0x03
     c3c:	fc 01       	movw	r30, r24
     c3e:	e2 0f       	add	r30, r18
     c40:	f3 1f       	adc	r31, r19
     c42:	80 81       	ld	r24, Z
     c44:	0e 94 f5 05 	call	0xbea	; 0xbea <USART_voidSend>
		i++;
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	8f 5f       	subi	r24, 0xFF	; 255
     c4c:	89 83       	std	Y+1, r24	; 0x01
}

void USART_SendString(u8* Copy_data)
{
	u8 i=0;
	while(Copy_data[i]!='\0')
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	9b 81       	ldd	r25, Y+3	; 0x03
     c58:	fc 01       	movw	r30, r24
     c5a:	e2 0f       	add	r30, r18
     c5c:	f3 1f       	adc	r31, r19
     c5e:	80 81       	ld	r24, Z
     c60:	88 23       	and	r24, r24
     c62:	39 f7       	brne	.-50     	; 0xc32 <USART_SendString+0x14>
	{
		USART_voidSend(Copy_data[i]);
		i++;
	}
}
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	cf 91       	pop	r28
     c6c:	df 91       	pop	r29
     c6e:	08 95       	ret

00000c70 <USART_ReciveString>:

u8* USART_ReciveString()
{
     c70:	df 93       	push	r29
     c72:	cf 93       	push	r28
     c74:	00 d0       	rcall	.+0      	; 0xc76 <USART_ReciveString+0x6>
     c76:	00 d0       	rcall	.+0      	; 0xc78 <USART_ReciveString+0x8>
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
	static u8 string[50]={0};
	for(u8 i=0;i<50;i++){string[i]=0;}			//reset the arr
     c7c:	19 82       	std	Y+1, r1	; 0x01
     c7e:	0a c0       	rjmp	.+20     	; 0xc94 <USART_ReciveString+0x24>
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	88 2f       	mov	r24, r24
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	fc 01       	movw	r30, r24
     c88:	e0 50       	subi	r30, 0x00	; 0
     c8a:	ff 4f       	sbci	r31, 0xFF	; 255
     c8c:	10 82       	st	Z, r1
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	8f 5f       	subi	r24, 0xFF	; 255
     c92:	89 83       	std	Y+1, r24	; 0x01
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	82 33       	cpi	r24, 0x32	; 50
     c98:	98 f3       	brcs	.-26     	; 0xc80 <USART_ReciveString+0x10>

	u8 flag=0,i=0;										//counter
     c9a:	1c 82       	std	Y+4, r1	; 0x04
     c9c:	1b 82       	std	Y+3, r1	; 0x03
	u8 x=USART_u8Read();					//to chick if Enter is get first
     c9e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <USART_u8Read>
     ca2:	8a 83       	std	Y+2, r24	; 0x02
     ca4:	2a c0       	rjmp	.+84     	; 0xcfa <USART_ReciveString+0x8a>
	while(x !=0x0D)								//Enter hex represintaion
	{
		string[i]=x;
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	88 2f       	mov	r24, r24
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	fc 01       	movw	r30, r24
     cae:	e0 50       	subi	r30, 0x00	; 0
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	80 83       	st	Z, r24
		x=USART_u8Read();
     cb6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <USART_u8Read>
     cba:	8a 83       	std	Y+2, r24	; 0x02
		i++;
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	8f 5f       	subi	r24, 0xFF	; 255
     cc0:	8b 83       	std	Y+3, r24	; 0x03

		if(x==0x08)							//delete hex represintaion
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	88 30       	cpi	r24, 0x08	; 8
     cc6:	91 f4       	brne	.+36     	; 0xcec <USART_ReciveString+0x7c>
		{
			i-=2;
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	82 50       	subi	r24, 0x02	; 2
     ccc:	8b 83       	std	Y+3, r24	; 0x03
			x=USART_u8Read();
     cce:	0e 94 e6 05 	call	0xbcc	; 0xbcc <USART_u8Read>
     cd2:	8a 83       	std	Y+2, r24	; 0x02
     cd4:	08 c0       	rjmp	.+16     	; 0xce6 <USART_ReciveString+0x76>
			while(x==0x08)
			{
				i--;
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	81 50       	subi	r24, 0x01	; 1
     cda:	8b 83       	std	Y+3, r24	; 0x03
				x=USART_u8Read();
     cdc:	0e 94 e6 05 	call	0xbcc	; 0xbcc <USART_u8Read>
     ce0:	8a 83       	std	Y+2, r24	; 0x02
				flag=1;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	8c 83       	std	Y+4, r24	; 0x04

		if(x==0x08)							//delete hex represintaion
		{
			i-=2;
			x=USART_u8Read();
			while(x==0x08)
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	88 30       	cpi	r24, 0x08	; 8
     cea:	a9 f3       	breq	.-22     	; 0xcd6 <USART_ReciveString+0x66>
				x=USART_u8Read();
				flag=1;
			}

		}
		if(flag==1){i++;flag=0;}
     cec:	8c 81       	ldd	r24, Y+4	; 0x04
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	21 f4       	brne	.+8      	; 0xcfa <USART_ReciveString+0x8a>
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	8f 5f       	subi	r24, 0xFF	; 255
     cf6:	8b 83       	std	Y+3, r24	; 0x03
     cf8:	1c 82       	std	Y+4, r1	; 0x04
	static u8 string[50]={0};
	for(u8 i=0;i<50;i++){string[i]=0;}			//reset the arr

	u8 flag=0,i=0;										//counter
	u8 x=USART_u8Read();					//to chick if Enter is get first
	while(x !=0x0D)								//Enter hex represintaion
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	8d 30       	cpi	r24, 0x0D	; 13
     cfe:	99 f6       	brne	.-90     	; 0xca6 <USART_ReciveString+0x36>
     d00:	0a c0       	rjmp	.+20     	; 0xd16 <USART_ReciveString+0xa6>

		}
		if(flag==1){i++;flag=0;}
	}

	for(;i<50;i++){string[i]=0;}
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	88 2f       	mov	r24, r24
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	fc 01       	movw	r30, r24
     d0a:	e0 50       	subi	r30, 0x00	; 0
     d0c:	ff 4f       	sbci	r31, 0xFF	; 255
     d0e:	10 82       	st	Z, r1
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	8f 5f       	subi	r24, 0xFF	; 255
     d14:	8b 83       	std	Y+3, r24	; 0x03
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	82 33       	cpi	r24, 0x32	; 50
     d1a:	98 f3       	brcs	.-26     	; 0xd02 <USART_ReciveString+0x92>
	return string;
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	91 e0       	ldi	r25, 0x01	; 1
}
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <time_for_1ms>:
static u16 ms=0;



static void time_for_1ms()
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
	static u8 counter=0;
	counter++;
     d36:	80 91 38 01 	lds	r24, 0x0138
     d3a:	8f 5f       	subi	r24, 0xFF	; 255
     d3c:	80 93 38 01 	sts	0x0138, r24
	if(counter == 4)
     d40:	80 91 38 01 	lds	r24, 0x0138
     d44:	84 30       	cpi	r24, 0x04	; 4
     d46:	79 f4       	brne	.+30     	; 0xd66 <time_for_1ms+0x38>
	{
		counter=0;
     d48:	10 92 38 01 	sts	0x0138, r1
		ms++;
     d4c:	80 91 36 01 	lds	r24, 0x0136
     d50:	90 91 37 01 	lds	r25, 0x0137
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	90 93 37 01 	sts	0x0137, r25
     d5a:	80 93 36 01 	sts	0x0136, r24
		TCNT0=20;
     d5e:	e2 e5       	ldi	r30, 0x52	; 82
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	84 e1       	ldi	r24, 0x14	; 20
     d64:	80 83       	st	Z, r24
	}
}
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <Timer_init>:

void Timer_init()
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,TCCR0_WGM00);
#elif Mode == CTC
	SET_BIT(TCCR0,TCCR0_WGM01);
	CLR_BIT(TCCR0,TCCR0_WGM00);
#elif Mode == Fast_PWM
	SET_BIT(TCCR0,TCCR0_WGM01);
     d74:	a3 e5       	ldi	r26, 0x53	; 83
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e3 e5       	ldi	r30, 0x53	; 83
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	88 60       	ori	r24, 0x08	; 8
     d80:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM00);
     d82:	a3 e5       	ldi	r26, 0x53	; 83
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e3 e5       	ldi	r30, 0x53	; 83
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	80 64       	ori	r24, 0x40	; 64
     d8e:	8c 93       	st	X, r24
	TIMER0_FastPwmMode(NonInvertingMode);
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	0e 94 ee 06 	call	0xddc	; 0xddc <TIMER0_FastPwmMode>
#elif CLOCK == presquler_8
	CLR_BIT(TCCR0,TCCR0_CS02);
	SET_BIT(TCCR0,TCCR0_CS01);
	CLR_BIT(TCCR0,TCCR0_CS00);
#elif CLOCK == presquler_64
	CLR_BIT(TCCR0,TCCR0_CS02);
     d96:	a3 e5       	ldi	r26, 0x53	; 83
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e3 e5       	ldi	r30, 0x53	; 83
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	8b 7f       	andi	r24, 0xFB	; 251
     da2:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
     da4:	a3 e5       	ldi	r26, 0x53	; 83
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e3 e5       	ldi	r30, 0x53	; 83
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	82 60       	ori	r24, 0x02	; 2
     db0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS00);
     db2:	a3 e5       	ldi	r26, 0x53	; 83
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e3 e5       	ldi	r30, 0x53	; 83
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	81 60       	ori	r24, 0x01	; 1
     dbe:	8c 93       	st	X, r24


#endif

	/*Output compara mach interuput enable*/
	SET_BIT(TIMSK,TIMSK_OCIE0);
     dc0:	a9 e5       	ldi	r26, 0x59	; 89
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e9 e5       	ldi	r30, 0x59	; 89
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	82 60       	ori	r24, 0x02	; 2
     dcc:	8c 93       	st	X, r24


	/*Set compare mach value*/
	OCR0=75;
     dce:	ec e5       	ldi	r30, 0x5C	; 92
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	8b e4       	ldi	r24, 0x4B	; 75
     dd4:	80 83       	st	Z, r24
}
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <TIMER0_FastPwmMode>:

void TIMER0_FastPwmMode(u8 FAST_PWM_MODE)
{
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	0f 92       	push	r0
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	89 83       	std	Y+1, r24	; 0x01
	if(FAST_PWM_MODE ==NonInvertingMode)
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	81 30       	cpi	r24, 0x01	; 1
     dec:	79 f4       	brne	.+30     	; 0xe0c <TIMER0_FastPwmMode+0x30>
	{
		SET_BIT(TCCR0,TCCR0_COM01);
     dee:	a3 e5       	ldi	r26, 0x53	; 83
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e3 e5       	ldi	r30, 0x53	; 83
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	80 62       	ori	r24, 0x20	; 32
     dfa:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_COM00);
     dfc:	a3 e5       	ldi	r26, 0x53	; 83
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e3 e5       	ldi	r30, 0x53	; 83
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	8f 7e       	andi	r24, 0xEF	; 239
     e08:	8c 93       	st	X, r24
     e0a:	11 c0       	rjmp	.+34     	; 0xe2e <TIMER0_FastPwmMode+0x52>
	}
	else if(FAST_PWM_MODE ==InvertingMode)
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	71 f4       	brne	.+28     	; 0xe2e <TIMER0_FastPwmMode+0x52>
	{
		SET_BIT(TCCR0,TCCR0_COM01);
     e12:	a3 e5       	ldi	r26, 0x53	; 83
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e3 e5       	ldi	r30, 0x53	; 83
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	80 62       	ori	r24, 0x20	; 32
     e1e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM00);
     e20:	a3 e5       	ldi	r26, 0x53	; 83
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e3 e5       	ldi	r30, 0x53	; 83
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	80 61       	ori	r24, 0x10	; 16
     e2c:	8c 93       	st	X, r24
	}
}
     e2e:	0f 90       	pop	r0
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <TIMER_OC0State>:

void TIMER_OC0State()
{
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
#if OC0State ==  disconnected
	CLR_BIT(TCCR0,TCCR0_COM01);
	CLR_BIT(TCCR0,TCCR0_COM00);
#elif OC0State == Toggle
	CLR_BIT(TCCR0,TCCR0_COM01);
     e3e:	a3 e5       	ldi	r26, 0x53	; 83
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e3 e5       	ldi	r30, 0x53	; 83
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	8f 7d       	andi	r24, 0xDF	; 223
     e4a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_COM00);
     e4c:	a3 e5       	ldi	r26, 0x53	; 83
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e3 e5       	ldi	r30, 0x53	; 83
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	80 61       	ori	r24, 0x10	; 16
     e58:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_COM01);
	SET_BIT(TCCR0,TCCR0_COM00);
#else
#error "Warning :OC0State is not correct "
#endif
}
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <TIMER_SetOCR0TO>:
void TIMER_SetOCR0TO(u8 num)
{
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	0f 92       	push	r0
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	89 83       	std	Y+1, r24	; 0x01
	OCR0=num;
     e6c:	ec e5       	ldi	r30, 0x5C	; 92
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	80 83       	st	Z, r24
}
     e74:	0f 90       	pop	r0
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <TIMER_SetTCNT0TO>:
void TIMER_SetTCNT0TO(u8 num)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	0f 92       	push	r0
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=num;
     e88:	e2 e5       	ldi	r30, 0x52	; 82
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	80 83       	st	Z, r24
}
     e90:	0f 90       	pop	r0
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <TIMER_delay_ms>:

void TIMER_delay_ms(u16 time_ms)
{
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <TIMER_delay_ms+0x6>
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	9a 83       	std	Y+2, r25	; 0x02
     ea4:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(TCCR0,TCCR0_CS01);
		CLR_BIT(TCCR0,TCCR0_CS00);

	 * **/

	GIE_voidEnable();
     ea6:	0e 94 df 08 	call	0x11be	; 0x11be <GIE_voidEnable>
	/*To Enable Interubt*/
	TCCR0 |=0b00000010;
     eaa:	a3 e5       	ldi	r26, 0x53	; 83
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e3 e5       	ldi	r30, 0x53	; 83
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	82 60       	ori	r24, 0x02	; 2
     eb6:	8c 93       	st	X, r24
	TCNT0=20;
     eb8:	e2 e5       	ldi	r30, 0x52	; 82
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	84 e1       	ldi	r24, 0x14	; 20
     ebe:	80 83       	st	Z, r24
	TIMER_SetCallBack(&time_for_1ms);
     ec0:	87 e9       	ldi	r24, 0x97	; 151
     ec2:	96 e0       	ldi	r25, 0x06	; 6
     ec4:	0e 94 7d 07 	call	0xefa	; 0xefa <TIMER_SetCallBack>

	/*Enable overflow interupt*/
	SET_BIT(TIMSK,TIMSK_TOIE0);
     ec8:	a9 e5       	ldi	r26, 0x59	; 89
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e9 e5       	ldi	r30, 0x59	; 89
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	81 60       	ori	r24, 0x01	; 1
     ed4:	8c 93       	st	X, r24

	while(ms != time_ms)
     ed6:	20 91 36 01 	lds	r18, 0x0136
     eda:	30 91 37 01 	lds	r19, 0x0137
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	9a 81       	ldd	r25, Y+2	; 0x02
     ee2:	28 17       	cp	r18, r24
     ee4:	39 07       	cpc	r19, r25
     ee6:	b9 f7       	brne	.-18     	; 0xed6 <TIMER_delay_ms+0x3e>
	{}
	ms =0;
     ee8:	10 92 37 01 	sts	0x0137, r1
     eec:	10 92 36 01 	sts	0x0136, r1
}
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <TIMER_SetCallBack>:




u8 TIMER_SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	00 d0       	rcall	.+0      	; 0xf00 <TIMER_SetCallBack+0x6>
     f00:	0f 92       	push	r0
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	9b 83       	std	Y+3, r25	; 0x03
     f08:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStauts=OK;
     f0a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc != NULL)
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	9b 81       	ldd	r25, Y+3	; 0x03
     f10:	00 97       	sbiw	r24, 0x00	; 0
     f12:	31 f0       	breq	.+12     	; 0xf20 <TIMER_SetCallBack+0x26>
	{
		TIMER0_pvCallBackFunc=Copy_pvCallBackFunc;
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	9b 81       	ldd	r25, Y+3	; 0x03
     f18:	90 93 33 01 	sts	0x0133, r25
     f1c:	80 93 32 01 	sts	0x0132, r24
	}
	else
	{

	}
	return Local_u8ErrorStauts;
     f20:	89 81       	ldd	r24, Y+1	; 0x01
}
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <ICU_Init>:

void ICU_Init()
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62

	///**Set to rising eddge*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
     f36:	ae e4       	ldi	r26, 0x4E	; 78
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	ee e4       	ldi	r30, 0x4E	; 78
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	80 64       	ori	r24, 0x40	; 64
     f42:	8c 93       	st	X, r24
	/*Enable interupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
     f44:	a9 e5       	ldi	r26, 0x59	; 89
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e9 e5       	ldi	r30, 0x59	; 89
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	80 62       	ori	r24, 0x20	; 32
     f50:	8c 93       	st	X, r24


}
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	08 95       	ret

00000f58 <ICU_SetEdge>:

void ICU_SetEdge(u8 Edge)
{
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	0f 92       	push	r0
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	89 83       	std	Y+1, r24	; 0x01
	if(Edge==ICU_RISING_EDGE)
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	41 f4       	brne	.+16     	; 0xf7a <ICU_SetEdge+0x22>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
     f6a:	ae e4       	ldi	r26, 0x4E	; 78
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	ee e4       	ldi	r30, 0x4E	; 78
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	80 64       	ori	r24, 0x40	; 64
     f76:	8c 93       	st	X, r24
     f78:	0a c0       	rjmp	.+20     	; 0xf8e <ICU_SetEdge+0x36>
	}
	else if(Edge==ICU_FALLING_EDGE)
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	82 30       	cpi	r24, 0x02	; 2
     f7e:	39 f4       	brne	.+14     	; 0xf8e <ICU_SetEdge+0x36>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
     f80:	ae e4       	ldi	r26, 0x4E	; 78
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	ee e4       	ldi	r30, 0x4E	; 78
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	8f 7b       	andi	r24, 0xBF	; 191
     f8c:	8c 93       	st	X, r24
	}

}
     f8e:	0f 90       	pop	r0
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <ICU_EnableIntrupt>:

void ICU_EnableIntrupt()
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
     f9e:	a9 e5       	ldi	r26, 0x59	; 89
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e9 e5       	ldi	r30, 0x59	; 89
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 62       	ori	r24, 0x20	; 32
     faa:	8c 93       	st	X, r24
}
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <ICU_DisableIntrupt>:

void ICU_DisableIntrupt()
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
     fba:	a9 e5       	ldi	r26, 0x59	; 89
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e9 e5       	ldi	r30, 0x59	; 89
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8f 7d       	andi	r24, 0xDF	; 223
     fc6:	8c 93       	st	X, r24
}
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <ICU_ReadICU>:

u16 ICU_ReadICU()
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     fd6:	e6 e4       	ldi	r30, 0x46	; 70
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	91 81       	ldd	r25, Z+1	; 0x01
}
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <ICU_SetCallBack>:

u8 ICU_SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	00 d0       	rcall	.+0      	; 0xfea <ICU_SetCallBack+0x6>
     fea:	0f 92       	push	r0
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	9b 83       	std	Y+3, r25	; 0x03
     ff2:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ErrorStauts=OK;
     ff4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc!=NULL)
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	9b 81       	ldd	r25, Y+3	; 0x03
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	39 f0       	breq	.+14     	; 0x100c <ICU_SetCallBack+0x28>
	{
		ICU_pvCallBackFunc=Copy_pvCallBackFunc;
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	9b 81       	ldd	r25, Y+3	; 0x03
    1002:	90 93 35 01 	sts	0x0135, r25
    1006:	80 93 34 01 	sts	0x0134, r24
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <ICU_SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStauts=NOT_OK;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStauts;
    1010:	89 81       	ldd	r24, Y+1	; 0x01

}
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <__vector_11>:

void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
    101e:	1f 92       	push	r1
    1020:	0f 92       	push	r0
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	0f 92       	push	r0
    1026:	11 24       	eor	r1, r1
    1028:	2f 93       	push	r18
    102a:	3f 93       	push	r19
    102c:	4f 93       	push	r20
    102e:	5f 93       	push	r21
    1030:	6f 93       	push	r22
    1032:	7f 93       	push	r23
    1034:	8f 93       	push	r24
    1036:	9f 93       	push	r25
    1038:	af 93       	push	r26
    103a:	bf 93       	push	r27
    103c:	ef 93       	push	r30
    103e:	ff 93       	push	r31
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL)
    1048:	80 91 32 01 	lds	r24, 0x0132
    104c:	90 91 33 01 	lds	r25, 0x0133
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	29 f0       	breq	.+10     	; 0x105e <__vector_11+0x40>
	{
		TIMER0_pvCallBackFunc();
    1054:	e0 91 32 01 	lds	r30, 0x0132
    1058:	f0 91 33 01 	lds	r31, 0x0133
    105c:	09 95       	icall
	}

}
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	ff 91       	pop	r31
    1064:	ef 91       	pop	r30
    1066:	bf 91       	pop	r27
    1068:	af 91       	pop	r26
    106a:	9f 91       	pop	r25
    106c:	8f 91       	pop	r24
    106e:	7f 91       	pop	r23
    1070:	6f 91       	pop	r22
    1072:	5f 91       	pop	r21
    1074:	4f 91       	pop	r20
    1076:	3f 91       	pop	r19
    1078:	2f 91       	pop	r18
    107a:	0f 90       	pop	r0
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	0f 90       	pop	r0
    1080:	1f 90       	pop	r1
    1082:	18 95       	reti

00001084 <Timer1_init>:
/////////////////////////////////////////////////////////////////
void Timer1_init()
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
	/*Fast PWM non-inverting mode*/
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    108c:	af e4       	ldi	r26, 0x4F	; 79
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	ef e4       	ldi	r30, 0x4F	; 79
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	80 68       	ori	r24, 0x80	; 128
    1098:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    109a:	af e4       	ldi	r26, 0x4F	; 79
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	ef e4       	ldi	r30, 0x4F	; 79
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	8f 7b       	andi	r24, 0xBF	; 191
    10a6:	8c 93       	st	X, r24

	/*Set to fast PWM mode*/
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    10a8:	af e4       	ldi	r26, 0x4F	; 79
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	ef e4       	ldi	r30, 0x4F	; 79
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	8e 7f       	andi	r24, 0xFE	; 254
    10b4:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    10b6:	af e4       	ldi	r26, 0x4F	; 79
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	ef e4       	ldi	r30, 0x4F	; 79
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	82 60       	ori	r24, 0x02	; 2
    10c2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    10c4:	ae e4       	ldi	r26, 0x4E	; 78
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	ee e4       	ldi	r30, 0x4E	; 78
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	88 60       	ori	r24, 0x08	; 8
    10d0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    10d2:	ae e4       	ldi	r26, 0x4E	; 78
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	ee e4       	ldi	r30, 0x4E	; 78
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	80 61       	ori	r24, 0x10	; 16
    10de:	8c 93       	st	X, r24

	/*Set Clock*/
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    10e0:	ae e4       	ldi	r26, 0x4E	; 78
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	ee e4       	ldi	r30, 0x4E	; 78
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8e 7f       	andi	r24, 0xFE	; 254
    10ec:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    10ee:	ae e4       	ldi	r26, 0x4E	; 78
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	ee e4       	ldi	r30, 0x4E	; 78
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	8b 7f       	andi	r24, 0xFB	; 251
    10fa:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    10fc:	ae e4       	ldi	r26, 0x4E	; 78
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	ee e4       	ldi	r30, 0x4E	; 78
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	82 60       	ori	r24, 0x02	; 2
    1108:	8c 93       	st	X, r24

}
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <Timer1_SetICR>:


void Timer1_SetICR(u16 Copy_data)
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	00 d0       	rcall	.+0      	; 0x1116 <Timer1_SetICR+0x6>
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	9a 83       	std	Y+2, r25	; 0x02
    111c:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_data;
    111e:	e6 e4       	ldi	r30, 0x46	; 70
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	9a 81       	ldd	r25, Y+2	; 0x02
    1126:	91 83       	std	Z+1, r25	; 0x01
    1128:	80 83       	st	Z, r24
	}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <Timer1_SetChannelACompaermach>:

void Timer1_SetChannelACompaermach(u16 Copy_data)
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	00 d0       	rcall	.+0      	; 0x113a <Timer1_SetChannelACompaermach+0x6>
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	9a 83       	std	Y+2, r25	; 0x02
    1140:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_data;
    1142:	ea e4       	ldi	r30, 0x4A	; 74
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	9a 81       	ldd	r25, Y+2	; 0x02
    114a:	91 83       	std	Z+1, r25	; 0x01
    114c:	80 83       	st	Z, r24
}
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <__vector_6>:
////////////////////////////////////////////////////////////////


void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    1158:	1f 92       	push	r1
    115a:	0f 92       	push	r0
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	0f 92       	push	r0
    1160:	11 24       	eor	r1, r1
    1162:	2f 93       	push	r18
    1164:	3f 93       	push	r19
    1166:	4f 93       	push	r20
    1168:	5f 93       	push	r21
    116a:	6f 93       	push	r22
    116c:	7f 93       	push	r23
    116e:	8f 93       	push	r24
    1170:	9f 93       	push	r25
    1172:	af 93       	push	r26
    1174:	bf 93       	push	r27
    1176:	ef 93       	push	r30
    1178:	ff 93       	push	r31
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
	if(ICU_pvCallBackFunc != NULL)
    1182:	80 91 34 01 	lds	r24, 0x0134
    1186:	90 91 35 01 	lds	r25, 0x0135
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	29 f0       	breq	.+10     	; 0x1198 <__vector_6+0x40>
	{
		ICU_pvCallBackFunc();
    118e:	e0 91 34 01 	lds	r30, 0x0134
    1192:	f0 91 35 01 	lds	r31, 0x0135
    1196:	09 95       	icall
	}

}
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	ff 91       	pop	r31
    119e:	ef 91       	pop	r30
    11a0:	bf 91       	pop	r27
    11a2:	af 91       	pop	r26
    11a4:	9f 91       	pop	r25
    11a6:	8f 91       	pop	r24
    11a8:	7f 91       	pop	r23
    11aa:	6f 91       	pop	r22
    11ac:	5f 91       	pop	r21
    11ae:	4f 91       	pop	r20
    11b0:	3f 91       	pop	r19
    11b2:	2f 91       	pop	r18
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	0f 90       	pop	r0
    11ba:	1f 90       	pop	r1
    11bc:	18 95       	reti

000011be <GIE_voidEnable>:
#include "GIE_PRIVET.h"



void GIE_voidEnable(void)
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    11c6:	af e5       	ldi	r26, 0x5F	; 95
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	ef e5       	ldi	r30, 0x5F	; 95
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	80 68       	ori	r24, 0x80	; 128
    11d2:	8c 93       	st	X, r24
	}
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <GIE_voidDesable>:
void GIE_voidDesable(void)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    11e2:	af e5       	ldi	r26, 0x5F	; 95
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	ef e5       	ldi	r30, 0x5F	; 95
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	8f 77       	andi	r24, 0x7F	; 127
    11ee:	8c 93       	st	X, r24
	}
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <DIO_SetPinDirection>:
#include "DIO_INTERFACE.h"



void DIO_SetPinDirection(u8 Port , u8 Pin , u8 Direction)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <DIO_SetPinDirection+0x6>
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <DIO_SetPinDirection+0x8>
    11fe:	0f 92       	push	r0
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	6a 83       	std	Y+2, r22	; 0x02
    1208:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	3d 83       	std	Y+5, r19	; 0x05
    1212:	2c 83       	std	Y+4, r18	; 0x04
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	9d 81       	ldd	r25, Y+5	; 0x05
    1218:	81 30       	cpi	r24, 0x01	; 1
    121a:	91 05       	cpc	r25, r1
    121c:	09 f4       	brne	.+2      	; 0x1220 <DIO_SetPinDirection+0x2a>
    121e:	47 c0       	rjmp	.+142    	; 0x12ae <DIO_SetPinDirection+0xb8>
    1220:	2c 81       	ldd	r18, Y+4	; 0x04
    1222:	3d 81       	ldd	r19, Y+5	; 0x05
    1224:	22 30       	cpi	r18, 0x02	; 2
    1226:	31 05       	cpc	r19, r1
    1228:	2c f4       	brge	.+10     	; 0x1234 <DIO_SetPinDirection+0x3e>
    122a:	8c 81       	ldd	r24, Y+4	; 0x04
    122c:	9d 81       	ldd	r25, Y+5	; 0x05
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	71 f0       	breq	.+28     	; 0x124e <DIO_SetPinDirection+0x58>
    1232:	cb c0       	rjmp	.+406    	; 0x13ca <DIO_SetPinDirection+0x1d4>
    1234:	2c 81       	ldd	r18, Y+4	; 0x04
    1236:	3d 81       	ldd	r19, Y+5	; 0x05
    1238:	22 30       	cpi	r18, 0x02	; 2
    123a:	31 05       	cpc	r19, r1
    123c:	09 f4       	brne	.+2      	; 0x1240 <DIO_SetPinDirection+0x4a>
    123e:	67 c0       	rjmp	.+206    	; 0x130e <DIO_SetPinDirection+0x118>
    1240:	8c 81       	ldd	r24, Y+4	; 0x04
    1242:	9d 81       	ldd	r25, Y+5	; 0x05
    1244:	83 30       	cpi	r24, 0x03	; 3
    1246:	91 05       	cpc	r25, r1
    1248:	09 f4       	brne	.+2      	; 0x124c <DIO_SetPinDirection+0x56>
    124a:	91 c0       	rjmp	.+290    	; 0x136e <DIO_SetPinDirection+0x178>
    124c:	be c0       	rjmp	.+380    	; 0x13ca <DIO_SetPinDirection+0x1d4>
	{
		case DIO_PORTA: 
		if(Direction == DIO_INPUT) 
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	88 23       	and	r24, r24
    1252:	a9 f4       	brne	.+42     	; 0x127e <DIO_SetPinDirection+0x88>
		{ 
			CLR_BIT(DDRA_REG,Pin);
    1254:	aa e3       	ldi	r26, 0x3A	; 58
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	ea e3       	ldi	r30, 0x3A	; 58
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 2e       	mov	r0, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <DIO_SetPinDirection+0x7c>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	0a 94       	dec	r0
    1274:	e2 f7       	brpl	.-8      	; 0x126e <DIO_SetPinDirection+0x78>
    1276:	80 95       	com	r24
    1278:	84 23       	and	r24, r20
    127a:	8c 93       	st	X, r24
    127c:	a6 c0       	rjmp	.+332    	; 0x13ca <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	09 f0       	breq	.+2      	; 0x1286 <DIO_SetPinDirection+0x90>
    1284:	a2 c0       	rjmp	.+324    	; 0x13ca <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRA_REG,Pin);
    1286:	aa e3       	ldi	r26, 0x3A	; 58
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	ea e3       	ldi	r30, 0x3A	; 58
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 2e       	mov	r0, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DIO_SetPinDirection+0xae>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <DIO_SetPinDirection+0xaa>
    12a8:	84 2b       	or	r24, r20
    12aa:	8c 93       	st	X, r24
    12ac:	8e c0       	rjmp	.+284    	; 0x13ca <DIO_SetPinDirection+0x1d4>
		}  
		break;
		case DIO_PORTB: 
		if(Direction == DIO_INPUT) 
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	88 23       	and	r24, r24
    12b2:	a9 f4       	brne	.+42     	; 0x12de <DIO_SetPinDirection+0xe8>
		{ 
			CLR_BIT(DDRB_REG,Pin);
    12b4:	a7 e3       	ldi	r26, 0x37	; 55
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e7 e3       	ldi	r30, 0x37	; 55
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_SetPinDirection+0xdc>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_SetPinDirection+0xd8>
    12d6:	80 95       	com	r24
    12d8:	84 23       	and	r24, r20
    12da:	8c 93       	st	X, r24
    12dc:	76 c0       	rjmp	.+236    	; 0x13ca <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <DIO_SetPinDirection+0xf0>
    12e4:	72 c0       	rjmp	.+228    	; 0x13ca <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRB_REG,Pin);
    12e6:	a7 e3       	ldi	r26, 0x37	; 55
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e7 e3       	ldi	r30, 0x37	; 55
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	48 2f       	mov	r20, r24
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 2e       	mov	r0, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <DIO_SetPinDirection+0x10e>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	0a 94       	dec	r0
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <DIO_SetPinDirection+0x10a>
    1308:	84 2b       	or	r24, r20
    130a:	8c 93       	st	X, r24
    130c:	5e c0       	rjmp	.+188    	; 0x13ca <DIO_SetPinDirection+0x1d4>
		}  
		break;
		case DIO_PORTC: 
		if(Direction == DIO_INPUT) 
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	88 23       	and	r24, r24
    1312:	a9 f4       	brne	.+42     	; 0x133e <DIO_SetPinDirection+0x148>
		{ 
			CLR_BIT(DDRC_REG,Pin);
    1314:	a4 e3       	ldi	r26, 0x34	; 52
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e4 e3       	ldi	r30, 0x34	; 52
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	48 2f       	mov	r20, r24
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 2e       	mov	r0, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <DIO_SetPinDirection+0x13c>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	0a 94       	dec	r0
    1334:	e2 f7       	brpl	.-8      	; 0x132e <DIO_SetPinDirection+0x138>
    1336:	80 95       	com	r24
    1338:	84 23       	and	r24, r20
    133a:	8c 93       	st	X, r24
    133c:	46 c0       	rjmp	.+140    	; 0x13ca <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	09 f0       	breq	.+2      	; 0x1346 <DIO_SetPinDirection+0x150>
    1344:	42 c0       	rjmp	.+132    	; 0x13ca <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRC_REG,Pin);
    1346:	a4 e3       	ldi	r26, 0x34	; 52
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e4 e3       	ldi	r30, 0x34	; 52
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	48 2f       	mov	r20, r24
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 2e       	mov	r0, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <DIO_SetPinDirection+0x16e>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	0a 94       	dec	r0
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <DIO_SetPinDirection+0x16a>
    1368:	84 2b       	or	r24, r20
    136a:	8c 93       	st	X, r24
    136c:	2e c0       	rjmp	.+92     	; 0x13ca <DIO_SetPinDirection+0x1d4>
		}  
		break;
		case DIO_PORTD: 
		if(Direction == DIO_INPUT) 
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	88 23       	and	r24, r24
    1372:	a9 f4       	brne	.+42     	; 0x139e <DIO_SetPinDirection+0x1a8>
		{ 
			CLR_BIT(DDRD_REG,Pin);
    1374:	a1 e3       	ldi	r26, 0x31	; 49
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e1 e3       	ldi	r30, 0x31	; 49
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <DIO_SetPinDirection+0x19c>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <DIO_SetPinDirection+0x198>
    1396:	80 95       	com	r24
    1398:	84 23       	and	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	16 c0       	rjmp	.+44     	; 0x13ca <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	99 f4       	brne	.+38     	; 0x13ca <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRD_REG,Pin);
    13a4:	a1 e3       	ldi	r26, 0x31	; 49
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e1 e3       	ldi	r30, 0x31	; 49
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 2e       	mov	r0, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <DIO_SetPinDirection+0x1cc>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <DIO_SetPinDirection+0x1c8>
    13c6:	84 2b       	or	r24, r20
    13c8:	8c 93       	st	X, r24
		default:
		// " Port or Pin or Direction not valid "
		break;
	}
	
}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <DIO_SetPinValue>:

void DIO_SetPinValue    (u8 Port , u8 Pin , u8 Value )
{
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <DIO_SetPinValue+0x6>
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <DIO_SetPinValue+0x8>
    13e2:	0f 92       	push	r0
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	89 83       	std	Y+1, r24	; 0x01
    13ea:	6a 83       	std	Y+2, r22	; 0x02
    13ec:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	3d 83       	std	Y+5, r19	; 0x05
    13f6:	2c 83       	std	Y+4, r18	; 0x04
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	9d 81       	ldd	r25, Y+5	; 0x05
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	91 05       	cpc	r25, r1
    1400:	09 f4       	brne	.+2      	; 0x1404 <DIO_SetPinValue+0x2a>
    1402:	47 c0       	rjmp	.+142    	; 0x1492 <DIO_SetPinValue+0xb8>
    1404:	2c 81       	ldd	r18, Y+4	; 0x04
    1406:	3d 81       	ldd	r19, Y+5	; 0x05
    1408:	22 30       	cpi	r18, 0x02	; 2
    140a:	31 05       	cpc	r19, r1
    140c:	2c f4       	brge	.+10     	; 0x1418 <DIO_SetPinValue+0x3e>
    140e:	8c 81       	ldd	r24, Y+4	; 0x04
    1410:	9d 81       	ldd	r25, Y+5	; 0x05
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	71 f0       	breq	.+28     	; 0x1432 <DIO_SetPinValue+0x58>
    1416:	cb c0       	rjmp	.+406    	; 0x15ae <DIO_SetPinValue+0x1d4>
    1418:	2c 81       	ldd	r18, Y+4	; 0x04
    141a:	3d 81       	ldd	r19, Y+5	; 0x05
    141c:	22 30       	cpi	r18, 0x02	; 2
    141e:	31 05       	cpc	r19, r1
    1420:	09 f4       	brne	.+2      	; 0x1424 <DIO_SetPinValue+0x4a>
    1422:	67 c0       	rjmp	.+206    	; 0x14f2 <DIO_SetPinValue+0x118>
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	9d 81       	ldd	r25, Y+5	; 0x05
    1428:	83 30       	cpi	r24, 0x03	; 3
    142a:	91 05       	cpc	r25, r1
    142c:	09 f4       	brne	.+2      	; 0x1430 <DIO_SetPinValue+0x56>
    142e:	91 c0       	rjmp	.+290    	; 0x1552 <DIO_SetPinValue+0x178>
    1430:	be c0       	rjmp	.+380    	; 0x15ae <DIO_SetPinValue+0x1d4>
	{
		case DIO_PORTA: 
		if(Value == DIO_HIGH)
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	a1 f4       	brne	.+40     	; 0x1460 <DIO_SetPinValue+0x86>
		{ 
			SET_BIT(PORTA_REG,Pin);
    1438:	ab e3       	ldi	r26, 0x3B	; 59
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	eb e3       	ldi	r30, 0x3B	; 59
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO_SetPinValue+0x7c>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DIO_SetPinValue+0x78>
    145a:	84 2b       	or	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	a7 c0       	rjmp	.+334    	; 0x15ae <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	88 23       	and	r24, r24
    1464:	09 f0       	breq	.+2      	; 0x1468 <DIO_SetPinValue+0x8e>
    1466:	a3 c0       	rjmp	.+326    	; 0x15ae <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTA_REG,Pin);
    1468:	ab e3       	ldi	r26, 0x3B	; 59
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	eb e3       	ldi	r30, 0x3B	; 59
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_SetPinValue+0xac>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_SetPinValue+0xa8>
    148a:	80 95       	com	r24
    148c:	84 23       	and	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	8e c0       	rjmp	.+284    	; 0x15ae <DIO_SetPinValue+0x1d4>
		}  
		break;
		case DIO_PORTB: 
		if(Value == DIO_HIGH)
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	a1 f4       	brne	.+40     	; 0x14c0 <DIO_SetPinValue+0xe6>
		{ 
			SET_BIT(PORTB_REG,Pin);
    1498:	a8 e3       	ldi	r26, 0x38	; 56
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e8 e3       	ldi	r30, 0x38	; 56
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	48 2f       	mov	r20, r24
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	02 2e       	mov	r0, r18
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <DIO_SetPinValue+0xdc>
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	0a 94       	dec	r0
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <DIO_SetPinValue+0xd8>
    14ba:	84 2b       	or	r24, r20
    14bc:	8c 93       	st	X, r24
    14be:	77 c0       	rjmp	.+238    	; 0x15ae <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	88 23       	and	r24, r24
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <DIO_SetPinValue+0xee>
    14c6:	73 c0       	rjmp	.+230    	; 0x15ae <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTB_REG,Pin);
    14c8:	a8 e3       	ldi	r26, 0x38	; 56
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e8 e3       	ldi	r30, 0x38	; 56
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	48 2f       	mov	r20, r24
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 2e       	mov	r0, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <DIO_SetPinValue+0x10c>
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	0a 94       	dec	r0
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <DIO_SetPinValue+0x108>
    14ea:	80 95       	com	r24
    14ec:	84 23       	and	r24, r20
    14ee:	8c 93       	st	X, r24
    14f0:	5e c0       	rjmp	.+188    	; 0x15ae <DIO_SetPinValue+0x1d4>
		}  
		break;
		case DIO_PORTC: 
		if(Value == DIO_HIGH)
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	a1 f4       	brne	.+40     	; 0x1520 <DIO_SetPinValue+0x146>
		{ 
			SET_BIT(PORTC_REG,Pin);
    14f8:	a5 e3       	ldi	r26, 0x35	; 53
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e5 e3       	ldi	r30, 0x35	; 53
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <DIO_SetPinValue+0x13c>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <DIO_SetPinValue+0x138>
    151a:	84 2b       	or	r24, r20
    151c:	8c 93       	st	X, r24
    151e:	47 c0       	rjmp	.+142    	; 0x15ae <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	88 23       	and	r24, r24
    1524:	09 f0       	breq	.+2      	; 0x1528 <DIO_SetPinValue+0x14e>
    1526:	43 c0       	rjmp	.+134    	; 0x15ae <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTC_REG,Pin);
    1528:	a5 e3       	ldi	r26, 0x35	; 53
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e5 e3       	ldi	r30, 0x35	; 53
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 2e       	mov	r0, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <DIO_SetPinValue+0x16c>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	0a 94       	dec	r0
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <DIO_SetPinValue+0x168>
    154a:	80 95       	com	r24
    154c:	84 23       	and	r24, r20
    154e:	8c 93       	st	X, r24
    1550:	2e c0       	rjmp	.+92     	; 0x15ae <DIO_SetPinValue+0x1d4>
		}  
		break;
		case DIO_PORTD: 
		if(Value == DIO_HIGH)
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	a1 f4       	brne	.+40     	; 0x1580 <DIO_SetPinValue+0x1a6>
		{ 
			SET_BIT(PORTD_REG,Pin);
    1558:	a2 e3       	ldi	r26, 0x32	; 50
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e2 e3       	ldi	r30, 0x32	; 50
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	48 2f       	mov	r20, r24
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 2e       	mov	r0, r18
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <DIO_SetPinValue+0x19c>
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	0a 94       	dec	r0
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <DIO_SetPinValue+0x198>
    157a:	84 2b       	or	r24, r20
    157c:	8c 93       	st	X, r24
    157e:	17 c0       	rjmp	.+46     	; 0x15ae <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	88 23       	and	r24, r24
    1584:	a1 f4       	brne	.+40     	; 0x15ae <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTD_REG,Pin);
    1586:	a2 e3       	ldi	r26, 0x32	; 50
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e2 e3       	ldi	r30, 0x32	; 50
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	48 2f       	mov	r20, r24
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	02 2e       	mov	r0, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <DIO_SetPinValue+0x1ca>
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	0a 94       	dec	r0
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <DIO_SetPinValue+0x1c6>
    15a8:	80 95       	com	r24
    15aa:	84 23       	and	r24, r20
    15ac:	8c 93       	st	X, r24
		default:
		// " Port or Pin or Value not valid "
		break;
	}
	
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <DIO_GetPinValue>:

u8   DIO_GetPinValue    (u8 Port , u8 Pin )
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <DIO_GetPinValue+0x6>
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <DIO_GetPinValue+0x8>
    15c6:	0f 92       	push	r0
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	8a 83       	std	Y+2, r24	; 0x02
    15ce:	6b 83       	std	Y+3, r22	; 0x03
	u8 Value;
	switch(Port)
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	3d 83       	std	Y+5, r19	; 0x05
    15d8:	2c 83       	std	Y+4, r18	; 0x04
    15da:	4c 81       	ldd	r20, Y+4	; 0x04
    15dc:	5d 81       	ldd	r21, Y+5	; 0x05
    15de:	41 30       	cpi	r20, 0x01	; 1
    15e0:	51 05       	cpc	r21, r1
    15e2:	41 f1       	breq	.+80     	; 0x1634 <DIO_GetPinValue+0x76>
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	9d 81       	ldd	r25, Y+5	; 0x05
    15e8:	82 30       	cpi	r24, 0x02	; 2
    15ea:	91 05       	cpc	r25, r1
    15ec:	34 f4       	brge	.+12     	; 0x15fa <DIO_GetPinValue+0x3c>
    15ee:	2c 81       	ldd	r18, Y+4	; 0x04
    15f0:	3d 81       	ldd	r19, Y+5	; 0x05
    15f2:	21 15       	cp	r18, r1
    15f4:	31 05       	cpc	r19, r1
    15f6:	61 f0       	breq	.+24     	; 0x1610 <DIO_GetPinValue+0x52>
    15f8:	52 c0       	rjmp	.+164    	; 0x169e <DIO_GetPinValue+0xe0>
    15fa:	4c 81       	ldd	r20, Y+4	; 0x04
    15fc:	5d 81       	ldd	r21, Y+5	; 0x05
    15fe:	42 30       	cpi	r20, 0x02	; 2
    1600:	51 05       	cpc	r21, r1
    1602:	51 f1       	breq	.+84     	; 0x1658 <DIO_GetPinValue+0x9a>
    1604:	8c 81       	ldd	r24, Y+4	; 0x04
    1606:	9d 81       	ldd	r25, Y+5	; 0x05
    1608:	83 30       	cpi	r24, 0x03	; 3
    160a:	91 05       	cpc	r25, r1
    160c:	b9 f1       	breq	.+110    	; 0x167c <DIO_GetPinValue+0xbe>
    160e:	47 c0       	rjmp	.+142    	; 0x169e <DIO_GetPinValue+0xe0>
	{
		case DIO_PORTA: Value = GET_BIT(PINA_REG,Pin); break;
    1610:	e9 e3       	ldi	r30, 0x39	; 57
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	a9 01       	movw	r20, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <DIO_GetPinValue+0x6a>
    1624:	55 95       	asr	r21
    1626:	47 95       	ror	r20
    1628:	8a 95       	dec	r24
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <DIO_GetPinValue+0x66>
    162c:	ca 01       	movw	r24, r20
    162e:	81 70       	andi	r24, 0x01	; 1
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	35 c0       	rjmp	.+106    	; 0x169e <DIO_GetPinValue+0xe0>
		case DIO_PORTB: Value = GET_BIT(PINB_REG,Pin); break;
    1634:	e6 e3       	ldi	r30, 0x36	; 54
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	a9 01       	movw	r20, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <DIO_GetPinValue+0x8e>
    1648:	55 95       	asr	r21
    164a:	47 95       	ror	r20
    164c:	8a 95       	dec	r24
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <DIO_GetPinValue+0x8a>
    1650:	ca 01       	movw	r24, r20
    1652:	81 70       	andi	r24, 0x01	; 1
    1654:	89 83       	std	Y+1, r24	; 0x01
    1656:	23 c0       	rjmp	.+70     	; 0x169e <DIO_GetPinValue+0xe0>
		case DIO_PORTC: Value = GET_BIT(PINC_REG,Pin); break;
    1658:	e3 e3       	ldi	r30, 0x33	; 51
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	88 2f       	mov	r24, r24
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	a9 01       	movw	r20, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <DIO_GetPinValue+0xb2>
    166c:	55 95       	asr	r21
    166e:	47 95       	ror	r20
    1670:	8a 95       	dec	r24
    1672:	e2 f7       	brpl	.-8      	; 0x166c <DIO_GetPinValue+0xae>
    1674:	ca 01       	movw	r24, r20
    1676:	81 70       	andi	r24, 0x01	; 1
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	11 c0       	rjmp	.+34     	; 0x169e <DIO_GetPinValue+0xe0>
		case DIO_PORTD: Value = GET_BIT(PIND_REG,Pin); break;
    167c:	e0 e3       	ldi	r30, 0x30	; 48
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	88 2f       	mov	r24, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	a9 01       	movw	r20, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <DIO_GetPinValue+0xd6>
    1690:	55 95       	asr	r21
    1692:	47 95       	ror	r20
    1694:	8a 95       	dec	r24
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <DIO_GetPinValue+0xd2>
    1698:	ca 01       	movw	r24, r20
    169a:	81 70       	andi	r24, 0x01	; 1
    169c:	89 83       	std	Y+1, r24	; 0x01
		default:
		break;
	}
	return Value;
    169e:	89 81       	ldd	r24, Y+1	; 0x01
}
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	08 95       	ret

000016b0 <DIO_SetPortDirection>:

void DIO_SetPortDirection(u8 Port , u8 Direction)
{
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <DIO_SetPortDirection+0x6>
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <DIO_SetPortDirection+0x8>
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	3c 83       	std	Y+4, r19	; 0x04
    16c8:	2b 83       	std	Y+3, r18	; 0x03
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	9c 81       	ldd	r25, Y+4	; 0x04
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	91 05       	cpc	r25, r1
    16d2:	d1 f0       	breq	.+52     	; 0x1708 <DIO_SetPortDirection+0x58>
    16d4:	2b 81       	ldd	r18, Y+3	; 0x03
    16d6:	3c 81       	ldd	r19, Y+4	; 0x04
    16d8:	22 30       	cpi	r18, 0x02	; 2
    16da:	31 05       	cpc	r19, r1
    16dc:	2c f4       	brge	.+10     	; 0x16e8 <DIO_SetPortDirection+0x38>
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	9c 81       	ldd	r25, Y+4	; 0x04
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	61 f0       	breq	.+24     	; 0x16fe <DIO_SetPortDirection+0x4e>
    16e6:	1e c0       	rjmp	.+60     	; 0x1724 <DIO_SetPortDirection+0x74>
    16e8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ea:	3c 81       	ldd	r19, Y+4	; 0x04
    16ec:	22 30       	cpi	r18, 0x02	; 2
    16ee:	31 05       	cpc	r19, r1
    16f0:	81 f0       	breq	.+32     	; 0x1712 <DIO_SetPortDirection+0x62>
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	83 30       	cpi	r24, 0x03	; 3
    16f8:	91 05       	cpc	r25, r1
    16fa:	81 f0       	breq	.+32     	; 0x171c <DIO_SetPortDirection+0x6c>
    16fc:	13 c0       	rjmp	.+38     	; 0x1724 <DIO_SetPortDirection+0x74>
	{
		case DIO_PORTA: DDRA_REG = Direction; break;
    16fe:	ea e3       	ldi	r30, 0x3A	; 58
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	80 83       	st	Z, r24
    1706:	0e c0       	rjmp	.+28     	; 0x1724 <DIO_SetPortDirection+0x74>
		case DIO_PORTB: DDRB_REG = Direction; break;
    1708:	e7 e3       	ldi	r30, 0x37	; 55
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	80 83       	st	Z, r24
    1710:	09 c0       	rjmp	.+18     	; 0x1724 <DIO_SetPortDirection+0x74>
		case DIO_PORTC: DDRC_REG = Direction; break;
    1712:	e4 e3       	ldi	r30, 0x34	; 52
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	80 83       	st	Z, r24
    171a:	04 c0       	rjmp	.+8      	; 0x1724 <DIO_SetPortDirection+0x74>
		case DIO_PORTD: DDRD_REG = Direction; break;
    171c:	e1 e3       	ldi	r30, 0x31	; 49
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	80 83       	st	Z, r24
		default:
		break;
	}
}
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <DIO_SetPortValue>:


void DIO_SetPortValue    (u8 Port , u8 Value   )
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	00 d0       	rcall	.+0      	; 0x1738 <DIO_SetPortValue+0x6>
    1738:	00 d0       	rcall	.+0      	; 0x173a <DIO_SetPortValue+0x8>
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	3c 83       	std	Y+4, r19	; 0x04
    174a:	2b 83       	std	Y+3, r18	; 0x03
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	81 30       	cpi	r24, 0x01	; 1
    1752:	91 05       	cpc	r25, r1
    1754:	d1 f0       	breq	.+52     	; 0x178a <DIO_SetPortValue+0x58>
    1756:	2b 81       	ldd	r18, Y+3	; 0x03
    1758:	3c 81       	ldd	r19, Y+4	; 0x04
    175a:	22 30       	cpi	r18, 0x02	; 2
    175c:	31 05       	cpc	r19, r1
    175e:	2c f4       	brge	.+10     	; 0x176a <DIO_SetPortValue+0x38>
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	9c 81       	ldd	r25, Y+4	; 0x04
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	61 f0       	breq	.+24     	; 0x1780 <DIO_SetPortValue+0x4e>
    1768:	1e c0       	rjmp	.+60     	; 0x17a6 <DIO_SetPortValue+0x74>
    176a:	2b 81       	ldd	r18, Y+3	; 0x03
    176c:	3c 81       	ldd	r19, Y+4	; 0x04
    176e:	22 30       	cpi	r18, 0x02	; 2
    1770:	31 05       	cpc	r19, r1
    1772:	81 f0       	breq	.+32     	; 0x1794 <DIO_SetPortValue+0x62>
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	9c 81       	ldd	r25, Y+4	; 0x04
    1778:	83 30       	cpi	r24, 0x03	; 3
    177a:	91 05       	cpc	r25, r1
    177c:	81 f0       	breq	.+32     	; 0x179e <DIO_SetPortValue+0x6c>
    177e:	13 c0       	rjmp	.+38     	; 0x17a6 <DIO_SetPortValue+0x74>
	{
		case DIO_PORTA: PORTA_REG = Value; break;
    1780:	eb e3       	ldi	r30, 0x3B	; 59
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	80 83       	st	Z, r24
    1788:	0e c0       	rjmp	.+28     	; 0x17a6 <DIO_SetPortValue+0x74>
		case DIO_PORTB: PORTB_REG = Value; break;
    178a:	e8 e3       	ldi	r30, 0x38	; 56
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	80 83       	st	Z, r24
    1792:	09 c0       	rjmp	.+18     	; 0x17a6 <DIO_SetPortValue+0x74>
		case DIO_PORTC: PORTC_REG = Value; break;
    1794:	e5 e3       	ldi	r30, 0x35	; 53
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	80 83       	st	Z, r24
    179c:	04 c0       	rjmp	.+8      	; 0x17a6 <DIO_SetPortValue+0x74>
		case DIO_PORTD: PORTD_REG = Value; break;
    179e:	e2 e3       	ldi	r30, 0x32	; 50
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	80 83       	st	Z, r24
		default:
		break;
	}
}
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <ADC_Init>:




void ADC_Init(void)
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
	// ADC Enable
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    17bc:	a6 e2       	ldi	r26, 0x26	; 38
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e6 e2       	ldi	r30, 0x26	; 38
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	80 68       	ori	r24, 0x80	; 128
    17c8:	8c 93       	st	X, r24

	// Prescaler Configuration as 128
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
    17ca:	a6 e2       	ldi	r26, 0x26	; 38
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e6 e2       	ldi	r30, 0x26	; 38
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	84 60       	ori	r24, 0x04	; 4
    17d6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
    17d8:	a6 e2       	ldi	r26, 0x26	; 38
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e6 e2       	ldi	r30, 0x26	; 38
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	82 60       	ori	r24, 0x02	; 2
    17e4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
    17e6:	a6 e2       	ldi	r26, 0x26	; 38
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e6 e2       	ldi	r30, 0x26	; 38
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	81 60       	ori	r24, 0x01	; 1
    17f2:	8c 93       	st	X, r24
	// Referance Voltage as AVCC with external capacitor
	CLR_BIT(ADMUX,ADMUX_REFS1);
    17f4:	a7 e2       	ldi	r26, 0x27	; 39
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e7 e2       	ldi	r30, 0x27	; 39
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	8f 77       	andi	r24, 0x7F	; 127
    1800:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
    1802:	a7 e2       	ldi	r26, 0x27	; 39
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e7 e2       	ldi	r30, 0x27	; 39
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	80 64       	ori	r24, 0x40	; 64
    180e:	8c 93       	st	X, r24

	CLR_BIT(ADMUX,ADMUX_ADLAR);
    1810:	a7 e2       	ldi	r26, 0x27	; 39
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e7 e2       	ldi	r30, 0x27	; 39
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	8f 7d       	andi	r24, 0xDF	; 223
    181c:	8c 93       	st	X, r24
}
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <ADC_Read>:

u16 ADC_Read (u8 channel)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	0f 92       	push	r0
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	89 83       	std	Y+1, r24	; 0x01
	// ADC Channel Selection
	channel &= 0x07;
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	87 70       	andi	r24, 0x07	; 7
    1834:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0;
    1836:	a7 e2       	ldi	r26, 0x27	; 39
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e7 e2       	ldi	r30, 0x27	; 39
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	80 7e       	andi	r24, 0xE0	; 224
    1842:	8c 93       	st	X, r24
	ADMUX |= channel;
    1844:	a7 e2       	ldi	r26, 0x27	; 39
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e7 e2       	ldi	r30, 0x27	; 39
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	90 81       	ld	r25, Z
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	89 2b       	or	r24, r25
    1852:	8c 93       	st	X, r24


	SET_BIT(ADCSRA,ADCSRA_ADSC);
    1854:	a6 e2       	ldi	r26, 0x26	; 38
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e6 e2       	ldi	r30, 0x26	; 38
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	80 64       	ori	r24, 0x40	; 64
    1860:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA,ADCSRA_ADIF)==0);
    1862:	e6 e2       	ldi	r30, 0x26	; 38
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	82 95       	swap	r24
    186a:	8f 70       	andi	r24, 0x0F	; 15
    186c:	88 2f       	mov	r24, r24
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	81 70       	andi	r24, 0x01	; 1
    1872:	90 70       	andi	r25, 0x00	; 0
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	a9 f3       	breq	.-22     	; 0x1862 <ADC_Read+0x3e>

	SET_BIT(ADCSRA,ADCSRA_ADIF);
    1878:	a6 e2       	ldi	r26, 0x26	; 38
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e6 e2       	ldi	r30, 0x26	; 38
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	80 61       	ori	r24, 0x10	; 16
    1884:	8c 93       	st	X, r24

	return ADC;
    1886:	e4 e2       	ldi	r30, 0x24	; 36
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	91 81       	ldd	r25, Z+1	; 0x01

}
    188e:	0f 90       	pop	r0
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <LCD_Init>:
#include "LCD_INTERFACE.h"



void LCD_Init(void)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	e8 97       	sbiw	r28, 0x38	; 56
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinDirection(RS,DIO_OUTPUT); //RS
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	41 e0       	ldi	r20, 0x01	; 1
    18b0:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <DIO_SetPinDirection>
	DIO_SetPinDirection(EN,DIO_OUTPUT); //EN
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	61 e0       	ldi	r22, 0x01	; 1
    18b8:	41 e0       	ldi	r20, 0x01	; 1
    18ba:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <DIO_SetPinDirection>

	DIO_SetPortDirection(LCD_PORT,0xFF);
    18be:	82 e0       	ldi	r24, 0x02	; 2
    18c0:	6f ef       	ldi	r22, 0xFF	; 255
    18c2:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_SetPortDirection>
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	a8 ec       	ldi	r26, 0xC8	; 200
    18cc:	b2 e4       	ldi	r27, 0x42	; 66
    18ce:	8d ab       	std	Y+53, r24	; 0x35
    18d0:	9e ab       	std	Y+54, r25	; 0x36
    18d2:	af ab       	std	Y+55, r26	; 0x37
    18d4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d6:	6d a9       	ldd	r22, Y+53	; 0x35
    18d8:	7e a9       	ldd	r23, Y+54	; 0x36
    18da:	8f a9       	ldd	r24, Y+55	; 0x37
    18dc:	98 ad       	ldd	r25, Y+56	; 0x38
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	4a ef       	ldi	r20, 0xFA	; 250
    18e4:	54 e4       	ldi	r21, 0x44	; 68
    18e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	89 ab       	std	Y+49, r24	; 0x31
    18f0:	9a ab       	std	Y+50, r25	; 0x32
    18f2:	ab ab       	std	Y+51, r26	; 0x33
    18f4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18f6:	69 a9       	ldd	r22, Y+49	; 0x31
    18f8:	7a a9       	ldd	r23, Y+50	; 0x32
    18fa:	8b a9       	ldd	r24, Y+51	; 0x33
    18fc:	9c a9       	ldd	r25, Y+52	; 0x34
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e8       	ldi	r20, 0x80	; 128
    1904:	5f e3       	ldi	r21, 0x3F	; 63
    1906:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    190a:	88 23       	and	r24, r24
    190c:	2c f4       	brge	.+10     	; 0x1918 <LCD_Init+0x82>
		__ticks = 1;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	98 ab       	std	Y+48, r25	; 0x30
    1914:	8f a7       	std	Y+47, r24	; 0x2f
    1916:	3f c0       	rjmp	.+126    	; 0x1996 <LCD_Init+0x100>
	else if (__tmp > 65535)
    1918:	69 a9       	ldd	r22, Y+49	; 0x31
    191a:	7a a9       	ldd	r23, Y+50	; 0x32
    191c:	8b a9       	ldd	r24, Y+51	; 0x33
    191e:	9c a9       	ldd	r25, Y+52	; 0x34
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	3f ef       	ldi	r19, 0xFF	; 255
    1924:	4f e7       	ldi	r20, 0x7F	; 127
    1926:	57 e4       	ldi	r21, 0x47	; 71
    1928:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    192c:	18 16       	cp	r1, r24
    192e:	4c f5       	brge	.+82     	; 0x1982 <LCD_Init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1930:	6d a9       	ldd	r22, Y+53	; 0x35
    1932:	7e a9       	ldd	r23, Y+54	; 0x36
    1934:	8f a9       	ldd	r24, Y+55	; 0x37
    1936:	98 ad       	ldd	r25, Y+56	; 0x38
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e2       	ldi	r20, 0x20	; 32
    193e:	51 e4       	ldi	r21, 0x41	; 65
    1940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	bc 01       	movw	r22, r24
    194a:	cd 01       	movw	r24, r26
    194c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	98 ab       	std	Y+48, r25	; 0x30
    1956:	8f a7       	std	Y+47, r24	; 0x2f
    1958:	0f c0       	rjmp	.+30     	; 0x1978 <LCD_Init+0xe2>
    195a:	88 ec       	ldi	r24, 0xC8	; 200
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	9e a7       	std	Y+46, r25	; 0x2e
    1960:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1962:	8d a5       	ldd	r24, Y+45	; 0x2d
    1964:	9e a5       	ldd	r25, Y+46	; 0x2e
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <LCD_Init+0xd0>
    196a:	9e a7       	std	Y+46, r25	; 0x2e
    196c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1970:	98 a9       	ldd	r25, Y+48	; 0x30
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	98 ab       	std	Y+48, r25	; 0x30
    1976:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1978:	8f a5       	ldd	r24, Y+47	; 0x2f
    197a:	98 a9       	ldd	r25, Y+48	; 0x30
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	69 f7       	brne	.-38     	; 0x195a <LCD_Init+0xc4>
    1980:	14 c0       	rjmp	.+40     	; 0x19aa <LCD_Init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1982:	69 a9       	ldd	r22, Y+49	; 0x31
    1984:	7a a9       	ldd	r23, Y+50	; 0x32
    1986:	8b a9       	ldd	r24, Y+51	; 0x33
    1988:	9c a9       	ldd	r25, Y+52	; 0x34
    198a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	98 ab       	std	Y+48, r25	; 0x30
    1994:	8f a7       	std	Y+47, r24	; 0x2f
    1996:	8f a5       	ldd	r24, Y+47	; 0x2f
    1998:	98 a9       	ldd	r25, Y+48	; 0x30
    199a:	9c a7       	std	Y+44, r25	; 0x2c
    199c:	8b a7       	std	Y+43, r24	; 0x2b
    199e:	8b a5       	ldd	r24, Y+43	; 0x2b
    19a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	f1 f7       	brne	.-4      	; 0x19a2 <LCD_Init+0x10c>
    19a6:	9c a7       	std	Y+44, r25	; 0x2c
    19a8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);

	LCD_WriteCommand(0x38);
    19aa:	88 e3       	ldi	r24, 0x38	; 56
    19ac:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <LCD_WriteCommand>
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a0 e8       	ldi	r26, 0x80	; 128
    19b6:	bf e3       	ldi	r27, 0x3F	; 63
    19b8:	8f a3       	std	Y+39, r24	; 0x27
    19ba:	98 a7       	std	Y+40, r25	; 0x28
    19bc:	a9 a7       	std	Y+41, r26	; 0x29
    19be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c0:	6f a1       	ldd	r22, Y+39	; 0x27
    19c2:	78 a5       	ldd	r23, Y+40	; 0x28
    19c4:	89 a5       	ldd	r24, Y+41	; 0x29
    19c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	4a ef       	ldi	r20, 0xFA	; 250
    19ce:	54 e4       	ldi	r21, 0x44	; 68
    19d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	8b a3       	std	Y+35, r24	; 0x23
    19da:	9c a3       	std	Y+36, r25	; 0x24
    19dc:	ad a3       	std	Y+37, r26	; 0x25
    19de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19e0:	6b a1       	ldd	r22, Y+35	; 0x23
    19e2:	7c a1       	ldd	r23, Y+36	; 0x24
    19e4:	8d a1       	ldd	r24, Y+37	; 0x25
    19e6:	9e a1       	ldd	r25, Y+38	; 0x26
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e8       	ldi	r20, 0x80	; 128
    19ee:	5f e3       	ldi	r21, 0x3F	; 63
    19f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19f4:	88 23       	and	r24, r24
    19f6:	2c f4       	brge	.+10     	; 0x1a02 <LCD_Init+0x16c>
		__ticks = 1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9a a3       	std	Y+34, r25	; 0x22
    19fe:	89 a3       	std	Y+33, r24	; 0x21
    1a00:	3f c0       	rjmp	.+126    	; 0x1a80 <LCD_Init+0x1ea>
	else if (__tmp > 65535)
    1a02:	6b a1       	ldd	r22, Y+35	; 0x23
    1a04:	7c a1       	ldd	r23, Y+36	; 0x24
    1a06:	8d a1       	ldd	r24, Y+37	; 0x25
    1a08:	9e a1       	ldd	r25, Y+38	; 0x26
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	3f ef       	ldi	r19, 0xFF	; 255
    1a0e:	4f e7       	ldi	r20, 0x7F	; 127
    1a10:	57 e4       	ldi	r21, 0x47	; 71
    1a12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a16:	18 16       	cp	r1, r24
    1a18:	4c f5       	brge	.+82     	; 0x1a6c <LCD_Init+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a1c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a1e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a20:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e2       	ldi	r20, 0x20	; 32
    1a28:	51 e4       	ldi	r21, 0x41	; 65
    1a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	bc 01       	movw	r22, r24
    1a34:	cd 01       	movw	r24, r26
    1a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	9a a3       	std	Y+34, r25	; 0x22
    1a40:	89 a3       	std	Y+33, r24	; 0x21
    1a42:	0f c0       	rjmp	.+30     	; 0x1a62 <LCD_Init+0x1cc>
    1a44:	88 ec       	ldi	r24, 0xC8	; 200
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	98 a3       	std	Y+32, r25	; 0x20
    1a4a:	8f 8f       	std	Y+31, r24	; 0x1f
    1a4c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a4e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <LCD_Init+0x1ba>
    1a54:	98 a3       	std	Y+32, r25	; 0x20
    1a56:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a58:	89 a1       	ldd	r24, Y+33	; 0x21
    1a5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	9a a3       	std	Y+34, r25	; 0x22
    1a60:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a62:	89 a1       	ldd	r24, Y+33	; 0x21
    1a64:	9a a1       	ldd	r25, Y+34	; 0x22
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	69 f7       	brne	.-38     	; 0x1a44 <LCD_Init+0x1ae>
    1a6a:	14 c0       	rjmp	.+40     	; 0x1a94 <LCD_Init+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a70:	8d a1       	ldd	r24, Y+37	; 0x25
    1a72:	9e a1       	ldd	r25, Y+38	; 0x26
    1a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	9a a3       	std	Y+34, r25	; 0x22
    1a7e:	89 a3       	std	Y+33, r24	; 0x21
    1a80:	89 a1       	ldd	r24, Y+33	; 0x21
    1a82:	9a a1       	ldd	r25, Y+34	; 0x22
    1a84:	9e 8f       	std	Y+30, r25	; 0x1e
    1a86:	8d 8f       	std	Y+29, r24	; 0x1d
    1a88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_Init+0x1f6>
    1a90:	9e 8f       	std	Y+30, r25	; 0x1e
    1a92:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_WriteCommand(0x0C);
    1a94:	8c e0       	ldi	r24, 0x0C	; 12
    1a96:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <LCD_WriteCommand>
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	a0 e8       	ldi	r26, 0x80	; 128
    1aa0:	bf e3       	ldi	r27, 0x3F	; 63
    1aa2:	89 8f       	std	Y+25, r24	; 0x19
    1aa4:	9a 8f       	std	Y+26, r25	; 0x1a
    1aa6:	ab 8f       	std	Y+27, r26	; 0x1b
    1aa8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aaa:	69 8d       	ldd	r22, Y+25	; 0x19
    1aac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ab0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	4a ef       	ldi	r20, 0xFA	; 250
    1ab8:	54 e4       	ldi	r21, 0x44	; 68
    1aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	8d 8b       	std	Y+21, r24	; 0x15
    1ac4:	9e 8b       	std	Y+22, r25	; 0x16
    1ac6:	af 8b       	std	Y+23, r26	; 0x17
    1ac8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1aca:	6d 89       	ldd	r22, Y+21	; 0x15
    1acc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ace:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e8       	ldi	r20, 0x80	; 128
    1ad8:	5f e3       	ldi	r21, 0x3F	; 63
    1ada:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ade:	88 23       	and	r24, r24
    1ae0:	2c f4       	brge	.+10     	; 0x1aec <LCD_Init+0x256>
		__ticks = 1;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	9c 8b       	std	Y+20, r25	; 0x14
    1ae8:	8b 8b       	std	Y+19, r24	; 0x13
    1aea:	3f c0       	rjmp	.+126    	; 0x1b6a <LCD_Init+0x2d4>
	else if (__tmp > 65535)
    1aec:	6d 89       	ldd	r22, Y+21	; 0x15
    1aee:	7e 89       	ldd	r23, Y+22	; 0x16
    1af0:	8f 89       	ldd	r24, Y+23	; 0x17
    1af2:	98 8d       	ldd	r25, Y+24	; 0x18
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	3f ef       	ldi	r19, 0xFF	; 255
    1af8:	4f e7       	ldi	r20, 0x7F	; 127
    1afa:	57 e4       	ldi	r21, 0x47	; 71
    1afc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b00:	18 16       	cp	r1, r24
    1b02:	4c f5       	brge	.+82     	; 0x1b56 <LCD_Init+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b04:	69 8d       	ldd	r22, Y+25	; 0x19
    1b06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	40 e2       	ldi	r20, 0x20	; 32
    1b12:	51 e4       	ldi	r21, 0x41	; 65
    1b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	bc 01       	movw	r22, r24
    1b1e:	cd 01       	movw	r24, r26
    1b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	9c 8b       	std	Y+20, r25	; 0x14
    1b2a:	8b 8b       	std	Y+19, r24	; 0x13
    1b2c:	0f c0       	rjmp	.+30     	; 0x1b4c <LCD_Init+0x2b6>
    1b2e:	88 ec       	ldi	r24, 0xC8	; 200
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	9a 8b       	std	Y+18, r25	; 0x12
    1b34:	89 8b       	std	Y+17, r24	; 0x11
    1b36:	89 89       	ldd	r24, Y+17	; 0x11
    1b38:	9a 89       	ldd	r25, Y+18	; 0x12
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <LCD_Init+0x2a4>
    1b3e:	9a 8b       	std	Y+18, r25	; 0x12
    1b40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b42:	8b 89       	ldd	r24, Y+19	; 0x13
    1b44:	9c 89       	ldd	r25, Y+20	; 0x14
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	9c 8b       	std	Y+20, r25	; 0x14
    1b4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	69 f7       	brne	.-38     	; 0x1b2e <LCD_Init+0x298>
    1b54:	14 c0       	rjmp	.+40     	; 0x1b7e <LCD_Init+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b56:	6d 89       	ldd	r22, Y+21	; 0x15
    1b58:	7e 89       	ldd	r23, Y+22	; 0x16
    1b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	9c 8b       	std	Y+20, r25	; 0x14
    1b68:	8b 8b       	std	Y+19, r24	; 0x13
    1b6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b6e:	98 8b       	std	Y+16, r25	; 0x10
    1b70:	8f 87       	std	Y+15, r24	; 0x0f
    1b72:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b74:	98 89       	ldd	r25, Y+16	; 0x10
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <LCD_Init+0x2e0>
    1b7a:	98 8b       	std	Y+16, r25	; 0x10
    1b7c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_WriteCommand(0x01);
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <LCD_WriteCommand>
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	a0 e0       	ldi	r26, 0x00	; 0
    1b8a:	b0 e4       	ldi	r27, 0x40	; 64
    1b8c:	8b 87       	std	Y+11, r24	; 0x0b
    1b8e:	9c 87       	std	Y+12, r25	; 0x0c
    1b90:	ad 87       	std	Y+13, r26	; 0x0d
    1b92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	4a ef       	ldi	r20, 0xFA	; 250
    1ba2:	54 e4       	ldi	r21, 0x44	; 68
    1ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	8f 83       	std	Y+7, r24	; 0x07
    1bae:	98 87       	std	Y+8, r25	; 0x08
    1bb0:	a9 87       	std	Y+9, r26	; 0x09
    1bb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb6:	78 85       	ldd	r23, Y+8	; 0x08
    1bb8:	89 85       	ldd	r24, Y+9	; 0x09
    1bba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e8       	ldi	r20, 0x80	; 128
    1bc2:	5f e3       	ldi	r21, 0x3F	; 63
    1bc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc8:	88 23       	and	r24, r24
    1bca:	2c f4       	brge	.+10     	; 0x1bd6 <LCD_Init+0x340>
		__ticks = 1;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	9e 83       	std	Y+6, r25	; 0x06
    1bd2:	8d 83       	std	Y+5, r24	; 0x05
    1bd4:	3f c0       	rjmp	.+126    	; 0x1c54 <LCD_Init+0x3be>
	else if (__tmp > 65535)
    1bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd8:	78 85       	ldd	r23, Y+8	; 0x08
    1bda:	89 85       	ldd	r24, Y+9	; 0x09
    1bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	3f ef       	ldi	r19, 0xFF	; 255
    1be2:	4f e7       	ldi	r20, 0x7F	; 127
    1be4:	57 e4       	ldi	r21, 0x47	; 71
    1be6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bea:	18 16       	cp	r1, r24
    1bec:	4c f5       	brge	.+82     	; 0x1c40 <LCD_Init+0x3aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	40 e2       	ldi	r20, 0x20	; 32
    1bfc:	51 e4       	ldi	r21, 0x41	; 65
    1bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	bc 01       	movw	r22, r24
    1c08:	cd 01       	movw	r24, r26
    1c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	9e 83       	std	Y+6, r25	; 0x06
    1c14:	8d 83       	std	Y+5, r24	; 0x05
    1c16:	0f c0       	rjmp	.+30     	; 0x1c36 <LCD_Init+0x3a0>
    1c18:	88 ec       	ldi	r24, 0xC8	; 200
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	9c 83       	std	Y+4, r25	; 0x04
    1c1e:	8b 83       	std	Y+3, r24	; 0x03
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	9c 81       	ldd	r25, Y+4	; 0x04
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <LCD_Init+0x38e>
    1c28:	9c 83       	std	Y+4, r25	; 0x04
    1c2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	9e 83       	std	Y+6, r25	; 0x06
    1c34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c36:	8d 81       	ldd	r24, Y+5	; 0x05
    1c38:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	69 f7       	brne	.-38     	; 0x1c18 <LCD_Init+0x382>
    1c3e:	14 c0       	rjmp	.+40     	; 0x1c68 <LCD_Init+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c40:	6f 81       	ldd	r22, Y+7	; 0x07
    1c42:	78 85       	ldd	r23, Y+8	; 0x08
    1c44:	89 85       	ldd	r24, Y+9	; 0x09
    1c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	9e 83       	std	Y+6, r25	; 0x06
    1c52:	8d 83       	std	Y+5, r24	; 0x05
    1c54:	8d 81       	ldd	r24, Y+5	; 0x05
    1c56:	9e 81       	ldd	r25, Y+6	; 0x06
    1c58:	9a 83       	std	Y+2, r25	; 0x02
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <LCD_Init+0x3ca>
    1c64:	9a 83       	std	Y+2, r25	; 0x02
    1c66:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_WriteCommand(0x06);
    1c68:	86 e0       	ldi	r24, 0x06	; 6
    1c6a:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <LCD_WriteCommand>
}
    1c6e:	e8 96       	adiw	r28, 0x38	; 56
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	08 95       	ret

00001c80 <LCD_WriteCommand>:

void LCD_WriteCommand(u8 Command)
{
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	6d 97       	sbiw	r28, 0x1d	; 29
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Rs = 0*/
	DIO_SetPinValue(RS,DIO_LOW);
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	40 e0       	ldi	r20, 0x00	; 0
    1c9c:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
	/* Rw = 0*/

	DIO_SetPortValue(LCD_PORT,Command);
    1ca0:	82 e0       	ldi	r24, 0x02	; 2
    1ca2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ca4:	0e 94 99 0b 	call	0x1732	; 0x1732 <DIO_SetPortValue>
	/*Set Enable */
	DIO_SetPinValue(EN,DIO_HIGH); //EN
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	61 e0       	ldi	r22, 0x01	; 1
    1cac:	41 e0       	ldi	r20, 0x01	; 1
    1cae:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	a0 e8       	ldi	r26, 0x80	; 128
    1cb8:	bf e3       	ldi	r27, 0x3F	; 63
    1cba:	89 8f       	std	Y+25, r24	; 0x19
    1cbc:	9a 8f       	std	Y+26, r25	; 0x1a
    1cbe:	ab 8f       	std	Y+27, r26	; 0x1b
    1cc0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc2:	69 8d       	ldd	r22, Y+25	; 0x19
    1cc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	4a ef       	ldi	r20, 0xFA	; 250
    1cd0:	54 e4       	ldi	r21, 0x44	; 68
    1cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	8d 8b       	std	Y+21, r24	; 0x15
    1cdc:	9e 8b       	std	Y+22, r25	; 0x16
    1cde:	af 8b       	std	Y+23, r26	; 0x17
    1ce0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ce2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e8       	ldi	r20, 0x80	; 128
    1cf0:	5f e3       	ldi	r21, 0x3F	; 63
    1cf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cf6:	88 23       	and	r24, r24
    1cf8:	2c f4       	brge	.+10     	; 0x1d04 <LCD_WriteCommand+0x84>
		__ticks = 1;
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	9c 8b       	std	Y+20, r25	; 0x14
    1d00:	8b 8b       	std	Y+19, r24	; 0x13
    1d02:	3f c0       	rjmp	.+126    	; 0x1d82 <LCD_WriteCommand+0x102>
	else if (__tmp > 65535)
    1d04:	6d 89       	ldd	r22, Y+21	; 0x15
    1d06:	7e 89       	ldd	r23, Y+22	; 0x16
    1d08:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	3f ef       	ldi	r19, 0xFF	; 255
    1d10:	4f e7       	ldi	r20, 0x7F	; 127
    1d12:	57 e4       	ldi	r21, 0x47	; 71
    1d14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d18:	18 16       	cp	r1, r24
    1d1a:	4c f5       	brge	.+82     	; 0x1d6e <LCD_WriteCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e2       	ldi	r20, 0x20	; 32
    1d2a:	51 e4       	ldi	r21, 0x41	; 65
    1d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	bc 01       	movw	r22, r24
    1d36:	cd 01       	movw	r24, r26
    1d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	9c 8b       	std	Y+20, r25	; 0x14
    1d42:	8b 8b       	std	Y+19, r24	; 0x13
    1d44:	0f c0       	rjmp	.+30     	; 0x1d64 <LCD_WriteCommand+0xe4>
    1d46:	88 ec       	ldi	r24, 0xC8	; 200
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	9a 8b       	std	Y+18, r25	; 0x12
    1d4c:	89 8b       	std	Y+17, r24	; 0x11
    1d4e:	89 89       	ldd	r24, Y+17	; 0x11
    1d50:	9a 89       	ldd	r25, Y+18	; 0x12
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <LCD_WriteCommand+0xd2>
    1d56:	9a 8b       	std	Y+18, r25	; 0x12
    1d58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	9c 8b       	std	Y+20, r25	; 0x14
    1d62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d64:	8b 89       	ldd	r24, Y+19	; 0x13
    1d66:	9c 89       	ldd	r25, Y+20	; 0x14
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	69 f7       	brne	.-38     	; 0x1d46 <LCD_WriteCommand+0xc6>
    1d6c:	14 c0       	rjmp	.+40     	; 0x1d96 <LCD_WriteCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d70:	7e 89       	ldd	r23, Y+22	; 0x16
    1d72:	8f 89       	ldd	r24, Y+23	; 0x17
    1d74:	98 8d       	ldd	r25, Y+24	; 0x18
    1d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	9c 8b       	std	Y+20, r25	; 0x14
    1d80:	8b 8b       	std	Y+19, r24	; 0x13
    1d82:	8b 89       	ldd	r24, Y+19	; 0x13
    1d84:	9c 89       	ldd	r25, Y+20	; 0x14
    1d86:	98 8b       	std	Y+16, r25	; 0x10
    1d88:	8f 87       	std	Y+15, r24	; 0x0f
    1d8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8c:	98 89       	ldd	r25, Y+16	; 0x10
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <LCD_WriteCommand+0x10e>
    1d92:	98 8b       	std	Y+16, r25	; 0x10
    1d94:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_SetPinValue(EN,DIO_LOW);
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	61 e0       	ldi	r22, 0x01	; 1
    1d9a:	40 e0       	ldi	r20, 0x00	; 0
    1d9c:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a0 ea       	ldi	r26, 0xA0	; 160
    1da6:	b0 e4       	ldi	r27, 0x40	; 64
    1da8:	8b 87       	std	Y+11, r24	; 0x0b
    1daa:	9c 87       	std	Y+12, r25	; 0x0c
    1dac:	ad 87       	std	Y+13, r26	; 0x0d
    1dae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	4a ef       	ldi	r20, 0xFA	; 250
    1dbe:	54 e4       	ldi	r21, 0x44	; 68
    1dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	8f 83       	std	Y+7, r24	; 0x07
    1dca:	98 87       	std	Y+8, r25	; 0x08
    1dcc:	a9 87       	std	Y+9, r26	; 0x09
    1dce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd2:	78 85       	ldd	r23, Y+8	; 0x08
    1dd4:	89 85       	ldd	r24, Y+9	; 0x09
    1dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e8       	ldi	r20, 0x80	; 128
    1dde:	5f e3       	ldi	r21, 0x3F	; 63
    1de0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de4:	88 23       	and	r24, r24
    1de6:	2c f4       	brge	.+10     	; 0x1df2 <LCD_WriteCommand+0x172>
		__ticks = 1;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9e 83       	std	Y+6, r25	; 0x06
    1dee:	8d 83       	std	Y+5, r24	; 0x05
    1df0:	3f c0       	rjmp	.+126    	; 0x1e70 <LCD_WriteCommand+0x1f0>
	else if (__tmp > 65535)
    1df2:	6f 81       	ldd	r22, Y+7	; 0x07
    1df4:	78 85       	ldd	r23, Y+8	; 0x08
    1df6:	89 85       	ldd	r24, Y+9	; 0x09
    1df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	3f ef       	ldi	r19, 0xFF	; 255
    1dfe:	4f e7       	ldi	r20, 0x7F	; 127
    1e00:	57 e4       	ldi	r21, 0x47	; 71
    1e02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e06:	18 16       	cp	r1, r24
    1e08:	4c f5       	brge	.+82     	; 0x1e5c <LCD_WriteCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e2       	ldi	r20, 0x20	; 32
    1e18:	51 e4       	ldi	r21, 0x41	; 65
    1e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	bc 01       	movw	r22, r24
    1e24:	cd 01       	movw	r24, r26
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9e 83       	std	Y+6, r25	; 0x06
    1e30:	8d 83       	std	Y+5, r24	; 0x05
    1e32:	0f c0       	rjmp	.+30     	; 0x1e52 <LCD_WriteCommand+0x1d2>
    1e34:	88 ec       	ldi	r24, 0xC8	; 200
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	9c 83       	std	Y+4, r25	; 0x04
    1e3a:	8b 83       	std	Y+3, r24	; 0x03
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <LCD_WriteCommand+0x1c0>
    1e44:	9c 83       	std	Y+4, r25	; 0x04
    1e46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e48:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	9e 83       	std	Y+6, r25	; 0x06
    1e50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	9e 81       	ldd	r25, Y+6	; 0x06
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	69 f7       	brne	.-38     	; 0x1e34 <LCD_WriteCommand+0x1b4>
    1e5a:	14 c0       	rjmp	.+40     	; 0x1e84 <LCD_WriteCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5e:	78 85       	ldd	r23, Y+8	; 0x08
    1e60:	89 85       	ldd	r24, Y+9	; 0x09
    1e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	9e 81       	ldd	r25, Y+6	; 0x06
    1e74:	9a 83       	std	Y+2, r25	; 0x02
    1e76:	89 83       	std	Y+1, r24	; 0x01
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <LCD_WriteCommand+0x1fc>
    1e80:	9a 83       	std	Y+2, r25	; 0x02
    1e82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    1e84:	6d 96       	adiw	r28, 0x1d	; 29
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	f8 94       	cli
    1e8a:	de bf       	out	0x3e, r29	; 62
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	cd bf       	out	0x3d, r28	; 61
    1e90:	cf 91       	pop	r28
    1e92:	df 91       	pop	r29
    1e94:	08 95       	ret

00001e96 <LCD_WriteData>:
void LCD_WriteData(u8 Data)
{
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	6d 97       	sbiw	r28, 0x1d	; 29
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
    1eaa:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Rs = 0*/
	DIO_SetPinValue(RS,DIO_HIGH);
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	60 e0       	ldi	r22, 0x00	; 0
    1eb0:	41 e0       	ldi	r20, 0x01	; 1
    1eb2:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
	/* Rw = 0*/

	DIO_SetPortValue(LCD_PORT,Data);
    1eb6:	82 e0       	ldi	r24, 0x02	; 2
    1eb8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1eba:	0e 94 99 0b 	call	0x1732	; 0x1732 <DIO_SetPortValue>
	/*Set Enable */
	DIO_SetPinValue(EN,DIO_HIGH); //EN
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	61 e0       	ldi	r22, 0x01	; 1
    1ec2:	41 e0       	ldi	r20, 0x01	; 1
    1ec4:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	a0 e8       	ldi	r26, 0x80	; 128
    1ece:	bf e3       	ldi	r27, 0x3F	; 63
    1ed0:	89 8f       	std	Y+25, r24	; 0x19
    1ed2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ed4:	ab 8f       	std	Y+27, r26	; 0x1b
    1ed6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed8:	69 8d       	ldd	r22, Y+25	; 0x19
    1eda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1edc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ede:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	4a ef       	ldi	r20, 0xFA	; 250
    1ee6:	54 e4       	ldi	r21, 0x44	; 68
    1ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	8d 8b       	std	Y+21, r24	; 0x15
    1ef2:	9e 8b       	std	Y+22, r25	; 0x16
    1ef4:	af 8b       	std	Y+23, r26	; 0x17
    1ef6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ef8:	6d 89       	ldd	r22, Y+21	; 0x15
    1efa:	7e 89       	ldd	r23, Y+22	; 0x16
    1efc:	8f 89       	ldd	r24, Y+23	; 0x17
    1efe:	98 8d       	ldd	r25, Y+24	; 0x18
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	40 e8       	ldi	r20, 0x80	; 128
    1f06:	5f e3       	ldi	r21, 0x3F	; 63
    1f08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f0c:	88 23       	and	r24, r24
    1f0e:	2c f4       	brge	.+10     	; 0x1f1a <LCD_WriteData+0x84>
		__ticks = 1;
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	9c 8b       	std	Y+20, r25	; 0x14
    1f16:	8b 8b       	std	Y+19, r24	; 0x13
    1f18:	3f c0       	rjmp	.+126    	; 0x1f98 <LCD_WriteData+0x102>
	else if (__tmp > 65535)
    1f1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f20:	98 8d       	ldd	r25, Y+24	; 0x18
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	3f ef       	ldi	r19, 0xFF	; 255
    1f26:	4f e7       	ldi	r20, 0x7F	; 127
    1f28:	57 e4       	ldi	r21, 0x47	; 71
    1f2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f2e:	18 16       	cp	r1, r24
    1f30:	4c f5       	brge	.+82     	; 0x1f84 <LCD_WriteData+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f32:	69 8d       	ldd	r22, Y+25	; 0x19
    1f34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e2       	ldi	r20, 0x20	; 32
    1f40:	51 e4       	ldi	r21, 0x41	; 65
    1f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	bc 01       	movw	r22, r24
    1f4c:	cd 01       	movw	r24, r26
    1f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	9c 8b       	std	Y+20, r25	; 0x14
    1f58:	8b 8b       	std	Y+19, r24	; 0x13
    1f5a:	0f c0       	rjmp	.+30     	; 0x1f7a <LCD_WriteData+0xe4>
    1f5c:	88 ec       	ldi	r24, 0xC8	; 200
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	9a 8b       	std	Y+18, r25	; 0x12
    1f62:	89 8b       	std	Y+17, r24	; 0x11
    1f64:	89 89       	ldd	r24, Y+17	; 0x11
    1f66:	9a 89       	ldd	r25, Y+18	; 0x12
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	f1 f7       	brne	.-4      	; 0x1f68 <LCD_WriteData+0xd2>
    1f6c:	9a 8b       	std	Y+18, r25	; 0x12
    1f6e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f70:	8b 89       	ldd	r24, Y+19	; 0x13
    1f72:	9c 89       	ldd	r25, Y+20	; 0x14
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	9c 8b       	std	Y+20, r25	; 0x14
    1f78:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f7e:	00 97       	sbiw	r24, 0x00	; 0
    1f80:	69 f7       	brne	.-38     	; 0x1f5c <LCD_WriteData+0xc6>
    1f82:	14 c0       	rjmp	.+40     	; 0x1fac <LCD_WriteData+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f84:	6d 89       	ldd	r22, Y+21	; 0x15
    1f86:	7e 89       	ldd	r23, Y+22	; 0x16
    1f88:	8f 89       	ldd	r24, Y+23	; 0x17
    1f8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	9c 8b       	std	Y+20, r25	; 0x14
    1f96:	8b 8b       	std	Y+19, r24	; 0x13
    1f98:	8b 89       	ldd	r24, Y+19	; 0x13
    1f9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9c:	98 8b       	std	Y+16, r25	; 0x10
    1f9e:	8f 87       	std	Y+15, r24	; 0x0f
    1fa0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fa2:	98 89       	ldd	r25, Y+16	; 0x10
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	f1 f7       	brne	.-4      	; 0x1fa4 <LCD_WriteData+0x10e>
    1fa8:	98 8b       	std	Y+16, r25	; 0x10
    1faa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_SetPinValue(EN,DIO_LOW);
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	61 e0       	ldi	r22, 0x01	; 1
    1fb0:	40 e0       	ldi	r20, 0x00	; 0
    1fb2:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	a0 ea       	ldi	r26, 0xA0	; 160
    1fbc:	b0 e4       	ldi	r27, 0x40	; 64
    1fbe:	8b 87       	std	Y+11, r24	; 0x0b
    1fc0:	9c 87       	std	Y+12, r25	; 0x0c
    1fc2:	ad 87       	std	Y+13, r26	; 0x0d
    1fc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	4a ef       	ldi	r20, 0xFA	; 250
    1fd4:	54 e4       	ldi	r21, 0x44	; 68
    1fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	8f 83       	std	Y+7, r24	; 0x07
    1fe0:	98 87       	std	Y+8, r25	; 0x08
    1fe2:	a9 87       	std	Y+9, r26	; 0x09
    1fe4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fe6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe8:	78 85       	ldd	r23, Y+8	; 0x08
    1fea:	89 85       	ldd	r24, Y+9	; 0x09
    1fec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e8       	ldi	r20, 0x80	; 128
    1ff4:	5f e3       	ldi	r21, 0x3F	; 63
    1ff6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ffa:	88 23       	and	r24, r24
    1ffc:	2c f4       	brge	.+10     	; 0x2008 <LCD_WriteData+0x172>
		__ticks = 1;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9e 83       	std	Y+6, r25	; 0x06
    2004:	8d 83       	std	Y+5, r24	; 0x05
    2006:	3f c0       	rjmp	.+126    	; 0x2086 <LCD_WriteData+0x1f0>
	else if (__tmp > 65535)
    2008:	6f 81       	ldd	r22, Y+7	; 0x07
    200a:	78 85       	ldd	r23, Y+8	; 0x08
    200c:	89 85       	ldd	r24, Y+9	; 0x09
    200e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	3f ef       	ldi	r19, 0xFF	; 255
    2014:	4f e7       	ldi	r20, 0x7F	; 127
    2016:	57 e4       	ldi	r21, 0x47	; 71
    2018:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    201c:	18 16       	cp	r1, r24
    201e:	4c f5       	brge	.+82     	; 0x2072 <LCD_WriteData+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2020:	6b 85       	ldd	r22, Y+11	; 0x0b
    2022:	7c 85       	ldd	r23, Y+12	; 0x0c
    2024:	8d 85       	ldd	r24, Y+13	; 0x0d
    2026:	9e 85       	ldd	r25, Y+14	; 0x0e
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e2       	ldi	r20, 0x20	; 32
    202e:	51 e4       	ldi	r21, 0x41	; 65
    2030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	bc 01       	movw	r22, r24
    203a:	cd 01       	movw	r24, r26
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	9e 83       	std	Y+6, r25	; 0x06
    2046:	8d 83       	std	Y+5, r24	; 0x05
    2048:	0f c0       	rjmp	.+30     	; 0x2068 <LCD_WriteData+0x1d2>
    204a:	88 ec       	ldi	r24, 0xC8	; 200
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	9c 83       	std	Y+4, r25	; 0x04
    2050:	8b 83       	std	Y+3, r24	; 0x03
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	9c 81       	ldd	r25, Y+4	; 0x04
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <LCD_WriteData+0x1c0>
    205a:	9c 83       	std	Y+4, r25	; 0x04
    205c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205e:	8d 81       	ldd	r24, Y+5	; 0x05
    2060:	9e 81       	ldd	r25, Y+6	; 0x06
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	9e 83       	std	Y+6, r25	; 0x06
    2066:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2068:	8d 81       	ldd	r24, Y+5	; 0x05
    206a:	9e 81       	ldd	r25, Y+6	; 0x06
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	69 f7       	brne	.-38     	; 0x204a <LCD_WriteData+0x1b4>
    2070:	14 c0       	rjmp	.+40     	; 0x209a <LCD_WriteData+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2072:	6f 81       	ldd	r22, Y+7	; 0x07
    2074:	78 85       	ldd	r23, Y+8	; 0x08
    2076:	89 85       	ldd	r24, Y+9	; 0x09
    2078:	9a 85       	ldd	r25, Y+10	; 0x0a
    207a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	9e 83       	std	Y+6, r25	; 0x06
    2084:	8d 83       	std	Y+5, r24	; 0x05
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	9e 81       	ldd	r25, Y+6	; 0x06
    208a:	9a 83       	std	Y+2, r25	; 0x02
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	9a 81       	ldd	r25, Y+2	; 0x02
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	f1 f7       	brne	.-4      	; 0x2092 <LCD_WriteData+0x1fc>
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    209a:	6d 96       	adiw	r28, 0x1d	; 29
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <LCD_WriteString>:




void LCD_WriteString(char *Ptr)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <LCD_WriteString+0x6>
    20b2:	0f 92       	push	r0
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	9b 83       	std	Y+3, r25	; 0x03
    20ba:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    20bc:	19 82       	std	Y+1, r1	; 0x01
    20be:	0e c0       	rjmp	.+28     	; 0x20dc <LCD_WriteString+0x30>
	while(Ptr[i] != '\0')
	{
		LCD_WriteData(Ptr[i]);
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ca:	fc 01       	movw	r30, r24
    20cc:	e2 0f       	add	r30, r18
    20ce:	f3 1f       	adc	r31, r19
    20d0:	80 81       	ld	r24, Z
    20d2:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_WriteData>
		i++;
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	8f 5f       	subi	r24, 0xFF	; 255
    20da:	89 83       	std	Y+1, r24	; 0x01


void LCD_WriteString(char *Ptr)
{
	u8 i = 0;
	while(Ptr[i] != '\0')
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	28 2f       	mov	r18, r24
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	9b 81       	ldd	r25, Y+3	; 0x03
    20e6:	fc 01       	movw	r30, r24
    20e8:	e2 0f       	add	r30, r18
    20ea:	f3 1f       	adc	r31, r19
    20ec:	80 81       	ld	r24, Z
    20ee:	88 23       	and	r24, r24
    20f0:	39 f7       	brne	.-50     	; 0x20c0 <LCD_WriteString+0x14>
	{
		LCD_WriteData(Ptr[i]);
		i++;
	}
}
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <LCD_GoToXY>:




void LCD_GoToXY(u8 X_Pos , u8 Y_Pos)
{
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	00 d0       	rcall	.+0      	; 0x2104 <LCD_GoToXY+0x6>
    2104:	0f 92       	push	r0
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
    210a:	8a 83       	std	Y+2, r24	; 0x02
    210c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Adress;

	if (X_Pos==0)
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	88 23       	and	r24, r24
    2112:	19 f4       	brne	.+6      	; 0x211a <LCD_GoToXY+0x1c>
	{
		Local_Adress=Y_Pos;
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	06 c0       	rjmp	.+12     	; 0x2126 <LCD_GoToXY+0x28>

	}

	else if (X_Pos==1)
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	81 30       	cpi	r24, 0x01	; 1
    211e:	19 f4       	brne	.+6      	; 0x2126 <LCD_GoToXY+0x28>
	{
		Local_Adress = Y_Pos+ 0x40 ;
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	80 5c       	subi	r24, 0xC0	; 192
    2124:	89 83       	std	Y+1, r24	; 0x01
	}

	/* set the calculated address into DDRAM */
	LCD_WriteCommand(Local_Adress+128);
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	80 58       	subi	r24, 0x80	; 128
    212a:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <LCD_WriteCommand>


}
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <LCD_voidDisplayIntegar>:


void LCD_voidDisplayIntegar(u32 COPY_u32Number)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	64 97       	sbiw	r28, 0x14	; 20
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	cd bf       	out	0x3d, r28	; 61
    214e:	69 8b       	std	Y+17, r22	; 0x11
    2150:	7a 8b       	std	Y+18, r23	; 0x12
    2152:	8b 8b       	std	Y+19, r24	; 0x13
    2154:	9c 8b       	std	Y+20, r25	; 0x14
	u8 LOCAL_u8Num[10]={0};
    2156:	8a e0       	ldi	r24, 0x0A	; 10
    2158:	fe 01       	movw	r30, r28
    215a:	37 96       	adiw	r30, 0x07	; 7
    215c:	df 01       	movw	r26, r30
    215e:	98 2f       	mov	r25, r24
    2160:	1d 92       	st	X+, r1
    2162:	9a 95       	dec	r25
    2164:	e9 f7       	brne	.-6      	; 0x2160 <LCD_voidDisplayIntegar+0x26>
	s16 i=0;
    2166:	1e 82       	std	Y+6, r1	; 0x06
    2168:	1d 82       	std	Y+5, r1	; 0x05
	u32 LOCAL_u32Remainder;
	if(COPY_u32Number==0)
    216a:	89 89       	ldd	r24, Y+17	; 0x11
    216c:	9a 89       	ldd	r25, Y+18	; 0x12
    216e:	ab 89       	ldd	r26, Y+19	; 0x13
    2170:	bc 89       	ldd	r27, Y+20	; 0x14
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	a1 05       	cpc	r26, r1
    2176:	b1 05       	cpc	r27, r1
    2178:	19 f4       	brne	.+6      	; 0x2180 <LCD_voidDisplayIntegar+0x46>
	{
		LCD_WriteData('0');
    217a:	80 e3       	ldi	r24, 0x30	; 48
    217c:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_WriteData>
	}

	if(COPY_u32Number>0)
    2180:	89 89       	ldd	r24, Y+17	; 0x11
    2182:	9a 89       	ldd	r25, Y+18	; 0x12
    2184:	ab 89       	ldd	r26, Y+19	; 0x13
    2186:	bc 89       	ldd	r27, Y+20	; 0x14
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	a1 05       	cpc	r26, r1
    218c:	b1 05       	cpc	r27, r1
    218e:	09 f4       	brne	.+2      	; 0x2192 <LCD_voidDisplayIntegar+0x58>
    2190:	55 c0       	rjmp	.+170    	; 0x223c <LCD_voidDisplayIntegar+0x102>
    2192:	32 c0       	rjmp	.+100    	; 0x21f8 <LCD_voidDisplayIntegar+0xbe>
	{
		while(COPY_u32Number!=0)
		{
			LOCAL_u32Remainder=COPY_u32Number%10;
    2194:	89 89       	ldd	r24, Y+17	; 0x11
    2196:	9a 89       	ldd	r25, Y+18	; 0x12
    2198:	ab 89       	ldd	r26, Y+19	; 0x13
    219a:	bc 89       	ldd	r27, Y+20	; 0x14
    219c:	2a e0       	ldi	r18, 0x0A	; 10
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	bc 01       	movw	r22, r24
    21a6:	cd 01       	movw	r24, r26
    21a8:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__udivmodsi4>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	9a 83       	std	Y+2, r25	; 0x02
    21b4:	ab 83       	std	Y+3, r26	; 0x03
    21b6:	bc 83       	std	Y+4, r27	; 0x04
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
    21b8:	2d 81       	ldd	r18, Y+5	; 0x05
    21ba:	3e 81       	ldd	r19, Y+6	; 0x06
    21bc:	49 81       	ldd	r20, Y+1	; 0x01
    21be:	ce 01       	movw	r24, r28
    21c0:	07 96       	adiw	r24, 0x07	; 7
    21c2:	fc 01       	movw	r30, r24
    21c4:	e2 0f       	add	r30, r18
    21c6:	f3 1f       	adc	r31, r19
    21c8:	40 83       	st	Z, r20
			COPY_u32Number=COPY_u32Number/10;
    21ca:	89 89       	ldd	r24, Y+17	; 0x11
    21cc:	9a 89       	ldd	r25, Y+18	; 0x12
    21ce:	ab 89       	ldd	r26, Y+19	; 0x13
    21d0:	bc 89       	ldd	r27, Y+20	; 0x14
    21d2:	2a e0       	ldi	r18, 0x0A	; 10
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e0       	ldi	r20, 0x00	; 0
    21d8:	50 e0       	ldi	r21, 0x00	; 0
    21da:	bc 01       	movw	r22, r24
    21dc:	cd 01       	movw	r24, r26
    21de:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__udivmodsi4>
    21e2:	da 01       	movw	r26, r20
    21e4:	c9 01       	movw	r24, r18
    21e6:	89 8b       	std	Y+17, r24	; 0x11
    21e8:	9a 8b       	std	Y+18, r25	; 0x12
    21ea:	ab 8b       	std	Y+19, r26	; 0x13
    21ec:	bc 8b       	std	Y+20, r27	; 0x14
			i++;
    21ee:	8d 81       	ldd	r24, Y+5	; 0x05
    21f0:	9e 81       	ldd	r25, Y+6	; 0x06
    21f2:	01 96       	adiw	r24, 0x01	; 1
    21f4:	9e 83       	std	Y+6, r25	; 0x06
    21f6:	8d 83       	std	Y+5, r24	; 0x05
		LCD_WriteData('0');
	}

	if(COPY_u32Number>0)
	{
		while(COPY_u32Number!=0)
    21f8:	89 89       	ldd	r24, Y+17	; 0x11
    21fa:	9a 89       	ldd	r25, Y+18	; 0x12
    21fc:	ab 89       	ldd	r26, Y+19	; 0x13
    21fe:	bc 89       	ldd	r27, Y+20	; 0x14
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	a1 05       	cpc	r26, r1
    2204:	b1 05       	cpc	r27, r1
    2206:	31 f6       	brne	.-116    	; 0x2194 <LCD_voidDisplayIntegar+0x5a>
			LOCAL_u32Remainder=COPY_u32Number%10;
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
			COPY_u32Number=COPY_u32Number/10;
			i++;
		}
        i--;
    2208:	8d 81       	ldd	r24, Y+5	; 0x05
    220a:	9e 81       	ldd	r25, Y+6	; 0x06
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	9e 83       	std	Y+6, r25	; 0x06
    2210:	8d 83       	std	Y+5, r24	; 0x05
    2212:	10 c0       	rjmp	.+32     	; 0x2234 <LCD_voidDisplayIntegar+0xfa>
		while(i>=0)
		{
			LCD_WriteData(LOCAL_u8Num[i]+48);
    2214:	2d 81       	ldd	r18, Y+5	; 0x05
    2216:	3e 81       	ldd	r19, Y+6	; 0x06
    2218:	ce 01       	movw	r24, r28
    221a:	07 96       	adiw	r24, 0x07	; 7
    221c:	fc 01       	movw	r30, r24
    221e:	e2 0f       	add	r30, r18
    2220:	f3 1f       	adc	r31, r19
    2222:	80 81       	ld	r24, Z
    2224:	80 5d       	subi	r24, 0xD0	; 208
    2226:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_WriteData>
			i--;
    222a:	8d 81       	ldd	r24, Y+5	; 0x05
    222c:	9e 81       	ldd	r25, Y+6	; 0x06
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	9e 83       	std	Y+6, r25	; 0x06
    2232:	8d 83       	std	Y+5, r24	; 0x05
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
			COPY_u32Number=COPY_u32Number/10;
			i++;
		}
        i--;
		while(i>=0)
    2234:	8d 81       	ldd	r24, Y+5	; 0x05
    2236:	9e 81       	ldd	r25, Y+6	; 0x06
    2238:	99 23       	and	r25, r25
    223a:	64 f7       	brge	.-40     	; 0x2214 <LCD_voidDisplayIntegar+0xda>
		{
			LCD_WriteData(LOCAL_u8Num[i]+48);
			i--;
		}
	}
}
    223c:	64 96       	adiw	r28, 0x14	; 20
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	cd bf       	out	0x3d, r28	; 61
    2248:	cf 91       	pop	r28
    224a:	df 91       	pop	r29
    224c:	08 95       	ret

0000224e <LCD_voidDisplaySpecialChar>:


void LCD_voidDisplaySpecialChar(u8* Ptr_u8PtrChar,u8 CGRam_index,u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	27 97       	sbiw	r28, 0x07	; 7
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	de bf       	out	0x3e, r29	; 62
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	9c 83       	std	Y+4, r25	; 0x04
    2264:	8b 83       	std	Y+3, r24	; 0x03
    2266:	6d 83       	std	Y+5, r22	; 0x05
    2268:	4e 83       	std	Y+6, r20	; 0x06
    226a:	2f 83       	std	Y+7, r18	; 0x07
	LCD_GoToXY( Copy_u8RowNum, Copy_u8ColNum);
    226c:	8e 81       	ldd	r24, Y+6	; 0x06
    226e:	6f 81       	ldd	r22, Y+7	; 0x07
    2270:	0e 94 7f 10 	call	0x20fe	; 0x20fe <LCD_GoToXY>
	LCD_WriteData(CGRam_index);
    2274:	8d 81       	ldd	r24, Y+5	; 0x05
    2276:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_WriteData>
	u8 Local_u8address;
	u8 Local_u8Index;
	if (CGRam_index < 8)
    227a:	8d 81       	ldd	r24, Y+5	; 0x05
    227c:	88 30       	cpi	r24, 0x08	; 8
    227e:	18 f5       	brcc	.+70     	; 0x22c6 <LCD_voidDisplaySpecialChar+0x78>
	{
		Local_u8address= CGRam_index * 8;
    2280:	8d 81       	ldd	r24, Y+5	; 0x05
    2282:	88 2f       	mov	r24, r24
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8address=SET_BIT(Local_u8address,6);
    2294:	8a 81       	ldd	r24, Y+2	; 0x02
    2296:	80 64       	ori	r24, 0x40	; 64
    2298:	8a 83       	std	Y+2, r24	; 0x02
		LCD_WriteCommand(Local_u8address);
    229a:	8a 81       	ldd	r24, Y+2	; 0x02
    229c:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <LCD_WriteCommand>
		for(Local_u8Index = 0;Local_u8Index < 8;Local_u8Index++)
    22a0:	19 82       	std	Y+1, r1	; 0x01
    22a2:	0e c0       	rjmp	.+28     	; 0x22c0 <LCD_voidDisplaySpecialChar+0x72>
		{
			LCD_WriteData(Ptr_u8PtrChar[Local_u8Index]);
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	28 2f       	mov	r18, r24
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	9c 81       	ldd	r25, Y+4	; 0x04
    22ae:	fc 01       	movw	r30, r24
    22b0:	e2 0f       	add	r30, r18
    22b2:	f3 1f       	adc	r31, r19
    22b4:	80 81       	ld	r24, Z
    22b6:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_WriteData>
	if (CGRam_index < 8)
	{
		Local_u8address= CGRam_index * 8;
		Local_u8address=SET_BIT(Local_u8address,6);
		LCD_WriteCommand(Local_u8address);
		for(Local_u8Index = 0;Local_u8Index < 8;Local_u8Index++)
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	8f 5f       	subi	r24, 0xFF	; 255
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	88 30       	cpi	r24, 0x08	; 8
    22c4:	78 f3       	brcs	.-34     	; 0x22a4 <LCD_voidDisplaySpecialChar+0x56>
		{
			LCD_WriteData(Ptr_u8PtrChar[Local_u8Index]);
		}
	}
	LCD_WriteCommand(0x02);
    22c6:	82 e0       	ldi	r24, 0x02	; 2
    22c8:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <LCD_WriteCommand>

}
    22cc:	27 96       	adiw	r28, 0x07	; 7
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	de bf       	out	0x3e, r29	; 62
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	cd bf       	out	0x3d, r28	; 61
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <KPD_Init>:
#include "KPD_CONFIG.h"
#include "KPD_INTERFACE.h"


void KPD_Init()
{
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
			DIO_SetPinDirection(KPD_PORT,KPD_COULMN0_PIN,DIO_OUTPUT);
    22e6:	83 e0       	ldi	r24, 0x03	; 3
    22e8:	60 e0       	ldi	r22, 0x00	; 0
    22ea:	41 e0       	ldi	r20, 0x01	; 1
    22ec:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_COULMN1_PIN,DIO_OUTPUT);
    22f0:	83 e0       	ldi	r24, 0x03	; 3
    22f2:	61 e0       	ldi	r22, 0x01	; 1
    22f4:	41 e0       	ldi	r20, 0x01	; 1
    22f6:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_COULMN2_PIN,DIO_OUTPUT);
    22fa:	83 e0       	ldi	r24, 0x03	; 3
    22fc:	62 e0       	ldi	r22, 0x02	; 2
    22fe:	41 e0       	ldi	r20, 0x01	; 1
    2300:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_COULMN3_PIN,DIO_OUTPUT);
    2304:	83 e0       	ldi	r24, 0x03	; 3
    2306:	63 e0       	ldi	r22, 0x03	; 3
    2308:	41 e0       	ldi	r20, 0x01	; 1
    230a:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <DIO_SetPinDirection>

			DIO_SetPinDirection(KPD_PORT,KPD_ROW0_PIN,DIO_INPUT);
    230e:	83 e0       	ldi	r24, 0x03	; 3
    2310:	64 e0       	ldi	r22, 0x04	; 4
    2312:	40 e0       	ldi	r20, 0x00	; 0
    2314:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_ROW1_PIN,DIO_INPUT);
    2318:	83 e0       	ldi	r24, 0x03	; 3
    231a:	65 e0       	ldi	r22, 0x05	; 5
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_ROW2_PIN,DIO_INPUT);
    2322:	83 e0       	ldi	r24, 0x03	; 3
    2324:	66 e0       	ldi	r22, 0x06	; 6
    2326:	40 e0       	ldi	r20, 0x00	; 0
    2328:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_ROW3_PIN,DIO_INPUT);
    232c:	83 e0       	ldi	r24, 0x03	; 3
    232e:	67 e0       	ldi	r22, 0x07	; 7
    2330:	40 e0       	ldi	r20, 0x00	; 0
    2332:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <DIO_SetPinDirection>
			//DIO_SetPortValue(KPD_PORT,0b00001111);
			DIO_SetPortValue(KPD_PORT,0xff);
    2336:	83 e0       	ldi	r24, 0x03	; 3
    2338:	6f ef       	ldi	r22, 0xFF	; 255
    233a:	0e 94 99 0b 	call	0x1732	; 0x1732 <DIO_SetPortValue>
}
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	08 95       	ret

00002344 <KPD_u8GetPressedKye>:

u8 KPD_u8GetPressedKye(void)
{
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	a1 97       	sbiw	r28, 0x21	; 33
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	de bf       	out	0x3e, r29	; 62
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	cd bf       	out	0x3d, r28	; 61

	/*Indication for the pressed key value*/
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY;
    2358:	8f ef       	ldi	r24, 0xFF	; 255
    235a:	8b 83       	std	Y+3, r24	; 0x03

	u8 Local_u8CoulmnArr[COULMN_NUM]={KPD_COULMN0_PIN,KPD_COULMN1_PIN,KPD_COULMN2_PIN,KPD_COULMN3_PIN};
    235c:	1c 82       	std	Y+4, r1	; 0x04
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	8d 83       	std	Y+5, r24	; 0x05
    2362:	82 e0       	ldi	r24, 0x02	; 2
    2364:	8e 83       	std	Y+6, r24	; 0x06
    2366:	83 e0       	ldi	r24, 0x03	; 3
    2368:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8RowArr[COULMN_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
    236a:	84 e0       	ldi	r24, 0x04	; 4
    236c:	88 87       	std	Y+8, r24	; 0x08
    236e:	85 e0       	ldi	r24, 0x05	; 5
    2370:	89 87       	std	Y+9, r24	; 0x09
    2372:	86 e0       	ldi	r24, 0x06	; 6
    2374:	8a 87       	std	Y+10, r24	; 0x0a
    2376:	87 e0       	ldi	r24, 0x07	; 7
    2378:	8b 87       	std	Y+11, r24	; 0x0b

	/*Array of values of key pad*/
	u8 Local_u8KPDArr[ROW_NUM][COULMN_NUM]= KPD_ARR_VAL;
    237a:	ce 01       	movw	r24, r28
    237c:	0c 96       	adiw	r24, 0x0c	; 12
    237e:	9e 8f       	std	Y+30, r25	; 0x1e
    2380:	8d 8f       	std	Y+29, r24	; 0x1d
    2382:	ef ee       	ldi	r30, 0xEF	; 239
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	f8 a3       	std	Y+32, r31	; 0x20
    2388:	ef 8f       	std	Y+31, r30	; 0x1f
    238a:	f0 e1       	ldi	r31, 0x10	; 16
    238c:	f9 a3       	std	Y+33, r31	; 0x21
    238e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2390:	f8 a1       	ldd	r31, Y+32	; 0x20
    2392:	00 80       	ld	r0, Z
    2394:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2396:	98 a1       	ldd	r25, Y+32	; 0x20
    2398:	01 96       	adiw	r24, 0x01	; 1
    239a:	98 a3       	std	Y+32, r25	; 0x20
    239c:	8f 8f       	std	Y+31, r24	; 0x1f
    239e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    23a0:	fe 8d       	ldd	r31, Y+30	; 0x1e
    23a2:	00 82       	st	Z, r0
    23a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23a8:	01 96       	adiw	r24, 0x01	; 1
    23aa:	9e 8f       	std	Y+30, r25	; 0x1e
    23ac:	8d 8f       	std	Y+29, r24	; 0x1d
    23ae:	99 a1       	ldd	r25, Y+33	; 0x21
    23b0:	91 50       	subi	r25, 0x01	; 1
    23b2:	99 a3       	std	Y+33, r25	; 0x21
    23b4:	e9 a1       	ldd	r30, Y+33	; 0x21
    23b6:	ee 23       	and	r30, r30
    23b8:	51 f7       	brne	.-44     	; 0x238e <KPD_u8GetPressedKye+0x4a>

	u8 Local_u8ColumnIndex,Local_u8RowIndex;

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex < COULMN_NUM; Local_u8ColumnIndex++)
    23ba:	1a 82       	std	Y+2, r1	; 0x02
    23bc:	72 c0       	rjmp	.+228    	; 0x24a2 <KPD_u8GetPressedKye+0x15e>
	{

		DIO_SetPinValue(KPD_PORT,Local_u8CoulmnArr[Local_u8ColumnIndex],DIO_LOW);
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	28 2f       	mov	r18, r24
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	ce 01       	movw	r24, r28
    23c6:	04 96       	adiw	r24, 0x04	; 4
    23c8:	fc 01       	movw	r30, r24
    23ca:	e2 0f       	add	r30, r18
    23cc:	f3 1f       	adc	r31, r19
    23ce:	90 81       	ld	r25, Z
    23d0:	83 e0       	ldi	r24, 0x03	; 3
    23d2:	69 2f       	mov	r22, r25
    23d4:	40 e0       	ldi	r20, 0x00	; 0
    23d6:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>

		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
    23da:	19 82       	std	Y+1, r1	; 0x01
    23dc:	4d c0       	rjmp	.+154    	; 0x2478 <KPD_u8GetPressedKye+0x134>
		{
			if(DIO_GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex])==DIO_LOW)
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	28 2f       	mov	r18, r24
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	ce 01       	movw	r24, r28
    23e6:	08 96       	adiw	r24, 0x08	; 8
    23e8:	fc 01       	movw	r30, r24
    23ea:	e2 0f       	add	r30, r18
    23ec:	f3 1f       	adc	r31, r19
    23ee:	90 81       	ld	r25, Z
    23f0:	83 e0       	ldi	r24, 0x03	; 3
    23f2:	69 2f       	mov	r22, r25
    23f4:	0e 94 df 0a 	call	0x15be	; 0x15be <DIO_GetPinValue>
    23f8:	88 23       	and	r24, r24
    23fa:	d9 f5       	brne	.+118    	; 0x2472 <KPD_u8GetPressedKye+0x12e>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	28 2f       	mov	r18, r24
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	8a 81       	ldd	r24, Y+2	; 0x02
    2404:	48 2f       	mov	r20, r24
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	22 0f       	add	r18, r18
    240a:	33 1f       	adc	r19, r19
    240c:	22 0f       	add	r18, r18
    240e:	33 1f       	adc	r19, r19
    2410:	ce 01       	movw	r24, r28
    2412:	01 96       	adiw	r24, 0x01	; 1
    2414:	82 0f       	add	r24, r18
    2416:	93 1f       	adc	r25, r19
    2418:	84 0f       	add	r24, r20
    241a:	95 1f       	adc	r25, r21
    241c:	fc 01       	movw	r30, r24
    241e:	3b 96       	adiw	r30, 0x0b	; 11
    2420:	80 81       	ld	r24, Z
    2422:	8b 83       	std	Y+3, r24	; 0x03
    2424:	14 c0       	rjmp	.+40     	; 0x244e <KPD_u8GetPressedKye+0x10a>
				while(DIO_GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex])==DIO_LOW)
				{
					Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	28 2f       	mov	r18, r24
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	8a 81       	ldd	r24, Y+2	; 0x02
    242e:	48 2f       	mov	r20, r24
    2430:	50 e0       	ldi	r21, 0x00	; 0
    2432:	22 0f       	add	r18, r18
    2434:	33 1f       	adc	r19, r19
    2436:	22 0f       	add	r18, r18
    2438:	33 1f       	adc	r19, r19
    243a:	ce 01       	movw	r24, r28
    243c:	01 96       	adiw	r24, 0x01	; 1
    243e:	82 0f       	add	r24, r18
    2440:	93 1f       	adc	r25, r19
    2442:	84 0f       	add	r24, r20
    2444:	95 1f       	adc	r25, r21
    2446:	fc 01       	movw	r30, r24
    2448:	3b 96       	adiw	r30, 0x0b	; 11
    244a:	80 81       	ld	r24, Z
    244c:	8b 83       	std	Y+3, r24	; 0x03
		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
		{
			if(DIO_GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex])==DIO_LOW)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
				while(DIO_GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex])==DIO_LOW)
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	28 2f       	mov	r18, r24
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	ce 01       	movw	r24, r28
    2456:	08 96       	adiw	r24, 0x08	; 8
    2458:	fc 01       	movw	r30, r24
    245a:	e2 0f       	add	r30, r18
    245c:	f3 1f       	adc	r31, r19
    245e:	90 81       	ld	r25, Z
    2460:	83 e0       	ldi	r24, 0x03	; 3
    2462:	69 2f       	mov	r22, r25
    2464:	0e 94 df 0a 	call	0x15be	; 0x15be <DIO_GetPinValue>
    2468:	88 23       	and	r24, r24
    246a:	e9 f2       	breq	.-70     	; 0x2426 <KPD_u8GetPressedKye+0xe2>
				{
					Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
				}

				return Local_u8PressedKey;
    246c:	fb 81       	ldd	r31, Y+3	; 0x03
    246e:	fc 8f       	std	Y+28, r31	; 0x1c
    2470:	1e c0       	rjmp	.+60     	; 0x24ae <KPD_u8GetPressedKye+0x16a>
	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex < COULMN_NUM; Local_u8ColumnIndex++)
	{

		DIO_SetPinValue(KPD_PORT,Local_u8CoulmnArr[Local_u8ColumnIndex],DIO_LOW);

		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	8f 5f       	subi	r24, 0xFF	; 255
    2476:	89 83       	std	Y+1, r24	; 0x01
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	84 30       	cpi	r24, 0x04	; 4
    247c:	08 f4       	brcc	.+2      	; 0x2480 <KPD_u8GetPressedKye+0x13c>
    247e:	af cf       	rjmp	.-162    	; 0x23de <KPD_u8GetPressedKye+0x9a>
				}

				return Local_u8PressedKey;
			}
		}
		DIO_SetPinValue(KPD_PORT,Local_u8CoulmnArr[Local_u8ColumnIndex],DIO_HIGH);
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	28 2f       	mov	r18, r24
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	ce 01       	movw	r24, r28
    2488:	04 96       	adiw	r24, 0x04	; 4
    248a:	fc 01       	movw	r30, r24
    248c:	e2 0f       	add	r30, r18
    248e:	f3 1f       	adc	r31, r19
    2490:	90 81       	ld	r25, Z
    2492:	83 e0       	ldi	r24, 0x03	; 3
    2494:	69 2f       	mov	r22, r25
    2496:	41 e0       	ldi	r20, 0x01	; 1
    2498:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
	/*Array of values of key pad*/
	u8 Local_u8KPDArr[ROW_NUM][COULMN_NUM]= KPD_ARR_VAL;

	u8 Local_u8ColumnIndex,Local_u8RowIndex;

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex < COULMN_NUM; Local_u8ColumnIndex++)
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	8f 5f       	subi	r24, 0xFF	; 255
    24a0:	8a 83       	std	Y+2, r24	; 0x02
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	84 30       	cpi	r24, 0x04	; 4
    24a6:	08 f4       	brcc	.+2      	; 0x24aa <KPD_u8GetPressedKye+0x166>
    24a8:	8a cf       	rjmp	.-236    	; 0x23be <KPD_u8GetPressedKye+0x7a>
				return Local_u8PressedKey;
			}
		}
		DIO_SetPinValue(KPD_PORT,Local_u8CoulmnArr[Local_u8ColumnIndex],DIO_HIGH);
	}
	return Local_u8PressedKey;
    24aa:	8b 81       	ldd	r24, Y+3	; 0x03
    24ac:	8c 8f       	std	Y+28, r24	; 0x1c
    24ae:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    24b0:	a1 96       	adiw	r28, 0x21	; 33
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	f8 94       	cli
    24b6:	de bf       	out	0x3e, r29	; 62
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	cd bf       	out	0x3d, r28	; 61
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	08 95       	ret

000024c2 <main>:
#include "../MCAL/TIMER/TIMER_INTERFACE.h"
#include "../MCAL/ADC/ADC_INTERFACE.h"
#include <String.h>
#include <avr/delay.h>
int main(void)
{
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	a6 97       	sbiw	r28, 0x26	; 38
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN0,DIO_INPUT);		//RXD pin
    24d6:	83 e0       	ldi	r24, 0x03	; 3
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	40 e0       	ldi	r20, 0x00	; 0
    24dc:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN1,DIO_OUTPUT);		//TXD pin
    24e0:	83 e0       	ldi	r24, 0x03	; 3
    24e2:	61 e0       	ldi	r22, 0x01	; 1
    24e4:	41 e0       	ldi	r20, 0x01	; 1
    24e6:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);		//OCA1 pin
    24ea:	83 e0       	ldi	r24, 0x03	; 3
    24ec:	65 e0       	ldi	r22, 0x05	; 5
    24ee:	41 e0       	ldi	r20, 0x01	; 1
    24f0:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN5,DIO_OUTPUT);		//room3
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	65 e0       	ldi	r22, 0x05	; 5
    24f8:	41 e0       	ldi	r20, 0x01	; 1
    24fa:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN6,DIO_OUTPUT);		//room2
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	66 e0       	ldi	r22, 0x06	; 6
    2502:	41 e0       	ldi	r20, 0x01	; 1
    2504:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN7,DIO_OUTPUT);		//room1
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	67 e0       	ldi	r22, 0x07	; 7
    250c:	41 e0       	ldi	r20, 0x01	; 1
    250e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <DIO_SetPinDirection>
	DIO_SetPinValue(DIO_PORTA,DIO_PIN5,DIO_LOW);			//room3 value
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	65 e0       	ldi	r22, 0x05	; 5
    2516:	40 e0       	ldi	r20, 0x00	; 0
    2518:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTA,DIO_PIN6,DIO_LOW); 			//room2	value
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	66 e0       	ldi	r22, 0x06	; 6
    2520:	40 e0       	ldi	r20, 0x00	; 0
    2522:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTA,DIO_PIN7,DIO_LOW); 			//room1 value
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	67 e0       	ldi	r22, 0x07	; 7
    252a:	40 e0       	ldi	r20, 0x00	; 0
    252c:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN0,DIO_INPUT);		//LDR pin
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	60 e0       	ldi	r22, 0x00	; 0
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN1,DIO_INPUT);		//LM35 pin
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	61 e0       	ldi	r22, 0x01	; 1
    253e:	40 e0       	ldi	r20, 0x00	; 0
    2540:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN3,DIO_OUTPUT);		//Motot pin
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	63 e0       	ldi	r22, 0x03	; 3
    2548:	41 e0       	ldi	r20, 0x01	; 1
    254a:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <DIO_SetPinDirection>
	Timer_init();											// timer0 init
    254e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <Timer_init>
	ADC_Init();												//ADC init
    2552:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <ADC_Init>
	LCD_Init();												//LCD init
    2556:	0e 94 4b 0c 	call	0x1896	; 0x1896 <LCD_Init>
	USART_voidInit();										//UART init
    255a:	0e 94 a3 05 	call	0xb46	; 0xb46 <USART_voidInit>
	Timer1_init();											//timer1 init
    255e:	0e 94 42 08 	call	0x1084	; 0x1084 <Timer1_init>
	Timer1_SetICR(20000);									//timner 1 top value 20000
    2562:	80 e2       	ldi	r24, 0x20	; 32
    2564:	9e e4       	ldi	r25, 0x4E	; 78
    2566:	0e 94 88 08 	call	0x1110	; 0x1110 <Timer1_SetICR>
	Timer1_SetChannelACompaermach(2000);					//timer 1 compare mach value 2000
    256a:	80 ed       	ldi	r24, 0xD0	; 208
    256c:	97 e0       	ldi	r25, 0x07	; 7
    256e:	0e 94 9a 08 	call	0x1134	; 0x1134 <Timer1_SetChannelACompaermach>
	TIMER_SetOCR0TO(200);
    2572:	88 ec       	ldi	r24, 0xC8	; 200
    2574:	0e 94 30 07 	call	0xe60	; 0xe60 <TIMER_SetOCR0TO>

	u16 ADC_LM35=0;
    2578:	1e a2       	std	Y+38, r1	; 0x26
    257a:	1d a2       	std	Y+37, r1	; 0x25
	u8 ADC_Motor=0,access=0, counter=1,id=0;
    257c:	1c a2       	std	Y+36, r1	; 0x24
    257e:	1b a2       	std	Y+35, r1	; 0x23
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	8a a3       	std	Y+34, r24	; 0x22
    2584:	19 a2       	std	Y+33, r1	; 0x21

	u8 * z=NULL;
    2586:	18 a2       	std	Y+32, r1	; 0x20
    2588:	1f 8e       	std	Y+31, r1	; 0x1f
	u8* pass=NULL;
    258a:	1e 8e       	std	Y+30, r1	; 0x1e
    258c:	1d 8e       	std	Y+29, r1	; 0x1d
    258e:	50 c1       	rjmp	.+672    	; 0x2830 <main+0x36e>
	while((id==0)&&(pass==NULL))
	{
		USART_SendString("Enter your name: ");
    2590:	80 e6       	ldi	r24, 0x60	; 96
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	0e 94 0f 06 	call	0xc1e	; 0xc1e <USART_SendString>
		z=USART_ReciveString();
    2598:	0e 94 38 06 	call	0xc70	; 0xc70 <USART_ReciveString>
    259c:	98 a3       	std	Y+32, r25	; 0x20
    259e:	8f 8f       	std	Y+31, r24	; 0x1f
		if((strcmp(z,"mohmaed")==0)||(strcmp(z,"mohmaed"+0x08)==0)){id=1;}
    25a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25a2:	98 a1       	ldd	r25, Y+32	; 0x20
    25a4:	22 e7       	ldi	r18, 0x72	; 114
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	b9 01       	movw	r22, r18
    25aa:	0e 94 90 15 	call	0x2b20	; 0x2b20 <strcmp>
    25ae:	00 97       	sbiw	r24, 0x00	; 0
    25b0:	49 f0       	breq	.+18     	; 0x25c4 <main+0x102>
    25b2:	2a e7       	ldi	r18, 0x7A	; 122
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25b8:	98 a1       	ldd	r25, Y+32	; 0x20
    25ba:	b9 01       	movw	r22, r18
    25bc:	0e 94 90 15 	call	0x2b20	; 0x2b20 <strcmp>
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	19 f4       	brne	.+6      	; 0x25ca <main+0x108>
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	89 a3       	std	Y+33, r24	; 0x21
    25c8:	2c c1       	rjmp	.+600    	; 0x2822 <main+0x360>
		else if((strcmp(z,"omar")==0)||(strcmp(z,"omar"+0x08)==0)){id=2;}
    25ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25cc:	98 a1       	ldd	r25, Y+32	; 0x20
    25ce:	2a e7       	ldi	r18, 0x7A	; 122
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	b9 01       	movw	r22, r18
    25d4:	0e 94 90 15 	call	0x2b20	; 0x2b20 <strcmp>
    25d8:	00 97       	sbiw	r24, 0x00	; 0
    25da:	49 f0       	breq	.+18     	; 0x25ee <main+0x12c>
    25dc:	22 e8       	ldi	r18, 0x82	; 130
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25e2:	98 a1       	ldd	r25, Y+32	; 0x20
    25e4:	b9 01       	movw	r22, r18
    25e6:	0e 94 90 15 	call	0x2b20	; 0x2b20 <strcmp>
    25ea:	00 97       	sbiw	r24, 0x00	; 0
    25ec:	19 f4       	brne	.+6      	; 0x25f4 <main+0x132>
    25ee:	82 e0       	ldi	r24, 0x02	; 2
    25f0:	89 a3       	std	Y+33, r24	; 0x21
    25f2:	17 c1       	rjmp	.+558    	; 0x2822 <main+0x360>
		else if((strcmp(z,"ahmed")==0)||(strcmp(z,"ahmed"+0x08)==0)){id=3;}
    25f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25f6:	98 a1       	ldd	r25, Y+32	; 0x20
    25f8:	2f e7       	ldi	r18, 0x7F	; 127
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	b9 01       	movw	r22, r18
    25fe:	0e 94 90 15 	call	0x2b20	; 0x2b20 <strcmp>
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	49 f0       	breq	.+18     	; 0x2618 <main+0x156>
    2606:	27 e8       	ldi	r18, 0x87	; 135
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    260c:	98 a1       	ldd	r25, Y+32	; 0x20
    260e:	b9 01       	movw	r22, r18
    2610:	0e 94 90 15 	call	0x2b20	; 0x2b20 <strcmp>
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	19 f4       	brne	.+6      	; 0x261e <main+0x15c>
    2618:	83 e0       	ldi	r24, 0x03	; 3
    261a:	89 a3       	std	Y+33, r24	; 0x21
    261c:	02 c1       	rjmp	.+516    	; 0x2822 <main+0x360>
		else{
			LCD_GoToXY(0,0);
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	60 e0       	ldi	r22, 0x00	; 0
    2622:	0e 94 7f 10 	call	0x20fe	; 0x20fe <LCD_GoToXY>
			LCD_WriteString("try agine");
    2626:	85 e8       	ldi	r24, 0x85	; 133
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_WriteString>
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	aa ef       	ldi	r26, 0xFA	; 250
    2634:	b3 e4       	ldi	r27, 0x43	; 67
    2636:	89 8f       	std	Y+25, r24	; 0x19
    2638:	9a 8f       	std	Y+26, r25	; 0x1a
    263a:	ab 8f       	std	Y+27, r26	; 0x1b
    263c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263e:	69 8d       	ldd	r22, Y+25	; 0x19
    2640:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2642:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2644:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	4a ef       	ldi	r20, 0xFA	; 250
    264c:	54 e4       	ldi	r21, 0x44	; 68
    264e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	8d 8b       	std	Y+21, r24	; 0x15
    2658:	9e 8b       	std	Y+22, r25	; 0x16
    265a:	af 8b       	std	Y+23, r26	; 0x17
    265c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    265e:	6d 89       	ldd	r22, Y+21	; 0x15
    2660:	7e 89       	ldd	r23, Y+22	; 0x16
    2662:	8f 89       	ldd	r24, Y+23	; 0x17
    2664:	98 8d       	ldd	r25, Y+24	; 0x18
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e8       	ldi	r20, 0x80	; 128
    266c:	5f e3       	ldi	r21, 0x3F	; 63
    266e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2672:	88 23       	and	r24, r24
    2674:	2c f4       	brge	.+10     	; 0x2680 <main+0x1be>
		__ticks = 1;
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	9c 8b       	std	Y+20, r25	; 0x14
    267c:	8b 8b       	std	Y+19, r24	; 0x13
    267e:	3f c0       	rjmp	.+126    	; 0x26fe <main+0x23c>
	else if (__tmp > 65535)
    2680:	6d 89       	ldd	r22, Y+21	; 0x15
    2682:	7e 89       	ldd	r23, Y+22	; 0x16
    2684:	8f 89       	ldd	r24, Y+23	; 0x17
    2686:	98 8d       	ldd	r25, Y+24	; 0x18
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	3f ef       	ldi	r19, 0xFF	; 255
    268c:	4f e7       	ldi	r20, 0x7F	; 127
    268e:	57 e4       	ldi	r21, 0x47	; 71
    2690:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2694:	18 16       	cp	r1, r24
    2696:	4c f5       	brge	.+82     	; 0x26ea <main+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2698:	69 8d       	ldd	r22, Y+25	; 0x19
    269a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    269c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    269e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	40 e2       	ldi	r20, 0x20	; 32
    26a6:	51 e4       	ldi	r21, 0x41	; 65
    26a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	bc 01       	movw	r22, r24
    26b2:	cd 01       	movw	r24, r26
    26b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	9c 8b       	std	Y+20, r25	; 0x14
    26be:	8b 8b       	std	Y+19, r24	; 0x13
    26c0:	0f c0       	rjmp	.+30     	; 0x26e0 <main+0x21e>
    26c2:	88 ec       	ldi	r24, 0xC8	; 200
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	9a 8b       	std	Y+18, r25	; 0x12
    26c8:	89 8b       	std	Y+17, r24	; 0x11
    26ca:	89 89       	ldd	r24, Y+17	; 0x11
    26cc:	9a 89       	ldd	r25, Y+18	; 0x12
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f1 f7       	brne	.-4      	; 0x26ce <main+0x20c>
    26d2:	9a 8b       	std	Y+18, r25	; 0x12
    26d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d6:	8b 89       	ldd	r24, Y+19	; 0x13
    26d8:	9c 89       	ldd	r25, Y+20	; 0x14
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	9c 8b       	std	Y+20, r25	; 0x14
    26de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e0:	8b 89       	ldd	r24, Y+19	; 0x13
    26e2:	9c 89       	ldd	r25, Y+20	; 0x14
    26e4:	00 97       	sbiw	r24, 0x00	; 0
    26e6:	69 f7       	brne	.-38     	; 0x26c2 <main+0x200>
    26e8:	9c c0       	rjmp	.+312    	; 0x2822 <main+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ea:	6d 89       	ldd	r22, Y+21	; 0x15
    26ec:	7e 89       	ldd	r23, Y+22	; 0x16
    26ee:	8f 89       	ldd	r24, Y+23	; 0x17
    26f0:	98 8d       	ldd	r25, Y+24	; 0x18
    26f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	9c 8b       	std	Y+20, r25	; 0x14
    26fc:	8b 8b       	std	Y+19, r24	; 0x13
    26fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2700:	9c 89       	ldd	r25, Y+20	; 0x14
    2702:	98 8b       	std	Y+16, r25	; 0x10
    2704:	8f 87       	std	Y+15, r24	; 0x0f
    2706:	8f 85       	ldd	r24, Y+15	; 0x0f
    2708:	98 89       	ldd	r25, Y+16	; 0x10
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <main+0x248>
    270e:	98 8b       	std	Y+16, r25	; 0x10
    2710:	8f 87       	std	Y+15, r24	; 0x0f
    2712:	87 c0       	rjmp	.+270    	; 0x2822 <main+0x360>
			_delay_ms(500);
		}
		while((counter!=3) &&(access==0))
		{
			USART_SendString("Enter your pass: ");
    2714:	8f e8       	ldi	r24, 0x8F	; 143
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	0e 94 0f 06 	call	0xc1e	; 0xc1e <USART_SendString>
			pass=USART_ReciveString();
    271c:	0e 94 38 06 	call	0xc70	; 0xc70 <USART_ReciveString>
    2720:	9e 8f       	std	Y+30, r25	; 0x1e
    2722:	8d 8f       	std	Y+29, r24	; 0x1d
			if(((strcmp(pass,"1111")==0)||(strcmp(pass,"1111"+0x08)==0))&&(id==1)){
    2724:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2726:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2728:	21 ea       	ldi	r18, 0xA1	; 161
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	b9 01       	movw	r22, r18
    272e:	0e 94 90 15 	call	0x2b20	; 0x2b20 <strcmp>
    2732:	00 97       	sbiw	r24, 0x00	; 0
    2734:	49 f0       	breq	.+18     	; 0x2748 <main+0x286>
    2736:	29 ea       	ldi	r18, 0xA9	; 169
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    273c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    273e:	b9 01       	movw	r22, r18
    2740:	0e 94 90 15 	call	0x2b20	; 0x2b20 <strcmp>
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	a9 f4       	brne	.+42     	; 0x2772 <main+0x2b0>
    2748:	89 a1       	ldd	r24, Y+33	; 0x21
    274a:	81 30       	cpi	r24, 0x01	; 1
    274c:	91 f4       	brne	.+36     	; 0x2772 <main+0x2b0>
				access++;
    274e:	8b a1       	ldd	r24, Y+35	; 0x23
    2750:	8f 5f       	subi	r24, 0xFF	; 255
    2752:	8b a3       	std	Y+35, r24	; 0x23
				counter=3;
    2754:	83 e0       	ldi	r24, 0x03	; 3
    2756:	8a a3       	std	Y+34, r24	; 0x22
				LCD_WriteString("welcome back");
    2758:	86 ea       	ldi	r24, 0xA6	; 166
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_WriteString>
				LCD_GoToXY(1,0);
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	60 e0       	ldi	r22, 0x00	; 0
    2764:	0e 94 7f 10 	call	0x20fe	; 0x20fe <LCD_GoToXY>
				LCD_WriteString("mohamed");
    2768:	83 eb       	ldi	r24, 0xB3	; 179
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_WriteString>
    2770:	58 c0       	rjmp	.+176    	; 0x2822 <main+0x360>
			}
			else if(((strcmp(pass,"2222")==0)||(strcmp(pass,"2222"+0x08)==0))&&(id==2)){
    2772:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2774:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2776:	2b eb       	ldi	r18, 0xBB	; 187
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	b9 01       	movw	r22, r18
    277c:	0e 94 90 15 	call	0x2b20	; 0x2b20 <strcmp>
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	49 f0       	breq	.+18     	; 0x2796 <main+0x2d4>
    2784:	23 ec       	ldi	r18, 0xC3	; 195
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	8d 8d       	ldd	r24, Y+29	; 0x1d
    278a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    278c:	b9 01       	movw	r22, r18
    278e:	0e 94 90 15 	call	0x2b20	; 0x2b20 <strcmp>
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	a9 f4       	brne	.+42     	; 0x27c0 <main+0x2fe>
    2796:	89 a1       	ldd	r24, Y+33	; 0x21
    2798:	82 30       	cpi	r24, 0x02	; 2
    279a:	91 f4       	brne	.+36     	; 0x27c0 <main+0x2fe>
				access++;
    279c:	8b a1       	ldd	r24, Y+35	; 0x23
    279e:	8f 5f       	subi	r24, 0xFF	; 255
    27a0:	8b a3       	std	Y+35, r24	; 0x23
				counter=3;
    27a2:	83 e0       	ldi	r24, 0x03	; 3
    27a4:	8a a3       	std	Y+34, r24	; 0x22
				LCD_WriteString("welcome back");
    27a6:	86 ea       	ldi	r24, 0xA6	; 166
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_WriteString>
				LCD_GoToXY(1,0);
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	60 e0       	ldi	r22, 0x00	; 0
    27b2:	0e 94 7f 10 	call	0x20fe	; 0x20fe <LCD_GoToXY>
				LCD_WriteString("omar");
    27b6:	8a e7       	ldi	r24, 0x7A	; 122
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_WriteString>
    27be:	31 c0       	rjmp	.+98     	; 0x2822 <main+0x360>
			}
			else if(((strcmp(pass,"3333")==0)||(strcmp(pass,"3333"+0x08)==0))&&(id==3)){
    27c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27c4:	20 ec       	ldi	r18, 0xC0	; 192
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	b9 01       	movw	r22, r18
    27ca:	0e 94 90 15 	call	0x2b20	; 0x2b20 <strcmp>
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	49 f0       	breq	.+18     	; 0x27e4 <main+0x322>
    27d2:	28 ec       	ldi	r18, 0xC8	; 200
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27da:	b9 01       	movw	r22, r18
    27dc:	0e 94 90 15 	call	0x2b20	; 0x2b20 <strcmp>
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	a9 f4       	brne	.+42     	; 0x280e <main+0x34c>
    27e4:	89 a1       	ldd	r24, Y+33	; 0x21
    27e6:	83 30       	cpi	r24, 0x03	; 3
    27e8:	91 f4       	brne	.+36     	; 0x280e <main+0x34c>
				access++;
    27ea:	8b a1       	ldd	r24, Y+35	; 0x23
    27ec:	8f 5f       	subi	r24, 0xFF	; 255
    27ee:	8b a3       	std	Y+35, r24	; 0x23
				counter=3;
    27f0:	83 e0       	ldi	r24, 0x03	; 3
    27f2:	8a a3       	std	Y+34, r24	; 0x22
				LCD_WriteString("welcome back");
    27f4:	86 ea       	ldi	r24, 0xA6	; 166
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_WriteString>
				LCD_GoToXY(1,0);
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	60 e0       	ldi	r22, 0x00	; 0
    2800:	0e 94 7f 10 	call	0x20fe	; 0x20fe <LCD_GoToXY>
				LCD_WriteString("ahmed");
    2804:	8f e7       	ldi	r24, 0x7F	; 127
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_WriteString>
    280c:	0a c0       	rjmp	.+20     	; 0x2822 <main+0x360>
			}
			else
			{

				USART_SendString("try agine: ");
    280e:	85 ec       	ldi	r24, 0xC5	; 197
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0e 94 0f 06 	call	0xc1e	; 0xc1e <USART_SendString>
				USART_voidSend(0x0D);
    2816:	8d e0       	ldi	r24, 0x0D	; 13
    2818:	0e 94 f5 05 	call	0xbea	; 0xbea <USART_voidSend>
				counter++;
    281c:	8a a1       	ldd	r24, Y+34	; 0x22
    281e:	8f 5f       	subi	r24, 0xFF	; 255
    2820:	8a a3       	std	Y+34, r24	; 0x22
		else{
			LCD_GoToXY(0,0);
			LCD_WriteString("try agine");
			_delay_ms(500);
		}
		while((counter!=3) &&(access==0))
    2822:	8a a1       	ldd	r24, Y+34	; 0x22
    2824:	83 30       	cpi	r24, 0x03	; 3
    2826:	21 f0       	breq	.+8      	; 0x2830 <main+0x36e>
    2828:	8b a1       	ldd	r24, Y+35	; 0x23
    282a:	88 23       	and	r24, r24
    282c:	09 f4       	brne	.+2      	; 0x2830 <main+0x36e>
    282e:	72 cf       	rjmp	.-284    	; 0x2714 <main+0x252>
	u16 ADC_LM35=0;
	u8 ADC_Motor=0,access=0, counter=1,id=0;

	u8 * z=NULL;
	u8* pass=NULL;
	while((id==0)&&(pass==NULL))
    2830:	89 a1       	ldd	r24, Y+33	; 0x21
    2832:	88 23       	and	r24, r24
    2834:	29 f4       	brne	.+10     	; 0x2840 <main+0x37e>
    2836:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2838:	9e 8d       	ldd	r25, Y+30	; 0x1e
    283a:	00 97       	sbiw	r24, 0x00	; 0
    283c:	09 f4       	brne	.+2      	; 0x2840 <main+0x37e>
    283e:	a8 ce       	rjmp	.-688    	; 0x2590 <main+0xce>
				counter++;
			}
		}
	}

	USART_SendString("options: ");
    2840:	81 ed       	ldi	r24, 0xD1	; 209
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	0e 94 0f 06 	call	0xc1e	; 0xc1e <USART_SendString>
	USART_voidSend(0x0D);
    2848:	8d e0       	ldi	r24, 0x0D	; 13
    284a:	0e 94 f5 05 	call	0xbea	; 0xbea <USART_voidSend>
	USART_SendString("4-open door");
    284e:	8b ed       	ldi	r24, 0xDB	; 219
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	0e 94 0f 06 	call	0xc1e	; 0xc1e <USART_SendString>
	Timer1_SetChannelACompaermach(750);
    2856:	8e ee       	ldi	r24, 0xEE	; 238
    2858:	92 e0       	ldi	r25, 0x02	; 2
    285a:	0e 94 9a 08 	call	0x1134	; 0x1134 <Timer1_SetChannelACompaermach>

	while(1)
	{
		ADC_LM35=ADC_Read(0);
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	0e 94 12 0c 	call	0x1824	; 0x1824 <ADC_Read>
    2864:	9e a3       	std	Y+38, r25	; 0x26
    2866:	8d a3       	std	Y+37, r24	; 0x25
		ADC_Motor=ADC_Read(1);
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	0e 94 12 0c 	call	0x1824	; 0x1824 <ADC_Read>
    286e:	8c a3       	std	Y+36, r24	; 0x24
		LCD_WriteCommand(lcd_clr);
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <LCD_WriteCommand>
		LCD_voidDisplayIntegar(ADC_LM35);
    2876:	8d a1       	ldd	r24, Y+37	; 0x25
    2878:	9e a1       	ldd	r25, Y+38	; 0x26
    287a:	cc 01       	movw	r24, r24
    287c:	a0 e0       	ldi	r26, 0x00	; 0
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	bc 01       	movw	r22, r24
    2882:	cd 01       	movw	r24, r26
    2884:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_voidDisplayIntegar>
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	a6 e1       	ldi	r26, 0x16	; 22
    288e:	b4 e4       	ldi	r27, 0x44	; 68
    2890:	8b 87       	std	Y+11, r24	; 0x0b
    2892:	9c 87       	std	Y+12, r25	; 0x0c
    2894:	ad 87       	std	Y+13, r26	; 0x0d
    2896:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2898:	6b 85       	ldd	r22, Y+11	; 0x0b
    289a:	7c 85       	ldd	r23, Y+12	; 0x0c
    289c:	8d 85       	ldd	r24, Y+13	; 0x0d
    289e:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	4a ef       	ldi	r20, 0xFA	; 250
    28a6:	54 e4       	ldi	r21, 0x44	; 68
    28a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	8f 83       	std	Y+7, r24	; 0x07
    28b2:	98 87       	std	Y+8, r25	; 0x08
    28b4:	a9 87       	std	Y+9, r26	; 0x09
    28b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28b8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ba:	78 85       	ldd	r23, Y+8	; 0x08
    28bc:	89 85       	ldd	r24, Y+9	; 0x09
    28be:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	40 e8       	ldi	r20, 0x80	; 128
    28c6:	5f e3       	ldi	r21, 0x3F	; 63
    28c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28cc:	88 23       	and	r24, r24
    28ce:	2c f4       	brge	.+10     	; 0x28da <main+0x418>
		__ticks = 1;
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	9e 83       	std	Y+6, r25	; 0x06
    28d6:	8d 83       	std	Y+5, r24	; 0x05
    28d8:	3f c0       	rjmp	.+126    	; 0x2958 <main+0x496>
	else if (__tmp > 65535)
    28da:	6f 81       	ldd	r22, Y+7	; 0x07
    28dc:	78 85       	ldd	r23, Y+8	; 0x08
    28de:	89 85       	ldd	r24, Y+9	; 0x09
    28e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	3f ef       	ldi	r19, 0xFF	; 255
    28e6:	4f e7       	ldi	r20, 0x7F	; 127
    28e8:	57 e4       	ldi	r21, 0x47	; 71
    28ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ee:	18 16       	cp	r1, r24
    28f0:	4c f5       	brge	.+82     	; 0x2944 <main+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	40 e2       	ldi	r20, 0x20	; 32
    2900:	51 e4       	ldi	r21, 0x41	; 65
    2902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	bc 01       	movw	r22, r24
    290c:	cd 01       	movw	r24, r26
    290e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	9e 83       	std	Y+6, r25	; 0x06
    2918:	8d 83       	std	Y+5, r24	; 0x05
    291a:	0f c0       	rjmp	.+30     	; 0x293a <main+0x478>
    291c:	88 ec       	ldi	r24, 0xC8	; 200
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	9c 83       	std	Y+4, r25	; 0x04
    2922:	8b 83       	std	Y+3, r24	; 0x03
    2924:	8b 81       	ldd	r24, Y+3	; 0x03
    2926:	9c 81       	ldd	r25, Y+4	; 0x04
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	f1 f7       	brne	.-4      	; 0x2928 <main+0x466>
    292c:	9c 83       	std	Y+4, r25	; 0x04
    292e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2930:	8d 81       	ldd	r24, Y+5	; 0x05
    2932:	9e 81       	ldd	r25, Y+6	; 0x06
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	9e 83       	std	Y+6, r25	; 0x06
    2938:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293a:	8d 81       	ldd	r24, Y+5	; 0x05
    293c:	9e 81       	ldd	r25, Y+6	; 0x06
    293e:	00 97       	sbiw	r24, 0x00	; 0
    2940:	69 f7       	brne	.-38     	; 0x291c <main+0x45a>
    2942:	14 c0       	rjmp	.+40     	; 0x296c <main+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2944:	6f 81       	ldd	r22, Y+7	; 0x07
    2946:	78 85       	ldd	r23, Y+8	; 0x08
    2948:	89 85       	ldd	r24, Y+9	; 0x09
    294a:	9a 85       	ldd	r25, Y+10	; 0x0a
    294c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	9e 83       	std	Y+6, r25	; 0x06
    2956:	8d 83       	std	Y+5, r24	; 0x05
    2958:	8d 81       	ldd	r24, Y+5	; 0x05
    295a:	9e 81       	ldd	r25, Y+6	; 0x06
    295c:	9a 83       	std	Y+2, r25	; 0x02
    295e:	89 83       	std	Y+1, r24	; 0x01
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	9a 81       	ldd	r25, Y+2	; 0x02
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	f1 f7       	brne	.-4      	; 0x2964 <main+0x4a2>
    2968:	9a 83       	std	Y+2, r25	; 0x02
    296a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(600);
		if((ADC_LM35<=607)&&(ADC_LM35>100))
    296c:	8d a1       	ldd	r24, Y+37	; 0x25
    296e:	9e a1       	ldd	r25, Y+38	; 0x26
    2970:	22 e0       	ldi	r18, 0x02	; 2
    2972:	80 36       	cpi	r24, 0x60	; 96
    2974:	92 07       	cpc	r25, r18
    2976:	a8 f4       	brcc	.+42     	; 0x29a2 <main+0x4e0>
    2978:	8d a1       	ldd	r24, Y+37	; 0x25
    297a:	9e a1       	ldd	r25, Y+38	; 0x26
    297c:	85 36       	cpi	r24, 0x65	; 101
    297e:	91 05       	cpc	r25, r1
    2980:	80 f0       	brcs	.+32     	; 0x29a2 <main+0x4e0>
		{
			DIO_SetPinValue(DIO_PORTA,DIO_PIN5,DIO_HIGH); //room3
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	65 e0       	ldi	r22, 0x05	; 5
    2986:	41 e0       	ldi	r20, 0x01	; 1
    2988:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTA,DIO_PIN6,DIO_LOW); //room2
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	66 e0       	ldi	r22, 0x06	; 6
    2990:	40 e0       	ldi	r20, 0x00	; 0
    2992:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTA,DIO_PIN7,DIO_LOW); //room1
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	67 e0       	ldi	r22, 0x07	; 7
    299a:	40 e0       	ldi	r20, 0x00	; 0
    299c:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
    29a0:	47 c0       	rjmp	.+142    	; 0x2a30 <main+0x56e>
		}
		else if((ADC_LM35<=666)&&(ADC_LM35>607))
    29a2:	8d a1       	ldd	r24, Y+37	; 0x25
    29a4:	9e a1       	ldd	r25, Y+38	; 0x26
    29a6:	22 e0       	ldi	r18, 0x02	; 2
    29a8:	8b 39       	cpi	r24, 0x9B	; 155
    29aa:	92 07       	cpc	r25, r18
    29ac:	b0 f4       	brcc	.+44     	; 0x29da <main+0x518>
    29ae:	8d a1       	ldd	r24, Y+37	; 0x25
    29b0:	9e a1       	ldd	r25, Y+38	; 0x26
    29b2:	22 e0       	ldi	r18, 0x02	; 2
    29b4:	80 36       	cpi	r24, 0x60	; 96
    29b6:	92 07       	cpc	r25, r18
    29b8:	80 f0       	brcs	.+32     	; 0x29da <main+0x518>
		{
			DIO_SetPinValue(DIO_PORTA,DIO_PIN5,DIO_HIGH); //room3
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	65 e0       	ldi	r22, 0x05	; 5
    29be:	41 e0       	ldi	r20, 0x01	; 1
    29c0:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTA,DIO_PIN6,DIO_HIGH); //room2
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	66 e0       	ldi	r22, 0x06	; 6
    29c8:	41 e0       	ldi	r20, 0x01	; 1
    29ca:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTA,DIO_PIN7,DIO_LOW); //room1
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	67 e0       	ldi	r22, 0x07	; 7
    29d2:	40 e0       	ldi	r20, 0x00	; 0
    29d4:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
    29d8:	2b c0       	rjmp	.+86     	; 0x2a30 <main+0x56e>
		}
		else if((ADC_LM35<=709)&&(ADC_LM35>666))
    29da:	8d a1       	ldd	r24, Y+37	; 0x25
    29dc:	9e a1       	ldd	r25, Y+38	; 0x26
    29de:	22 e0       	ldi	r18, 0x02	; 2
    29e0:	86 3c       	cpi	r24, 0xC6	; 198
    29e2:	92 07       	cpc	r25, r18
    29e4:	b0 f4       	brcc	.+44     	; 0x2a12 <main+0x550>
    29e6:	8d a1       	ldd	r24, Y+37	; 0x25
    29e8:	9e a1       	ldd	r25, Y+38	; 0x26
    29ea:	22 e0       	ldi	r18, 0x02	; 2
    29ec:	8b 39       	cpi	r24, 0x9B	; 155
    29ee:	92 07       	cpc	r25, r18
    29f0:	80 f0       	brcs	.+32     	; 0x2a12 <main+0x550>
		{
			DIO_SetPinValue(DIO_PORTA,DIO_PIN5,DIO_HIGH); //room3
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	65 e0       	ldi	r22, 0x05	; 5
    29f6:	41 e0       	ldi	r20, 0x01	; 1
    29f8:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTA,DIO_PIN6,DIO_HIGH); //room2
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	66 e0       	ldi	r22, 0x06	; 6
    2a00:	41 e0       	ldi	r20, 0x01	; 1
    2a02:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTA,DIO_PIN7,DIO_HIGH); //room1a
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	67 e0       	ldi	r22, 0x07	; 7
    2a0a:	41 e0       	ldi	r20, 0x01	; 1
    2a0c:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
    2a10:	0f c0       	rjmp	.+30     	; 0x2a30 <main+0x56e>
		}
		else
		{
			DIO_SetPinValue(DIO_PORTA,DIO_PIN5,DIO_LOW); //room3
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	65 e0       	ldi	r22, 0x05	; 5
    2a16:	40 e0       	ldi	r20, 0x00	; 0
    2a18:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTA,DIO_PIN6,DIO_LOW); //room2
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	66 e0       	ldi	r22, 0x06	; 6
    2a20:	40 e0       	ldi	r20, 0x00	; 0
    2a22:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTA,DIO_PIN7,DIO_LOW); //room1
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	67 e0       	ldi	r22, 0x07	; 7
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	0e 94 ed 09 	call	0x13da	; 0x13da <DIO_SetPinValue>
		}



		if((ADC_Motor<=100)&&(ADC_Motor>0))
    2a30:	8c a1       	ldd	r24, Y+36	; 0x24
    2a32:	85 36       	cpi	r24, 0x65	; 101
    2a34:	38 f4       	brcc	.+14     	; 0x2a44 <main+0x582>
    2a36:	8c a1       	ldd	r24, Y+36	; 0x24
    2a38:	88 23       	and	r24, r24
    2a3a:	21 f0       	breq	.+8      	; 0x2a44 <main+0x582>
			{
			TIMER_SetOCR0TO(50);
    2a3c:	82 e3       	ldi	r24, 0x32	; 50
    2a3e:	0e 94 30 07 	call	0xe60	; 0xe60 <TIMER_SetOCR0TO>
    2a42:	0d cf       	rjmp	.-486    	; 0x285e <main+0x39c>
			}
			else if((ADC_Motor<=200)&&(ADC_Motor>100))
    2a44:	8c a1       	ldd	r24, Y+36	; 0x24
    2a46:	89 3c       	cpi	r24, 0xC9	; 201
    2a48:	38 f4       	brcc	.+14     	; 0x2a58 <main+0x596>
    2a4a:	8c a1       	ldd	r24, Y+36	; 0x24
    2a4c:	85 36       	cpi	r24, 0x65	; 101
    2a4e:	20 f0       	brcs	.+8      	; 0x2a58 <main+0x596>
			{
				TIMER_SetOCR0TO(100);
    2a50:	84 e6       	ldi	r24, 0x64	; 100
    2a52:	0e 94 30 07 	call	0xe60	; 0xe60 <TIMER_SetOCR0TO>
    2a56:	03 cf       	rjmp	.-506    	; 0x285e <main+0x39c>
			}
			else if((ADC_Motor<=305)&&(ADC_Motor>200))
    2a58:	8c a1       	ldd	r24, Y+36	; 0x24
    2a5a:	89 3c       	cpi	r24, 0xC9	; 201
    2a5c:	20 f0       	brcs	.+8      	; 0x2a66 <main+0x5a4>
			{
				TIMER_SetOCR0TO(200);
    2a5e:	88 ec       	ldi	r24, 0xC8	; 200
    2a60:	0e 94 30 07 	call	0xe60	; 0xe60 <TIMER_SetOCR0TO>
    2a64:	fc ce       	rjmp	.-520    	; 0x285e <main+0x39c>
			}
			else
			{
				TIMER_SetOCR0TO(250);
    2a66:	8a ef       	ldi	r24, 0xFA	; 250
    2a68:	0e 94 30 07 	call	0xe60	; 0xe60 <TIMER_SetOCR0TO>
    2a6c:	f8 ce       	rjmp	.-528    	; 0x285e <main+0x39c>

00002a6e <__udivmodsi4>:
    2a6e:	a1 e2       	ldi	r26, 0x21	; 33
    2a70:	1a 2e       	mov	r1, r26
    2a72:	aa 1b       	sub	r26, r26
    2a74:	bb 1b       	sub	r27, r27
    2a76:	fd 01       	movw	r30, r26
    2a78:	0d c0       	rjmp	.+26     	; 0x2a94 <__udivmodsi4_ep>

00002a7a <__udivmodsi4_loop>:
    2a7a:	aa 1f       	adc	r26, r26
    2a7c:	bb 1f       	adc	r27, r27
    2a7e:	ee 1f       	adc	r30, r30
    2a80:	ff 1f       	adc	r31, r31
    2a82:	a2 17       	cp	r26, r18
    2a84:	b3 07       	cpc	r27, r19
    2a86:	e4 07       	cpc	r30, r20
    2a88:	f5 07       	cpc	r31, r21
    2a8a:	20 f0       	brcs	.+8      	; 0x2a94 <__udivmodsi4_ep>
    2a8c:	a2 1b       	sub	r26, r18
    2a8e:	b3 0b       	sbc	r27, r19
    2a90:	e4 0b       	sbc	r30, r20
    2a92:	f5 0b       	sbc	r31, r21

00002a94 <__udivmodsi4_ep>:
    2a94:	66 1f       	adc	r22, r22
    2a96:	77 1f       	adc	r23, r23
    2a98:	88 1f       	adc	r24, r24
    2a9a:	99 1f       	adc	r25, r25
    2a9c:	1a 94       	dec	r1
    2a9e:	69 f7       	brne	.-38     	; 0x2a7a <__udivmodsi4_loop>
    2aa0:	60 95       	com	r22
    2aa2:	70 95       	com	r23
    2aa4:	80 95       	com	r24
    2aa6:	90 95       	com	r25
    2aa8:	9b 01       	movw	r18, r22
    2aaa:	ac 01       	movw	r20, r24
    2aac:	bd 01       	movw	r22, r26
    2aae:	cf 01       	movw	r24, r30
    2ab0:	08 95       	ret

00002ab2 <__prologue_saves__>:
    2ab2:	2f 92       	push	r2
    2ab4:	3f 92       	push	r3
    2ab6:	4f 92       	push	r4
    2ab8:	5f 92       	push	r5
    2aba:	6f 92       	push	r6
    2abc:	7f 92       	push	r7
    2abe:	8f 92       	push	r8
    2ac0:	9f 92       	push	r9
    2ac2:	af 92       	push	r10
    2ac4:	bf 92       	push	r11
    2ac6:	cf 92       	push	r12
    2ac8:	df 92       	push	r13
    2aca:	ef 92       	push	r14
    2acc:	ff 92       	push	r15
    2ace:	0f 93       	push	r16
    2ad0:	1f 93       	push	r17
    2ad2:	cf 93       	push	r28
    2ad4:	df 93       	push	r29
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	ca 1b       	sub	r28, r26
    2adc:	db 0b       	sbc	r29, r27
    2ade:	0f b6       	in	r0, 0x3f	; 63
    2ae0:	f8 94       	cli
    2ae2:	de bf       	out	0x3e, r29	; 62
    2ae4:	0f be       	out	0x3f, r0	; 63
    2ae6:	cd bf       	out	0x3d, r28	; 61
    2ae8:	09 94       	ijmp

00002aea <__epilogue_restores__>:
    2aea:	2a 88       	ldd	r2, Y+18	; 0x12
    2aec:	39 88       	ldd	r3, Y+17	; 0x11
    2aee:	48 88       	ldd	r4, Y+16	; 0x10
    2af0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2af2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2af4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2af6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2af8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2afa:	aa 84       	ldd	r10, Y+10	; 0x0a
    2afc:	b9 84       	ldd	r11, Y+9	; 0x09
    2afe:	c8 84       	ldd	r12, Y+8	; 0x08
    2b00:	df 80       	ldd	r13, Y+7	; 0x07
    2b02:	ee 80       	ldd	r14, Y+6	; 0x06
    2b04:	fd 80       	ldd	r15, Y+5	; 0x05
    2b06:	0c 81       	ldd	r16, Y+4	; 0x04
    2b08:	1b 81       	ldd	r17, Y+3	; 0x03
    2b0a:	aa 81       	ldd	r26, Y+2	; 0x02
    2b0c:	b9 81       	ldd	r27, Y+1	; 0x01
    2b0e:	ce 0f       	add	r28, r30
    2b10:	d1 1d       	adc	r29, r1
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	f8 94       	cli
    2b16:	de bf       	out	0x3e, r29	; 62
    2b18:	0f be       	out	0x3f, r0	; 63
    2b1a:	cd bf       	out	0x3d, r28	; 61
    2b1c:	ed 01       	movw	r28, r26
    2b1e:	08 95       	ret

00002b20 <strcmp>:
    2b20:	fb 01       	movw	r30, r22
    2b22:	dc 01       	movw	r26, r24
    2b24:	8d 91       	ld	r24, X+
    2b26:	01 90       	ld	r0, Z+
    2b28:	80 19       	sub	r24, r0
    2b2a:	01 10       	cpse	r0, r1
    2b2c:	d9 f3       	breq	.-10     	; 0x2b24 <strcmp+0x4>
    2b2e:	99 0b       	sbc	r25, r25
    2b30:	08 95       	ret

00002b32 <_exit>:
    2b32:	f8 94       	cli

00002b34 <__stop_program>:
    2b34:	ff cf       	rjmp	.-2      	; 0x2b34 <__stop_program>
