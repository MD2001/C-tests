
STEPPER_MOTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003242  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  00003242  000032b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000028bc  00000000  00000000  000033d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000012a7  00000000  00000000  00005c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00006f33  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d3  00000000  00000000  000070b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200f  00000000  00000000  00007286  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  00009295  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  0000a405  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000b408  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  0000b5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  0000b869  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c117  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 bb 18 	call	0x3176	; 0x3176 <main>
      7a:	0c 94 1f 19 	jmp	0x323e	; 0x323e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 14 19 	jmp	0x3228	; 0x3228 <__epilogue_restores__+0x20>

000007ea <__floatunsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f0 18 	jmp	0x31e0	; 0x31e0 <__prologue_saves__+0x10>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	19 f4       	brne	.+6      	; 0x80a <__floatunsisf+0x20>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	60 c0       	rjmp	.+192    	; 0x8ca <__stack+0x6b>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	c8 2e       	mov	r12, r24
     812:	d1 2c       	mov	r13, r1
     814:	dc 82       	std	Y+4, r13	; 0x04
     816:	cb 82       	std	Y+3, r12	; 0x03
     818:	ed 82       	std	Y+5, r14	; 0x05
     81a:	fe 82       	std	Y+6, r15	; 0x06
     81c:	0f 83       	std	Y+7, r16	; 0x07
     81e:	18 87       	std	Y+8, r17	; 0x08
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__clzsi2>
     828:	fc 01       	movw	r30, r24
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f7 ff       	sbrs	r31, 7
     82e:	3b c0       	rjmp	.+118    	; 0x8a6 <__stack+0x47>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	2e 1b       	sub	r18, r30
     836:	3f 0b       	sbc	r19, r31
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatunsisf+0x5e>
     840:	d6 94       	lsr	r13
     842:	c7 94       	ror	r12
     844:	b7 94       	ror	r11
     846:	a7 94       	ror	r10
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatunsisf+0x56>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	2a 95       	dec	r18
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0x74>
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	8e 21       	and	r24, r14
     872:	9f 21       	and	r25, r15
     874:	a0 23       	and	r26, r16
     876:	b1 23       	and	r27, r17
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	4a 29       	or	r20, r10
     88a:	5b 29       	or	r21, r11
     88c:	6c 29       	or	r22, r12
     88e:	7d 29       	or	r23, r13
     890:	4d 83       	std	Y+5, r20	; 0x05
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	6f 83       	std	Y+7, r22	; 0x07
     896:	78 87       	std	Y+8, r23	; 0x08
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8e 1b       	sub	r24, r30
     89e:	9f 0b       	sbc	r25, r31
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__stack+0x6b>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	81 f0       	breq	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	0e 2e       	mov	r0, r30
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	00 1f       	adc	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	0a 94       	dec	r0
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <__stack+0x4f>
     8ba:	ed 82       	std	Y+5, r14	; 0x05
     8bc:	fe 82       	std	Y+6, r15	; 0x06
     8be:	0f 83       	std	Y+7, r16	; 0x07
     8c0:	18 87       	std	Y+8, r17	; 0x08
     8c2:	ce 1a       	sub	r12, r30
     8c4:	df 0a       	sbc	r13, r31
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     8d4:	28 96       	adiw	r28, 0x08	; 8
     8d6:	ea e0       	ldi	r30, 0x0A	; 10
     8d8:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <__epilogue_restores__+0x10>

000008dc <__clzsi2>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	e8 16       	cp	r14, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f8 06       	cpc	r15, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 07       	cpc	r16, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	18 07       	cpc	r17, r24
     8f8:	88 f4       	brcc	.+34     	; 0x91c <__clzsi2+0x40>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	e8 16       	cp	r14, r24
     8fe:	f1 04       	cpc	r15, r1
     900:	01 05       	cpc	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	31 f0       	breq	.+12     	; 0x912 <__clzsi2+0x36>
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x36>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	17 c0       	rjmp	.+46     	; 0x940 <__clzsi2+0x64>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__clzsi2+0x64>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	f8 06       	cpc	r15, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 07       	cpc	r16, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	18 07       	cpc	r17, r24
     92c:	28 f0       	brcs	.+10     	; 0x938 <__clzsi2+0x5c>
     92e:	88 e1       	ldi	r24, 0x18	; 24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x64>
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 1b       	sub	r18, r24
     94a:	39 0b       	sbc	r19, r25
     94c:	4a 0b       	sbc	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	04 c0       	rjmp	.+8      	; 0x95a <__clzsi2+0x7e>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	8a 95       	dec	r24
     95c:	d2 f7       	brpl	.-12     	; 0x952 <__clzsi2+0x76>
     95e:	f7 01       	movw	r30, r14
     960:	e8 59       	subi	r30, 0x98	; 152
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	80 81       	ld	r24, Z
     966:	28 1b       	sub	r18, r24
     968:	31 09       	sbc	r19, r1
     96a:	41 09       	sbc	r20, r1
     96c:	51 09       	sbc	r21, r1
     96e:	c9 01       	movw	r24, r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <__pack_f>:
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	fc 01       	movw	r30, r24
     986:	e4 80       	ldd	r14, Z+4	; 0x04
     988:	f5 80       	ldd	r15, Z+5	; 0x05
     98a:	06 81       	ldd	r16, Z+6	; 0x06
     98c:	17 81       	ldd	r17, Z+7	; 0x07
     98e:	d1 80       	ldd	r13, Z+1	; 0x01
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	48 f4       	brcc	.+18     	; 0x9a8 <__pack_f+0x2e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 2a       	or	r14, r24
     9a0:	f9 2a       	or	r15, r25
     9a2:	0a 2b       	or	r16, r26
     9a4:	1b 2b       	or	r17, r27
     9a6:	a5 c0       	rjmp	.+330    	; 0xaf2 <__pack_f+0x178>
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__pack_f+0x34>
     9ac:	9f c0       	rjmp	.+318    	; 0xaec <__pack_f+0x172>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__pack_f+0x40>
     9b2:	ee 24       	eor	r14, r14
     9b4:	ff 24       	eor	r15, r15
     9b6:	87 01       	movw	r16, r14
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__pack_f+0x4a>
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	01 05       	cpc	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__pack_f+0x50>
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	96 c0       	rjmp	.+300    	; 0xaf6 <__pack_f+0x17c>
     9ca:	62 81       	ldd	r22, Z+2	; 0x02
     9cc:	73 81       	ldd	r23, Z+3	; 0x03
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
     9d0:	62 38       	cpi	r22, 0x82	; 130
     9d2:	79 07       	cpc	r23, r25
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__pack_f+0x5e>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <__pack_f+0x114>
     9d8:	22 e8       	ldi	r18, 0x82	; 130
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	2a 31       	cpi	r18, 0x1A	; 26
     9e2:	31 05       	cpc	r19, r1
     9e4:	2c f0       	brlt	.+10     	; 0x9f0 <__pack_f+0x76>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <__pack_f+0xca>
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__pack_f+0x86>
     9f8:	76 95       	lsr	r23
     9fa:	67 95       	ror	r22
     9fc:	57 95       	ror	r21
     9fe:	47 95       	ror	r20
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__pack_f+0x7e>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x9c>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	2a 95       	dec	r18
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__pack_f+0x94>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	8e 21       	and	r24, r14
     a22:	9f 21       	and	r25, r15
     a24:	a0 23       	and	r26, r16
     a26:	b1 23       	and	r27, r17
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__pack_f+0xbe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	9a 01       	movw	r18, r20
     a3a:	ab 01       	movw	r20, r22
     a3c:	28 2b       	or	r18, r24
     a3e:	39 2b       	or	r19, r25
     a40:	4a 2b       	or	r20, r26
     a42:	5b 2b       	or	r21, r27
     a44:	da 01       	movw	r26, r20
     a46:	c9 01       	movw	r24, r18
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	90 70       	andi	r25, 0x00	; 0
     a4c:	a0 70       	andi	r26, 0x00	; 0
     a4e:	b0 70       	andi	r27, 0x00	; 0
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	39 f4       	brne	.+14     	; 0xa68 <__pack_f+0xee>
     a5a:	27 ff       	sbrs	r18, 7
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__pack_f+0xf6>
     a5e:	20 5c       	subi	r18, 0xC0	; 192
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0xf6>
     a68:	21 5c       	subi	r18, 0xC1	; 193
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	4f 4f       	sbci	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	3a 07       	cpc	r19, r26
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	4a 07       	cpc	r20, r26
     a7e:	a0 e4       	ldi	r26, 0x40	; 64
     a80:	5a 07       	cpc	r21, r26
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__pack_f+0x10e>
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	79 01       	movw	r14, r18
     a8a:	8a 01       	movw	r16, r20
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <__pack_f+0x162>
     a8e:	60 38       	cpi	r22, 0x80	; 128
     a90:	71 05       	cpc	r23, r1
     a92:	64 f5       	brge	.+88     	; 0xaec <__pack_f+0x172>
     a94:	fb 01       	movw	r30, r22
     a96:	e1 58       	subi	r30, 0x81	; 129
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	d8 01       	movw	r26, r16
     a9c:	c7 01       	movw	r24, r14
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	90 70       	andi	r25, 0x00	; 0
     aa2:	a0 70       	andi	r26, 0x00	; 0
     aa4:	b0 70       	andi	r27, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <__pack_f+0x144>
     ab0:	e7 fe       	sbrs	r14, 7
     ab2:	0d c0       	rjmp	.+26     	; 0xace <__pack_f+0x154>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__pack_f+0x14c>
     abe:	8f e3       	ldi	r24, 0x3F	; 63
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e8 0e       	add	r14, r24
     ac8:	f9 1e       	adc	r15, r25
     aca:	0a 1f       	adc	r16, r26
     acc:	1b 1f       	adc	r17, r27
     ace:	17 ff       	sbrs	r17, 7
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x162>
     ad2:	16 95       	lsr	r17
     ad4:	07 95       	ror	r16
     ad6:	f7 94       	ror	r15
     ad8:	e7 94       	ror	r14
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	16 95       	lsr	r17
     ae0:	07 95       	ror	r16
     ae2:	f7 94       	ror	r15
     ae4:	e7 94       	ror	r14
     ae6:	8a 95       	dec	r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__pack_f+0x164>
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x17c>
     aec:	ee 24       	eor	r14, r14
     aee:	ff 24       	eor	r15, r15
     af0:	87 01       	movw	r16, r14
     af2:	ef ef       	ldi	r30, 0xFF	; 255
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	6e 2f       	mov	r22, r30
     af8:	67 95       	ror	r22
     afa:	66 27       	eor	r22, r22
     afc:	67 95       	ror	r22
     afe:	90 2f       	mov	r25, r16
     b00:	9f 77       	andi	r25, 0x7F	; 127
     b02:	d7 94       	ror	r13
     b04:	dd 24       	eor	r13, r13
     b06:	d7 94       	ror	r13
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 95       	lsr	r24
     b0c:	49 2f       	mov	r20, r25
     b0e:	46 2b       	or	r20, r22
     b10:	58 2f       	mov	r21, r24
     b12:	5d 29       	or	r21, r13
     b14:	b7 01       	movw	r22, r14
     b16:	ca 01       	movw	r24, r20
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	08 95       	ret

00000b24 <__unpack_f>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	22 81       	ldd	r18, Z+2	; 0x02
     b2e:	62 2f       	mov	r22, r18
     b30:	6f 77       	andi	r22, 0x7F	; 127
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	22 1f       	adc	r18, r18
     b36:	22 27       	eor	r18, r18
     b38:	22 1f       	adc	r18, r18
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	89 2f       	mov	r24, r25
     b3e:	88 0f       	add	r24, r24
     b40:	82 2b       	or	r24, r18
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	99 1f       	adc	r25, r25
     b48:	99 27       	eor	r25, r25
     b4a:	99 1f       	adc	r25, r25
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f5       	brne	.+106    	; 0xbc2 <__unpack_f+0x9e>
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <__unpack_f+0x42>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <__unpack_f+0xb0>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	9a 01       	movw	r18, r20
     b74:	ab 01       	movw	r20, r22
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d1 f7       	brne	.-12     	; 0xb78 <__unpack_f+0x54>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8c 93       	st	X, r24
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__unpack_f+0x80>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 30       	cpi	r18, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	38 07       	cpc	r19, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	48 07       	cpc	r20, r24
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	58 07       	cpc	r21, r24
     bb2:	58 f3       	brcs	.-42     	; 0xb8a <__unpack_f+0x66>
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 93       	st	X+, r18
     bb8:	3d 93       	st	X+, r19
     bba:	4d 93       	st	X+, r20
     bbc:	5c 93       	st	X, r21
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	08 95       	ret
     bc2:	2f 3f       	cpi	r18, 0xFF	; 255
     bc4:	31 05       	cpc	r19, r1
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xc2>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0xb4>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	8c 93       	st	X, r24
     bd6:	08 95       	ret
     bd8:	64 ff       	sbrs	r22, 4
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xbe>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <__unpack_f+0xe2>
     be2:	1c 92       	st	X, r1
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <__unpack_f+0xe2>
     be6:	2f 57       	subi	r18, 0x7F	; 127
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	3c 93       	st	X, r19
     bee:	2e 93       	st	-X, r18
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__unpack_f+0xd4>
     c04:	70 64       	ori	r23, 0x40	; 64
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	4d 93       	st	X+, r20
     c0a:	5d 93       	st	X+, r21
     c0c:	6d 93       	st	X+, r22
     c0e:	7c 93       	st	X, r23
     c10:	17 97       	sbiw	r26, 0x07	; 7
     c12:	08 95       	ret

00000c14 <__fpcmp_parts_f>:
     c14:	1f 93       	push	r17
     c16:	dc 01       	movw	r26, r24
     c18:	fb 01       	movw	r30, r22
     c1a:	9c 91       	ld	r25, X
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__fpcmp_parts_f+0xe>
     c20:	47 c0       	rjmp	.+142    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__fpcmp_parts_f+0x16>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__fpcmp_parts_f+0x2e>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	99 f5       	brne	.+102    	; 0xc9c <__fpcmp_parts_f+0x88>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	68 2f       	mov	r22, r24
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	61 1b       	sub	r22, r17
     c3e:	71 09       	sbc	r23, r1
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <__fpcmp_parts_f+0xac>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	21 f0       	breq	.+8      	; 0xc4e <__fpcmp_parts_f+0x3a>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	31 f4       	brne	.+12     	; 0xc56 <__fpcmp_parts_f+0x42>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f1       	breq	.+110    	; 0xcbc <__fpcmp_parts_f+0xa8>
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	88 23       	and	r24, r24
     c52:	89 f1       	breq	.+98     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     c54:	2d c0       	rjmp	.+90     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	f1 f0       	breq	.+60     	; 0xc9c <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	18 17       	cp	r17, r24
     c64:	d9 f4       	brne	.+54     	; 0xc9c <__fpcmp_parts_f+0x88>
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	94 f0       	brlt	.+36     	; 0xc9c <__fpcmp_parts_f+0x88>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	bc f0       	brlt	.+46     	; 0xcac <__fpcmp_parts_f+0x98>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8d 91       	ld	r24, X+
     c82:	9d 91       	ld	r25, X+
     c84:	0d 90       	ld	r0, X+
     c86:	bc 91       	ld	r27, X
     c88:	a0 2d       	mov	r26, r0
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	18 f4       	brcc	.+6      	; 0xca2 <__fpcmp_parts_f+0x8e>
     c9c:	11 23       	and	r17, r17
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	a4 07       	cpc	r26, r20
     ca8:	b5 07       	cpc	r27, r21
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fpcmp_parts_f+0xa8>
     cac:	11 23       	and	r17, r17
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__fpcmp_parts_f+0xa2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__fpcmp_parts_f+0xac>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__fpcmp_parts_f+0xac>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <DIO_SetPinDirection>:
#include "DIO_INTERFACE.h"



void DIO_SetPinDirection(u8 Port , u8 Pin , u8 Direction)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	00 d0       	rcall	.+0      	; 0xccc <DIO_SetPinDirection+0x6>
     ccc:	00 d0       	rcall	.+0      	; 0xcce <DIO_SetPinDirection+0x8>
     cce:	0f 92       	push	r0
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	89 83       	std	Y+1, r24	; 0x01
     cd6:	6a 83       	std	Y+2, r22	; 0x02
     cd8:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	3d 83       	std	Y+5, r19	; 0x05
     ce2:	2c 83       	std	Y+4, r18	; 0x04
     ce4:	8c 81       	ldd	r24, Y+4	; 0x04
     ce6:	9d 81       	ldd	r25, Y+5	; 0x05
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	91 05       	cpc	r25, r1
     cec:	09 f4       	brne	.+2      	; 0xcf0 <DIO_SetPinDirection+0x2a>
     cee:	47 c0       	rjmp	.+142    	; 0xd7e <DIO_SetPinDirection+0xb8>
     cf0:	2c 81       	ldd	r18, Y+4	; 0x04
     cf2:	3d 81       	ldd	r19, Y+5	; 0x05
     cf4:	22 30       	cpi	r18, 0x02	; 2
     cf6:	31 05       	cpc	r19, r1
     cf8:	2c f4       	brge	.+10     	; 0xd04 <DIO_SetPinDirection+0x3e>
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	9d 81       	ldd	r25, Y+5	; 0x05
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	71 f0       	breq	.+28     	; 0xd1e <DIO_SetPinDirection+0x58>
     d02:	cb c0       	rjmp	.+406    	; 0xe9a <DIO_SetPinDirection+0x1d4>
     d04:	2c 81       	ldd	r18, Y+4	; 0x04
     d06:	3d 81       	ldd	r19, Y+5	; 0x05
     d08:	22 30       	cpi	r18, 0x02	; 2
     d0a:	31 05       	cpc	r19, r1
     d0c:	09 f4       	brne	.+2      	; 0xd10 <DIO_SetPinDirection+0x4a>
     d0e:	67 c0       	rjmp	.+206    	; 0xdde <DIO_SetPinDirection+0x118>
     d10:	8c 81       	ldd	r24, Y+4	; 0x04
     d12:	9d 81       	ldd	r25, Y+5	; 0x05
     d14:	83 30       	cpi	r24, 0x03	; 3
     d16:	91 05       	cpc	r25, r1
     d18:	09 f4       	brne	.+2      	; 0xd1c <DIO_SetPinDirection+0x56>
     d1a:	91 c0       	rjmp	.+290    	; 0xe3e <DIO_SetPinDirection+0x178>
     d1c:	be c0       	rjmp	.+380    	; 0xe9a <DIO_SetPinDirection+0x1d4>
	{
		case DIO_PORTA: 
		if(Direction == DIO_INPUT) 
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	88 23       	and	r24, r24
     d22:	a9 f4       	brne	.+42     	; 0xd4e <DIO_SetPinDirection+0x88>
		{ 
			CLR_BIT(DDRA_REG,Pin);
     d24:	aa e3       	ldi	r26, 0x3A	; 58
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	ea e3       	ldi	r30, 0x3A	; 58
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	48 2f       	mov	r20, r24
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	02 2e       	mov	r0, r18
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <DIO_SetPinDirection+0x7c>
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	0a 94       	dec	r0
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <DIO_SetPinDirection+0x78>
     d46:	80 95       	com	r24
     d48:	84 23       	and	r24, r20
     d4a:	8c 93       	st	X, r24
     d4c:	a6 c0       	rjmp	.+332    	; 0xe9a <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	81 30       	cpi	r24, 0x01	; 1
     d52:	09 f0       	breq	.+2      	; 0xd56 <DIO_SetPinDirection+0x90>
     d54:	a2 c0       	rjmp	.+324    	; 0xe9a <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRA_REG,Pin);
     d56:	aa e3       	ldi	r26, 0x3A	; 58
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	ea e3       	ldi	r30, 0x3A	; 58
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_SetPinDirection+0xae>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_SetPinDirection+0xaa>
     d78:	84 2b       	or	r24, r20
     d7a:	8c 93       	st	X, r24
     d7c:	8e c0       	rjmp	.+284    	; 0xe9a <DIO_SetPinDirection+0x1d4>
		}  
		break;
		case DIO_PORTB: 
		if(Direction == DIO_INPUT) 
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	88 23       	and	r24, r24
     d82:	a9 f4       	brne	.+42     	; 0xdae <DIO_SetPinDirection+0xe8>
		{ 
			CLR_BIT(DDRB_REG,Pin);
     d84:	a7 e3       	ldi	r26, 0x37	; 55
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e7 e3       	ldi	r30, 0x37	; 55
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	48 2f       	mov	r20, r24
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	02 2e       	mov	r0, r18
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <DIO_SetPinDirection+0xdc>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	0a 94       	dec	r0
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <DIO_SetPinDirection+0xd8>
     da6:	80 95       	com	r24
     da8:	84 23       	and	r24, r20
     daa:	8c 93       	st	X, r24
     dac:	76 c0       	rjmp	.+236    	; 0xe9a <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	81 30       	cpi	r24, 0x01	; 1
     db2:	09 f0       	breq	.+2      	; 0xdb6 <DIO_SetPinDirection+0xf0>
     db4:	72 c0       	rjmp	.+228    	; 0xe9a <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRB_REG,Pin);
     db6:	a7 e3       	ldi	r26, 0x37	; 55
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e7 e3       	ldi	r30, 0x37	; 55
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	48 2f       	mov	r20, r24
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	02 2e       	mov	r0, r18
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <DIO_SetPinDirection+0x10e>
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	0a 94       	dec	r0
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <DIO_SetPinDirection+0x10a>
     dd8:	84 2b       	or	r24, r20
     dda:	8c 93       	st	X, r24
     ddc:	5e c0       	rjmp	.+188    	; 0xe9a <DIO_SetPinDirection+0x1d4>
		}  
		break;
		case DIO_PORTC: 
		if(Direction == DIO_INPUT) 
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	88 23       	and	r24, r24
     de2:	a9 f4       	brne	.+42     	; 0xe0e <DIO_SetPinDirection+0x148>
		{ 
			CLR_BIT(DDRC_REG,Pin);
     de4:	a4 e3       	ldi	r26, 0x34	; 52
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e4 e3       	ldi	r30, 0x34	; 52
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	48 2f       	mov	r20, r24
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 2e       	mov	r0, r18
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <DIO_SetPinDirection+0x13c>
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	0a 94       	dec	r0
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <DIO_SetPinDirection+0x138>
     e06:	80 95       	com	r24
     e08:	84 23       	and	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	46 c0       	rjmp	.+140    	; 0xe9a <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	09 f0       	breq	.+2      	; 0xe16 <DIO_SetPinDirection+0x150>
     e14:	42 c0       	rjmp	.+132    	; 0xe9a <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRC_REG,Pin);
     e16:	a4 e3       	ldi	r26, 0x34	; 52
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e4 e3       	ldi	r30, 0x34	; 52
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_SetPinDirection+0x16e>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_SetPinDirection+0x16a>
     e38:	84 2b       	or	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	2e c0       	rjmp	.+92     	; 0xe9a <DIO_SetPinDirection+0x1d4>
		}  
		break;
		case DIO_PORTD: 
		if(Direction == DIO_INPUT) 
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	88 23       	and	r24, r24
     e42:	a9 f4       	brne	.+42     	; 0xe6e <DIO_SetPinDirection+0x1a8>
		{ 
			CLR_BIT(DDRD_REG,Pin);
     e44:	a1 e3       	ldi	r26, 0x31	; 49
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e1 e3       	ldi	r30, 0x31	; 49
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	48 2f       	mov	r20, r24
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	02 2e       	mov	r0, r18
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <DIO_SetPinDirection+0x19c>
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	0a 94       	dec	r0
     e64:	e2 f7       	brpl	.-8      	; 0xe5e <DIO_SetPinDirection+0x198>
     e66:	80 95       	com	r24
     e68:	84 23       	and	r24, r20
     e6a:	8c 93       	st	X, r24
     e6c:	16 c0       	rjmp	.+44     	; 0xe9a <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	99 f4       	brne	.+38     	; 0xe9a <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRD_REG,Pin);
     e74:	a1 e3       	ldi	r26, 0x31	; 49
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e1 e3       	ldi	r30, 0x31	; 49
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <DIO_SetPinDirection+0x1cc>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <DIO_SetPinDirection+0x1c8>
     e96:	84 2b       	or	r24, r20
     e98:	8c 93       	st	X, r24
		default:
		// " Port or Pin or Direction not valid "
		break;
	}
	
}
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <DIO_SetPinValue>:

void DIO_SetPinValue    (u8 Port , u8 Pin , u8 Value )
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <DIO_SetPinValue+0x6>
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <DIO_SetPinValue+0x8>
     eb2:	0f 92       	push	r0
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	89 83       	std	Y+1, r24	; 0x01
     eba:	6a 83       	std	Y+2, r22	; 0x02
     ebc:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	3d 83       	std	Y+5, r19	; 0x05
     ec6:	2c 83       	std	Y+4, r18	; 0x04
     ec8:	8c 81       	ldd	r24, Y+4	; 0x04
     eca:	9d 81       	ldd	r25, Y+5	; 0x05
     ecc:	81 30       	cpi	r24, 0x01	; 1
     ece:	91 05       	cpc	r25, r1
     ed0:	09 f4       	brne	.+2      	; 0xed4 <DIO_SetPinValue+0x2a>
     ed2:	47 c0       	rjmp	.+142    	; 0xf62 <DIO_SetPinValue+0xb8>
     ed4:	2c 81       	ldd	r18, Y+4	; 0x04
     ed6:	3d 81       	ldd	r19, Y+5	; 0x05
     ed8:	22 30       	cpi	r18, 0x02	; 2
     eda:	31 05       	cpc	r19, r1
     edc:	2c f4       	brge	.+10     	; 0xee8 <DIO_SetPinValue+0x3e>
     ede:	8c 81       	ldd	r24, Y+4	; 0x04
     ee0:	9d 81       	ldd	r25, Y+5	; 0x05
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	71 f0       	breq	.+28     	; 0xf02 <DIO_SetPinValue+0x58>
     ee6:	cb c0       	rjmp	.+406    	; 0x107e <DIO_SetPinValue+0x1d4>
     ee8:	2c 81       	ldd	r18, Y+4	; 0x04
     eea:	3d 81       	ldd	r19, Y+5	; 0x05
     eec:	22 30       	cpi	r18, 0x02	; 2
     eee:	31 05       	cpc	r19, r1
     ef0:	09 f4       	brne	.+2      	; 0xef4 <DIO_SetPinValue+0x4a>
     ef2:	67 c0       	rjmp	.+206    	; 0xfc2 <DIO_SetPinValue+0x118>
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	9d 81       	ldd	r25, Y+5	; 0x05
     ef8:	83 30       	cpi	r24, 0x03	; 3
     efa:	91 05       	cpc	r25, r1
     efc:	09 f4       	brne	.+2      	; 0xf00 <DIO_SetPinValue+0x56>
     efe:	91 c0       	rjmp	.+290    	; 0x1022 <DIO_SetPinValue+0x178>
     f00:	be c0       	rjmp	.+380    	; 0x107e <DIO_SetPinValue+0x1d4>
	{
		case DIO_PORTA: 
		if(Value == DIO_HIGH)
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	a1 f4       	brne	.+40     	; 0xf30 <DIO_SetPinValue+0x86>
		{ 
			SET_BIT(PORTA_REG,Pin);
     f08:	ab e3       	ldi	r26, 0x3B	; 59
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	eb e3       	ldi	r30, 0x3B	; 59
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	48 2f       	mov	r20, r24
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 2e       	mov	r0, r18
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_SetPinValue+0x7c>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	0a 94       	dec	r0
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_SetPinValue+0x78>
     f2a:	84 2b       	or	r24, r20
     f2c:	8c 93       	st	X, r24
     f2e:	a7 c0       	rjmp	.+334    	; 0x107e <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	88 23       	and	r24, r24
     f34:	09 f0       	breq	.+2      	; 0xf38 <DIO_SetPinValue+0x8e>
     f36:	a3 c0       	rjmp	.+326    	; 0x107e <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTA_REG,Pin);
     f38:	ab e3       	ldi	r26, 0x3B	; 59
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	eb e3       	ldi	r30, 0x3B	; 59
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	48 2f       	mov	r20, r24
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 2e       	mov	r0, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <DIO_SetPinValue+0xac>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <DIO_SetPinValue+0xa8>
     f5a:	80 95       	com	r24
     f5c:	84 23       	and	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	8e c0       	rjmp	.+284    	; 0x107e <DIO_SetPinValue+0x1d4>
		}  
		break;
		case DIO_PORTB: 
		if(Value == DIO_HIGH)
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	a1 f4       	brne	.+40     	; 0xf90 <DIO_SetPinValue+0xe6>
		{ 
			SET_BIT(PORTB_REG,Pin);
     f68:	a8 e3       	ldi	r26, 0x38	; 56
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e8 e3       	ldi	r30, 0x38	; 56
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 2e       	mov	r0, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <DIO_SetPinValue+0xdc>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	0a 94       	dec	r0
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <DIO_SetPinValue+0xd8>
     f8a:	84 2b       	or	r24, r20
     f8c:	8c 93       	st	X, r24
     f8e:	77 c0       	rjmp	.+238    	; 0x107e <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	88 23       	and	r24, r24
     f94:	09 f0       	breq	.+2      	; 0xf98 <DIO_SetPinValue+0xee>
     f96:	73 c0       	rjmp	.+230    	; 0x107e <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTB_REG,Pin);
     f98:	a8 e3       	ldi	r26, 0x38	; 56
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e8 e3       	ldi	r30, 0x38	; 56
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO_SetPinValue+0x10c>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DIO_SetPinValue+0x108>
     fba:	80 95       	com	r24
     fbc:	84 23       	and	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	5e c0       	rjmp	.+188    	; 0x107e <DIO_SetPinValue+0x1d4>
		}  
		break;
		case DIO_PORTC: 
		if(Value == DIO_HIGH)
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	a1 f4       	brne	.+40     	; 0xff0 <DIO_SetPinValue+0x146>
		{ 
			SET_BIT(PORTC_REG,Pin);
     fc8:	a5 e3       	ldi	r26, 0x35	; 53
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e5 e3       	ldi	r30, 0x35	; 53
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <DIO_SetPinValue+0x13c>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <DIO_SetPinValue+0x138>
     fea:	84 2b       	or	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	47 c0       	rjmp	.+142    	; 0x107e <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	88 23       	and	r24, r24
     ff4:	09 f0       	breq	.+2      	; 0xff8 <DIO_SetPinValue+0x14e>
     ff6:	43 c0       	rjmp	.+134    	; 0x107e <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTC_REG,Pin);
     ff8:	a5 e3       	ldi	r26, 0x35	; 53
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e5 e3       	ldi	r30, 0x35	; 53
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <DIO_SetPinValue+0x16c>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <DIO_SetPinValue+0x168>
    101a:	80 95       	com	r24
    101c:	84 23       	and	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	2e c0       	rjmp	.+92     	; 0x107e <DIO_SetPinValue+0x1d4>
		}  
		break;
		case DIO_PORTD: 
		if(Value == DIO_HIGH)
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	a1 f4       	brne	.+40     	; 0x1050 <DIO_SetPinValue+0x1a6>
		{ 
			SET_BIT(PORTD_REG,Pin);
    1028:	a2 e3       	ldi	r26, 0x32	; 50
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e2 e3       	ldi	r30, 0x32	; 50
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <DIO_SetPinValue+0x19c>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <DIO_SetPinValue+0x198>
    104a:	84 2b       	or	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	17 c0       	rjmp	.+46     	; 0x107e <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	88 23       	and	r24, r24
    1054:	a1 f4       	brne	.+40     	; 0x107e <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTD_REG,Pin);
    1056:	a2 e3       	ldi	r26, 0x32	; 50
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e2 e3       	ldi	r30, 0x32	; 50
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	48 2f       	mov	r20, r24
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	02 2e       	mov	r0, r18
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <DIO_SetPinValue+0x1ca>
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	0a 94       	dec	r0
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <DIO_SetPinValue+0x1c6>
    1078:	80 95       	com	r24
    107a:	84 23       	and	r24, r20
    107c:	8c 93       	st	X, r24
		default:
		// " Port or Pin or Value not valid "
		break;
	}
	
}
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <DIO_GetPinValue>:

u8   DIO_GetPinValue    (u8 Port , u8 Pin )
{
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	00 d0       	rcall	.+0      	; 0x1094 <DIO_GetPinValue+0x6>
    1094:	00 d0       	rcall	.+0      	; 0x1096 <DIO_GetPinValue+0x8>
    1096:	0f 92       	push	r0
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	8a 83       	std	Y+2, r24	; 0x02
    109e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Value;
	switch(Port)
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	3d 83       	std	Y+5, r19	; 0x05
    10a8:	2c 83       	std	Y+4, r18	; 0x04
    10aa:	4c 81       	ldd	r20, Y+4	; 0x04
    10ac:	5d 81       	ldd	r21, Y+5	; 0x05
    10ae:	41 30       	cpi	r20, 0x01	; 1
    10b0:	51 05       	cpc	r21, r1
    10b2:	41 f1       	breq	.+80     	; 0x1104 <DIO_GetPinValue+0x76>
    10b4:	8c 81       	ldd	r24, Y+4	; 0x04
    10b6:	9d 81       	ldd	r25, Y+5	; 0x05
    10b8:	82 30       	cpi	r24, 0x02	; 2
    10ba:	91 05       	cpc	r25, r1
    10bc:	34 f4       	brge	.+12     	; 0x10ca <DIO_GetPinValue+0x3c>
    10be:	2c 81       	ldd	r18, Y+4	; 0x04
    10c0:	3d 81       	ldd	r19, Y+5	; 0x05
    10c2:	21 15       	cp	r18, r1
    10c4:	31 05       	cpc	r19, r1
    10c6:	61 f0       	breq	.+24     	; 0x10e0 <DIO_GetPinValue+0x52>
    10c8:	52 c0       	rjmp	.+164    	; 0x116e <DIO_GetPinValue+0xe0>
    10ca:	4c 81       	ldd	r20, Y+4	; 0x04
    10cc:	5d 81       	ldd	r21, Y+5	; 0x05
    10ce:	42 30       	cpi	r20, 0x02	; 2
    10d0:	51 05       	cpc	r21, r1
    10d2:	51 f1       	breq	.+84     	; 0x1128 <DIO_GetPinValue+0x9a>
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	9d 81       	ldd	r25, Y+5	; 0x05
    10d8:	83 30       	cpi	r24, 0x03	; 3
    10da:	91 05       	cpc	r25, r1
    10dc:	b9 f1       	breq	.+110    	; 0x114c <DIO_GetPinValue+0xbe>
    10de:	47 c0       	rjmp	.+142    	; 0x116e <DIO_GetPinValue+0xe0>
	{
		case DIO_PORTA: Value = GET_BIT(PINA_REG,Pin); break;
    10e0:	e9 e3       	ldi	r30, 0x39	; 57
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	88 2f       	mov	r24, r24
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	a9 01       	movw	r20, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <DIO_GetPinValue+0x6a>
    10f4:	55 95       	asr	r21
    10f6:	47 95       	ror	r20
    10f8:	8a 95       	dec	r24
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <DIO_GetPinValue+0x66>
    10fc:	ca 01       	movw	r24, r20
    10fe:	81 70       	andi	r24, 0x01	; 1
    1100:	89 83       	std	Y+1, r24	; 0x01
    1102:	35 c0       	rjmp	.+106    	; 0x116e <DIO_GetPinValue+0xe0>
		case DIO_PORTB: Value = GET_BIT(PINB_REG,Pin); break;
    1104:	e6 e3       	ldi	r30, 0x36	; 54
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	88 2f       	mov	r24, r24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	a9 01       	movw	r20, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_GetPinValue+0x8e>
    1118:	55 95       	asr	r21
    111a:	47 95       	ror	r20
    111c:	8a 95       	dec	r24
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_GetPinValue+0x8a>
    1120:	ca 01       	movw	r24, r20
    1122:	81 70       	andi	r24, 0x01	; 1
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	23 c0       	rjmp	.+70     	; 0x116e <DIO_GetPinValue+0xe0>
		case DIO_PORTC: Value = GET_BIT(PINC_REG,Pin); break;
    1128:	e3 e3       	ldi	r30, 0x33	; 51
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	a9 01       	movw	r20, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <DIO_GetPinValue+0xb2>
    113c:	55 95       	asr	r21
    113e:	47 95       	ror	r20
    1140:	8a 95       	dec	r24
    1142:	e2 f7       	brpl	.-8      	; 0x113c <DIO_GetPinValue+0xae>
    1144:	ca 01       	movw	r24, r20
    1146:	81 70       	andi	r24, 0x01	; 1
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	11 c0       	rjmp	.+34     	; 0x116e <DIO_GetPinValue+0xe0>
		case DIO_PORTD: Value = GET_BIT(PIND_REG,Pin); break;
    114c:	e0 e3       	ldi	r30, 0x30	; 48
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	a9 01       	movw	r20, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <DIO_GetPinValue+0xd6>
    1160:	55 95       	asr	r21
    1162:	47 95       	ror	r20
    1164:	8a 95       	dec	r24
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <DIO_GetPinValue+0xd2>
    1168:	ca 01       	movw	r24, r20
    116a:	81 70       	andi	r24, 0x01	; 1
    116c:	89 83       	std	Y+1, r24	; 0x01
		default:
		break;
	}
	return Value;
    116e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <DIO_SetPortDirection>:

void DIO_SetPortDirection(u8 Port , u8 Direction)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	00 d0       	rcall	.+0      	; 0x1186 <DIO_SetPortDirection+0x6>
    1186:	00 d0       	rcall	.+0      	; 0x1188 <DIO_SetPortDirection+0x8>
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	3c 83       	std	Y+4, r19	; 0x04
    1198:	2b 83       	std	Y+3, r18	; 0x03
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	9c 81       	ldd	r25, Y+4	; 0x04
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	91 05       	cpc	r25, r1
    11a2:	d1 f0       	breq	.+52     	; 0x11d8 <DIO_SetPortDirection+0x58>
    11a4:	2b 81       	ldd	r18, Y+3	; 0x03
    11a6:	3c 81       	ldd	r19, Y+4	; 0x04
    11a8:	22 30       	cpi	r18, 0x02	; 2
    11aa:	31 05       	cpc	r19, r1
    11ac:	2c f4       	brge	.+10     	; 0x11b8 <DIO_SetPortDirection+0x38>
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	9c 81       	ldd	r25, Y+4	; 0x04
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	61 f0       	breq	.+24     	; 0x11ce <DIO_SetPortDirection+0x4e>
    11b6:	1e c0       	rjmp	.+60     	; 0x11f4 <DIO_SetPortDirection+0x74>
    11b8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ba:	3c 81       	ldd	r19, Y+4	; 0x04
    11bc:	22 30       	cpi	r18, 0x02	; 2
    11be:	31 05       	cpc	r19, r1
    11c0:	81 f0       	breq	.+32     	; 0x11e2 <DIO_SetPortDirection+0x62>
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	83 30       	cpi	r24, 0x03	; 3
    11c8:	91 05       	cpc	r25, r1
    11ca:	81 f0       	breq	.+32     	; 0x11ec <DIO_SetPortDirection+0x6c>
    11cc:	13 c0       	rjmp	.+38     	; 0x11f4 <DIO_SetPortDirection+0x74>
	{
		case DIO_PORTA: DDRA_REG = Direction; break;
    11ce:	ea e3       	ldi	r30, 0x3A	; 58
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	80 83       	st	Z, r24
    11d6:	0e c0       	rjmp	.+28     	; 0x11f4 <DIO_SetPortDirection+0x74>
		case DIO_PORTB: DDRB_REG = Direction; break;
    11d8:	e7 e3       	ldi	r30, 0x37	; 55
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	80 83       	st	Z, r24
    11e0:	09 c0       	rjmp	.+18     	; 0x11f4 <DIO_SetPortDirection+0x74>
		case DIO_PORTC: DDRC_REG = Direction; break;
    11e2:	e4 e3       	ldi	r30, 0x34	; 52
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	80 83       	st	Z, r24
    11ea:	04 c0       	rjmp	.+8      	; 0x11f4 <DIO_SetPortDirection+0x74>
		case DIO_PORTD: DDRD_REG = Direction; break;
    11ec:	e1 e3       	ldi	r30, 0x31	; 49
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	80 83       	st	Z, r24
		default:
		break;
	}
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <DIO_SetPortValue>:


void DIO_SetPortValue    (u8 Port , u8 Value   )
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	00 d0       	rcall	.+0      	; 0x1208 <DIO_SetPortValue+0x6>
    1208:	00 d0       	rcall	.+0      	; 0x120a <DIO_SetPortValue+0x8>
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	3c 83       	std	Y+4, r19	; 0x04
    121a:	2b 83       	std	Y+3, r18	; 0x03
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	9c 81       	ldd	r25, Y+4	; 0x04
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	91 05       	cpc	r25, r1
    1224:	d1 f0       	breq	.+52     	; 0x125a <DIO_SetPortValue+0x58>
    1226:	2b 81       	ldd	r18, Y+3	; 0x03
    1228:	3c 81       	ldd	r19, Y+4	; 0x04
    122a:	22 30       	cpi	r18, 0x02	; 2
    122c:	31 05       	cpc	r19, r1
    122e:	2c f4       	brge	.+10     	; 0x123a <DIO_SetPortValue+0x38>
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	9c 81       	ldd	r25, Y+4	; 0x04
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	61 f0       	breq	.+24     	; 0x1250 <DIO_SetPortValue+0x4e>
    1238:	1e c0       	rjmp	.+60     	; 0x1276 <DIO_SetPortValue+0x74>
    123a:	2b 81       	ldd	r18, Y+3	; 0x03
    123c:	3c 81       	ldd	r19, Y+4	; 0x04
    123e:	22 30       	cpi	r18, 0x02	; 2
    1240:	31 05       	cpc	r19, r1
    1242:	81 f0       	breq	.+32     	; 0x1264 <DIO_SetPortValue+0x62>
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	9c 81       	ldd	r25, Y+4	; 0x04
    1248:	83 30       	cpi	r24, 0x03	; 3
    124a:	91 05       	cpc	r25, r1
    124c:	81 f0       	breq	.+32     	; 0x126e <DIO_SetPortValue+0x6c>
    124e:	13 c0       	rjmp	.+38     	; 0x1276 <DIO_SetPortValue+0x74>
	{
		case DIO_PORTA: PORTA_REG = Value; break;
    1250:	eb e3       	ldi	r30, 0x3B	; 59
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	80 83       	st	Z, r24
    1258:	0e c0       	rjmp	.+28     	; 0x1276 <DIO_SetPortValue+0x74>
		case DIO_PORTB: PORTB_REG = Value; break;
    125a:	e8 e3       	ldi	r30, 0x38	; 56
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	80 83       	st	Z, r24
    1262:	09 c0       	rjmp	.+18     	; 0x1276 <DIO_SetPortValue+0x74>
		case DIO_PORTC: PORTC_REG = Value; break;
    1264:	e5 e3       	ldi	r30, 0x35	; 53
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	80 83       	st	Z, r24
    126c:	04 c0       	rjmp	.+8      	; 0x1276 <DIO_SetPortValue+0x74>
		case DIO_PORTD: PORTD_REG = Value; break;
    126e:	e2 e3       	ldi	r30, 0x32	; 50
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	80 83       	st	Z, r24
		default:
		break;
	}
}
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <STEPER_voidInit>:
#include "STEPER_PRIVET.h"



void STEPER_voidInit(void)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62

	DIO_SetPinDirection(BLUE_WIRE,DIO_OUTPUT);
    128c:	82 e0       	ldi	r24, 0x02	; 2
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	41 e0       	ldi	r20, 0x01	; 1
    1292:	0e 94 63 06 	call	0xcc6	; 0xcc6 <DIO_SetPinDirection>
	DIO_SetPinDirection(ORANGE_WIRE,DIO_OUTPUT);
    1296:	82 e0       	ldi	r24, 0x02	; 2
    1298:	63 e0       	ldi	r22, 0x03	; 3
    129a:	41 e0       	ldi	r20, 0x01	; 1
    129c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <DIO_SetPinDirection>
	DIO_SetPinDirection(YELLOW_WIRE,DIO_OUTPUT);
    12a0:	82 e0       	ldi	r24, 0x02	; 2
    12a2:	62 e0       	ldi	r22, 0x02	; 2
    12a4:	41 e0       	ldi	r20, 0x01	; 1
    12a6:	0e 94 63 06 	call	0xcc6	; 0xcc6 <DIO_SetPinDirection>
	DIO_SetPinDirection(RED_WIRE,DIO_OUTPUT);
    12aa:	82 e0       	ldi	r24, 0x02	; 2
    12ac:	61 e0       	ldi	r22, 0x01	; 1
    12ae:	41 e0       	ldi	r20, 0x01	; 1
    12b0:	0e 94 63 06 	call	0xcc6	; 0xcc6 <DIO_SetPinDirection>

}
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <STEPER_voidFullStep>:
void STEPER_voidFullStep(u16 delay)
{
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	c8 54       	subi	r28, 0x48	; 72
    12c8:	d0 40       	sbci	r29, 0x00	; 0
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	fe 01       	movw	r30, r28
    12d6:	e9 5b       	subi	r30, 0xB9	; 185
    12d8:	ff 4f       	sbci	r31, 0xFF	; 255
    12da:	91 83       	std	Z+1, r25	; 0x01
    12dc:	80 83       	st	Z, r24

	DIO_SetPinValue(BLUE_WIRE,DIO_HIGH);
    12de:	82 e0       	ldi	r24, 0x02	; 2
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	41 e0       	ldi	r20, 0x01	; 1
    12e4:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_LOW);
    12e8:	82 e0       	ldi	r24, 0x02	; 2
    12ea:	61 e0       	ldi	r22, 0x01	; 1
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_LOW);
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    12f4:	62 e0       	ldi	r22, 0x02	; 2
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_HIGH);
    12fc:	82 e0       	ldi	r24, 0x02	; 2
    12fe:	63 e0       	ldi	r22, 0x03	; 3
    1300:	41 e0       	ldi	r20, 0x01	; 1
    1302:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	_delay_ms(delay);
    1306:	fe 01       	movw	r30, r28
    1308:	e9 5b       	subi	r30, 0xB9	; 185
    130a:	ff 4f       	sbci	r31, 0xFF	; 255
    130c:	80 81       	ld	r24, Z
    130e:	91 81       	ldd	r25, Z+1	; 0x01
    1310:	cc 01       	movw	r24, r24
    1312:	a0 e0       	ldi	r26, 0x00	; 0
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	bc 01       	movw	r22, r24
    1318:	cd 01       	movw	r24, r26
    131a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	fe 01       	movw	r30, r28
    1324:	ed 5b       	subi	r30, 0xBD	; 189
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	80 83       	st	Z, r24
    132a:	91 83       	std	Z+1, r25	; 0x01
    132c:	a2 83       	std	Z+2, r26	; 0x02
    132e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1330:	8e 01       	movw	r16, r28
    1332:	01 5c       	subi	r16, 0xC1	; 193
    1334:	1f 4f       	sbci	r17, 0xFF	; 255
    1336:	fe 01       	movw	r30, r28
    1338:	ed 5b       	subi	r30, 0xBD	; 189
    133a:	ff 4f       	sbci	r31, 0xFF	; 255
    133c:	60 81       	ld	r22, Z
    133e:	71 81       	ldd	r23, Z+1	; 0x01
    1340:	82 81       	ldd	r24, Z+2	; 0x02
    1342:	93 81       	ldd	r25, Z+3	; 0x03
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	4a ef       	ldi	r20, 0xFA	; 250
    134a:	54 e4       	ldi	r21, 0x44	; 68
    134c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	f8 01       	movw	r30, r16
    1356:	80 83       	st	Z, r24
    1358:	91 83       	std	Z+1, r25	; 0x01
    135a:	a2 83       	std	Z+2, r26	; 0x02
    135c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    135e:	fe 01       	movw	r30, r28
    1360:	ff 96       	adiw	r30, 0x3f	; 63
    1362:	60 81       	ld	r22, Z
    1364:	71 81       	ldd	r23, Z+1	; 0x01
    1366:	82 81       	ldd	r24, Z+2	; 0x02
    1368:	93 81       	ldd	r25, Z+3	; 0x03
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e8       	ldi	r20, 0x80	; 128
    1370:	5f e3       	ldi	r21, 0x3F	; 63
    1372:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1376:	88 23       	and	r24, r24
    1378:	2c f4       	brge	.+10     	; 0x1384 <STEPER_voidFullStep+0xca>
		__ticks = 1;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	9e af       	std	Y+62, r25	; 0x3e
    1380:	8d af       	std	Y+61, r24	; 0x3d
    1382:	46 c0       	rjmp	.+140    	; 0x1410 <STEPER_voidFullStep+0x156>
	else if (__tmp > 65535)
    1384:	fe 01       	movw	r30, r28
    1386:	ff 96       	adiw	r30, 0x3f	; 63
    1388:	60 81       	ld	r22, Z
    138a:	71 81       	ldd	r23, Z+1	; 0x01
    138c:	82 81       	ldd	r24, Z+2	; 0x02
    138e:	93 81       	ldd	r25, Z+3	; 0x03
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	3f ef       	ldi	r19, 0xFF	; 255
    1394:	4f e7       	ldi	r20, 0x7F	; 127
    1396:	57 e4       	ldi	r21, 0x47	; 71
    1398:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    139c:	18 16       	cp	r1, r24
    139e:	64 f5       	brge	.+88     	; 0x13f8 <STEPER_voidFullStep+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a0:	fe 01       	movw	r30, r28
    13a2:	ed 5b       	subi	r30, 0xBD	; 189
    13a4:	ff 4f       	sbci	r31, 0xFF	; 255
    13a6:	60 81       	ld	r22, Z
    13a8:	71 81       	ldd	r23, Z+1	; 0x01
    13aa:	82 81       	ldd	r24, Z+2	; 0x02
    13ac:	93 81       	ldd	r25, Z+3	; 0x03
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e2       	ldi	r20, 0x20	; 32
    13b4:	51 e4       	ldi	r21, 0x41	; 65
    13b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	bc 01       	movw	r22, r24
    13c0:	cd 01       	movw	r24, r26
    13c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	9e af       	std	Y+62, r25	; 0x3e
    13cc:	8d af       	std	Y+61, r24	; 0x3d
    13ce:	0f c0       	rjmp	.+30     	; 0x13ee <STEPER_voidFullStep+0x134>
    13d0:	88 ec       	ldi	r24, 0xC8	; 200
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	9c af       	std	Y+60, r25	; 0x3c
    13d6:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    13da:	9c ad       	ldd	r25, Y+60	; 0x3c
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <STEPER_voidFullStep+0x122>
    13e0:	9c af       	std	Y+60, r25	; 0x3c
    13e2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    13e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	9e af       	std	Y+62, r25	; 0x3e
    13ec:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    13f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	69 f7       	brne	.-38     	; 0x13d0 <STEPER_voidFullStep+0x116>
    13f6:	16 c0       	rjmp	.+44     	; 0x1424 <STEPER_voidFullStep+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f8:	fe 01       	movw	r30, r28
    13fa:	ff 96       	adiw	r30, 0x3f	; 63
    13fc:	60 81       	ld	r22, Z
    13fe:	71 81       	ldd	r23, Z+1	; 0x01
    1400:	82 81       	ldd	r24, Z+2	; 0x02
    1402:	93 81       	ldd	r25, Z+3	; 0x03
    1404:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	9e af       	std	Y+62, r25	; 0x3e
    140e:	8d af       	std	Y+61, r24	; 0x3d
    1410:	8d ad       	ldd	r24, Y+61	; 0x3d
    1412:	9e ad       	ldd	r25, Y+62	; 0x3e
    1414:	9a af       	std	Y+58, r25	; 0x3a
    1416:	89 af       	std	Y+57, r24	; 0x39
    1418:	89 ad       	ldd	r24, Y+57	; 0x39
    141a:	9a ad       	ldd	r25, Y+58	; 0x3a
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	f1 f7       	brne	.-4      	; 0x141c <STEPER_voidFullStep+0x162>
    1420:	9a af       	std	Y+58, r25	; 0x3a
    1422:	89 af       	std	Y+57, r24	; 0x39
	DIO_SetPinValue(BLUE_WIRE,DIO_HIGH);
    1424:	82 e0       	ldi	r24, 0x02	; 2
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	41 e0       	ldi	r20, 0x01	; 1
    142a:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_HIGH);
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	61 e0       	ldi	r22, 0x01	; 1
    1432:	41 e0       	ldi	r20, 0x01	; 1
    1434:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_LOW);
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	62 e0       	ldi	r22, 0x02	; 2
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_LOW);
    1442:	82 e0       	ldi	r24, 0x02	; 2
    1444:	63 e0       	ldi	r22, 0x03	; 3
    1446:	40 e0       	ldi	r20, 0x00	; 0
    1448:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	_delay_ms(delay);
    144c:	fe 01       	movw	r30, r28
    144e:	e9 5b       	subi	r30, 0xB9	; 185
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	80 81       	ld	r24, Z
    1454:	91 81       	ldd	r25, Z+1	; 0x01
    1456:	cc 01       	movw	r24, r24
    1458:	a0 e0       	ldi	r26, 0x00	; 0
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	bc 01       	movw	r22, r24
    145e:	cd 01       	movw	r24, r26
    1460:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	8d ab       	std	Y+53, r24	; 0x35
    146a:	9e ab       	std	Y+54, r25	; 0x36
    146c:	af ab       	std	Y+55, r26	; 0x37
    146e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1470:	6d a9       	ldd	r22, Y+53	; 0x35
    1472:	7e a9       	ldd	r23, Y+54	; 0x36
    1474:	8f a9       	ldd	r24, Y+55	; 0x37
    1476:	98 ad       	ldd	r25, Y+56	; 0x38
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	4a ef       	ldi	r20, 0xFA	; 250
    147e:	54 e4       	ldi	r21, 0x44	; 68
    1480:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	89 ab       	std	Y+49, r24	; 0x31
    148a:	9a ab       	std	Y+50, r25	; 0x32
    148c:	ab ab       	std	Y+51, r26	; 0x33
    148e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1490:	69 a9       	ldd	r22, Y+49	; 0x31
    1492:	7a a9       	ldd	r23, Y+50	; 0x32
    1494:	8b a9       	ldd	r24, Y+51	; 0x33
    1496:	9c a9       	ldd	r25, Y+52	; 0x34
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e8       	ldi	r20, 0x80	; 128
    149e:	5f e3       	ldi	r21, 0x3F	; 63
    14a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14a4:	88 23       	and	r24, r24
    14a6:	2c f4       	brge	.+10     	; 0x14b2 <STEPER_voidFullStep+0x1f8>
		__ticks = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	98 ab       	std	Y+48, r25	; 0x30
    14ae:	8f a7       	std	Y+47, r24	; 0x2f
    14b0:	3f c0       	rjmp	.+126    	; 0x1530 <STEPER_voidFullStep+0x276>
	else if (__tmp > 65535)
    14b2:	69 a9       	ldd	r22, Y+49	; 0x31
    14b4:	7a a9       	ldd	r23, Y+50	; 0x32
    14b6:	8b a9       	ldd	r24, Y+51	; 0x33
    14b8:	9c a9       	ldd	r25, Y+52	; 0x34
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	3f ef       	ldi	r19, 0xFF	; 255
    14be:	4f e7       	ldi	r20, 0x7F	; 127
    14c0:	57 e4       	ldi	r21, 0x47	; 71
    14c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14c6:	18 16       	cp	r1, r24
    14c8:	4c f5       	brge	.+82     	; 0x151c <STEPER_voidFullStep+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ca:	6d a9       	ldd	r22, Y+53	; 0x35
    14cc:	7e a9       	ldd	r23, Y+54	; 0x36
    14ce:	8f a9       	ldd	r24, Y+55	; 0x37
    14d0:	98 ad       	ldd	r25, Y+56	; 0x38
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e2       	ldi	r20, 0x20	; 32
    14d8:	51 e4       	ldi	r21, 0x41	; 65
    14da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	98 ab       	std	Y+48, r25	; 0x30
    14f0:	8f a7       	std	Y+47, r24	; 0x2f
    14f2:	0f c0       	rjmp	.+30     	; 0x1512 <STEPER_voidFullStep+0x258>
    14f4:	88 ec       	ldi	r24, 0xC8	; 200
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9e a7       	std	Y+46, r25	; 0x2e
    14fa:	8d a7       	std	Y+45, r24	; 0x2d
    14fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    14fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <STEPER_voidFullStep+0x246>
    1504:	9e a7       	std	Y+46, r25	; 0x2e
    1506:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1508:	8f a5       	ldd	r24, Y+47	; 0x2f
    150a:	98 a9       	ldd	r25, Y+48	; 0x30
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	98 ab       	std	Y+48, r25	; 0x30
    1510:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1512:	8f a5       	ldd	r24, Y+47	; 0x2f
    1514:	98 a9       	ldd	r25, Y+48	; 0x30
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	69 f7       	brne	.-38     	; 0x14f4 <STEPER_voidFullStep+0x23a>
    151a:	14 c0       	rjmp	.+40     	; 0x1544 <STEPER_voidFullStep+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151c:	69 a9       	ldd	r22, Y+49	; 0x31
    151e:	7a a9       	ldd	r23, Y+50	; 0x32
    1520:	8b a9       	ldd	r24, Y+51	; 0x33
    1522:	9c a9       	ldd	r25, Y+52	; 0x34
    1524:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	98 ab       	std	Y+48, r25	; 0x30
    152e:	8f a7       	std	Y+47, r24	; 0x2f
    1530:	8f a5       	ldd	r24, Y+47	; 0x2f
    1532:	98 a9       	ldd	r25, Y+48	; 0x30
    1534:	9c a7       	std	Y+44, r25	; 0x2c
    1536:	8b a7       	std	Y+43, r24	; 0x2b
    1538:	8b a5       	ldd	r24, Y+43	; 0x2b
    153a:	9c a5       	ldd	r25, Y+44	; 0x2c
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <STEPER_voidFullStep+0x282>
    1540:	9c a7       	std	Y+44, r25	; 0x2c
    1542:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_SetPinValue(BLUE_WIRE,DIO_LOW);
    1544:	82 e0       	ldi	r24, 0x02	; 2
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_HIGH);
    154e:	82 e0       	ldi	r24, 0x02	; 2
    1550:	61 e0       	ldi	r22, 0x01	; 1
    1552:	41 e0       	ldi	r20, 0x01	; 1
    1554:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_HIGH);
    1558:	82 e0       	ldi	r24, 0x02	; 2
    155a:	62 e0       	ldi	r22, 0x02	; 2
    155c:	41 e0       	ldi	r20, 0x01	; 1
    155e:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_LOW);
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	63 e0       	ldi	r22, 0x03	; 3
    1566:	40 e0       	ldi	r20, 0x00	; 0
    1568:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	_delay_ms(delay);
    156c:	fe 01       	movw	r30, r28
    156e:	e9 5b       	subi	r30, 0xB9	; 185
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	80 81       	ld	r24, Z
    1574:	91 81       	ldd	r25, Z+1	; 0x01
    1576:	cc 01       	movw	r24, r24
    1578:	a0 e0       	ldi	r26, 0x00	; 0
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	bc 01       	movw	r22, r24
    157e:	cd 01       	movw	r24, r26
    1580:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	8f a3       	std	Y+39, r24	; 0x27
    158a:	98 a7       	std	Y+40, r25	; 0x28
    158c:	a9 a7       	std	Y+41, r26	; 0x29
    158e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1590:	6f a1       	ldd	r22, Y+39	; 0x27
    1592:	78 a5       	ldd	r23, Y+40	; 0x28
    1594:	89 a5       	ldd	r24, Y+41	; 0x29
    1596:	9a a5       	ldd	r25, Y+42	; 0x2a
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	4a ef       	ldi	r20, 0xFA	; 250
    159e:	54 e4       	ldi	r21, 0x44	; 68
    15a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	8b a3       	std	Y+35, r24	; 0x23
    15aa:	9c a3       	std	Y+36, r25	; 0x24
    15ac:	ad a3       	std	Y+37, r26	; 0x25
    15ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15b0:	6b a1       	ldd	r22, Y+35	; 0x23
    15b2:	7c a1       	ldd	r23, Y+36	; 0x24
    15b4:	8d a1       	ldd	r24, Y+37	; 0x25
    15b6:	9e a1       	ldd	r25, Y+38	; 0x26
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e8       	ldi	r20, 0x80	; 128
    15be:	5f e3       	ldi	r21, 0x3F	; 63
    15c0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15c4:	88 23       	and	r24, r24
    15c6:	2c f4       	brge	.+10     	; 0x15d2 <STEPER_voidFullStep+0x318>
		__ticks = 1;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	9a a3       	std	Y+34, r25	; 0x22
    15ce:	89 a3       	std	Y+33, r24	; 0x21
    15d0:	3f c0       	rjmp	.+126    	; 0x1650 <STEPER_voidFullStep+0x396>
	else if (__tmp > 65535)
    15d2:	6b a1       	ldd	r22, Y+35	; 0x23
    15d4:	7c a1       	ldd	r23, Y+36	; 0x24
    15d6:	8d a1       	ldd	r24, Y+37	; 0x25
    15d8:	9e a1       	ldd	r25, Y+38	; 0x26
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	3f ef       	ldi	r19, 0xFF	; 255
    15de:	4f e7       	ldi	r20, 0x7F	; 127
    15e0:	57 e4       	ldi	r21, 0x47	; 71
    15e2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15e6:	18 16       	cp	r1, r24
    15e8:	4c f5       	brge	.+82     	; 0x163c <STEPER_voidFullStep+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ea:	6f a1       	ldd	r22, Y+39	; 0x27
    15ec:	78 a5       	ldd	r23, Y+40	; 0x28
    15ee:	89 a5       	ldd	r24, Y+41	; 0x29
    15f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e2       	ldi	r20, 0x20	; 32
    15f8:	51 e4       	ldi	r21, 0x41	; 65
    15fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	bc 01       	movw	r22, r24
    1604:	cd 01       	movw	r24, r26
    1606:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	9a a3       	std	Y+34, r25	; 0x22
    1610:	89 a3       	std	Y+33, r24	; 0x21
    1612:	0f c0       	rjmp	.+30     	; 0x1632 <STEPER_voidFullStep+0x378>
    1614:	88 ec       	ldi	r24, 0xC8	; 200
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	98 a3       	std	Y+32, r25	; 0x20
    161a:	8f 8f       	std	Y+31, r24	; 0x1f
    161c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    161e:	98 a1       	ldd	r25, Y+32	; 0x20
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	f1 f7       	brne	.-4      	; 0x1620 <STEPER_voidFullStep+0x366>
    1624:	98 a3       	std	Y+32, r25	; 0x20
    1626:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1628:	89 a1       	ldd	r24, Y+33	; 0x21
    162a:	9a a1       	ldd	r25, Y+34	; 0x22
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	9a a3       	std	Y+34, r25	; 0x22
    1630:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1632:	89 a1       	ldd	r24, Y+33	; 0x21
    1634:	9a a1       	ldd	r25, Y+34	; 0x22
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	69 f7       	brne	.-38     	; 0x1614 <STEPER_voidFullStep+0x35a>
    163a:	14 c0       	rjmp	.+40     	; 0x1664 <STEPER_voidFullStep+0x3aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163c:	6b a1       	ldd	r22, Y+35	; 0x23
    163e:	7c a1       	ldd	r23, Y+36	; 0x24
    1640:	8d a1       	ldd	r24, Y+37	; 0x25
    1642:	9e a1       	ldd	r25, Y+38	; 0x26
    1644:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	9a a3       	std	Y+34, r25	; 0x22
    164e:	89 a3       	std	Y+33, r24	; 0x21
    1650:	89 a1       	ldd	r24, Y+33	; 0x21
    1652:	9a a1       	ldd	r25, Y+34	; 0x22
    1654:	9e 8f       	std	Y+30, r25	; 0x1e
    1656:	8d 8f       	std	Y+29, r24	; 0x1d
    1658:	8d 8d       	ldd	r24, Y+29	; 0x1d
    165a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <STEPER_voidFullStep+0x3a2>
    1660:	9e 8f       	std	Y+30, r25	; 0x1e
    1662:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_SetPinValue(BLUE_WIRE,DIO_LOW);
    1664:	82 e0       	ldi	r24, 0x02	; 2
    1666:	60 e0       	ldi	r22, 0x00	; 0
    1668:	40 e0       	ldi	r20, 0x00	; 0
    166a:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_LOW);
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	61 e0       	ldi	r22, 0x01	; 1
    1672:	40 e0       	ldi	r20, 0x00	; 0
    1674:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_HIGH);
    1678:	82 e0       	ldi	r24, 0x02	; 2
    167a:	62 e0       	ldi	r22, 0x02	; 2
    167c:	41 e0       	ldi	r20, 0x01	; 1
    167e:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_HIGH);
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	63 e0       	ldi	r22, 0x03	; 3
    1686:	41 e0       	ldi	r20, 0x01	; 1
    1688:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	_delay_ms(delay);
    168c:	fe 01       	movw	r30, r28
    168e:	e9 5b       	subi	r30, 0xB9	; 185
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	80 81       	ld	r24, Z
    1694:	91 81       	ldd	r25, Z+1	; 0x01
    1696:	cc 01       	movw	r24, r24
    1698:	a0 e0       	ldi	r26, 0x00	; 0
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	bc 01       	movw	r22, r24
    169e:	cd 01       	movw	r24, r26
    16a0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	89 8f       	std	Y+25, r24	; 0x19
    16aa:	9a 8f       	std	Y+26, r25	; 0x1a
    16ac:	ab 8f       	std	Y+27, r26	; 0x1b
    16ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b0:	69 8d       	ldd	r22, Y+25	; 0x19
    16b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	4a ef       	ldi	r20, 0xFA	; 250
    16be:	54 e4       	ldi	r21, 0x44	; 68
    16c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	8d 8b       	std	Y+21, r24	; 0x15
    16ca:	9e 8b       	std	Y+22, r25	; 0x16
    16cc:	af 8b       	std	Y+23, r26	; 0x17
    16ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16d0:	6d 89       	ldd	r22, Y+21	; 0x15
    16d2:	7e 89       	ldd	r23, Y+22	; 0x16
    16d4:	8f 89       	ldd	r24, Y+23	; 0x17
    16d6:	98 8d       	ldd	r25, Y+24	; 0x18
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	40 e8       	ldi	r20, 0x80	; 128
    16de:	5f e3       	ldi	r21, 0x3F	; 63
    16e0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16e4:	88 23       	and	r24, r24
    16e6:	2c f4       	brge	.+10     	; 0x16f2 <STEPER_voidFullStep+0x438>
		__ticks = 1;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	9c 8b       	std	Y+20, r25	; 0x14
    16ee:	8b 8b       	std	Y+19, r24	; 0x13
    16f0:	3f c0       	rjmp	.+126    	; 0x1770 <STEPER_voidFullStep+0x4b6>
	else if (__tmp > 65535)
    16f2:	6d 89       	ldd	r22, Y+21	; 0x15
    16f4:	7e 89       	ldd	r23, Y+22	; 0x16
    16f6:	8f 89       	ldd	r24, Y+23	; 0x17
    16f8:	98 8d       	ldd	r25, Y+24	; 0x18
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	3f ef       	ldi	r19, 0xFF	; 255
    16fe:	4f e7       	ldi	r20, 0x7F	; 127
    1700:	57 e4       	ldi	r21, 0x47	; 71
    1702:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1706:	18 16       	cp	r1, r24
    1708:	4c f5       	brge	.+82     	; 0x175c <STEPER_voidFullStep+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170a:	69 8d       	ldd	r22, Y+25	; 0x19
    170c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    170e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1710:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e2       	ldi	r20, 0x20	; 32
    1718:	51 e4       	ldi	r21, 0x41	; 65
    171a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	bc 01       	movw	r22, r24
    1724:	cd 01       	movw	r24, r26
    1726:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	9c 8b       	std	Y+20, r25	; 0x14
    1730:	8b 8b       	std	Y+19, r24	; 0x13
    1732:	0f c0       	rjmp	.+30     	; 0x1752 <STEPER_voidFullStep+0x498>
    1734:	88 ec       	ldi	r24, 0xC8	; 200
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	9a 8b       	std	Y+18, r25	; 0x12
    173a:	89 8b       	std	Y+17, r24	; 0x11
    173c:	89 89       	ldd	r24, Y+17	; 0x11
    173e:	9a 89       	ldd	r25, Y+18	; 0x12
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	f1 f7       	brne	.-4      	; 0x1740 <STEPER_voidFullStep+0x486>
    1744:	9a 8b       	std	Y+18, r25	; 0x12
    1746:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1748:	8b 89       	ldd	r24, Y+19	; 0x13
    174a:	9c 89       	ldd	r25, Y+20	; 0x14
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	9c 8b       	std	Y+20, r25	; 0x14
    1750:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1752:	8b 89       	ldd	r24, Y+19	; 0x13
    1754:	9c 89       	ldd	r25, Y+20	; 0x14
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	69 f7       	brne	.-38     	; 0x1734 <STEPER_voidFullStep+0x47a>
    175a:	14 c0       	rjmp	.+40     	; 0x1784 <STEPER_voidFullStep+0x4ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175c:	6d 89       	ldd	r22, Y+21	; 0x15
    175e:	7e 89       	ldd	r23, Y+22	; 0x16
    1760:	8f 89       	ldd	r24, Y+23	; 0x17
    1762:	98 8d       	ldd	r25, Y+24	; 0x18
    1764:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	9c 8b       	std	Y+20, r25	; 0x14
    176e:	8b 8b       	std	Y+19, r24	; 0x13
    1770:	8b 89       	ldd	r24, Y+19	; 0x13
    1772:	9c 89       	ldd	r25, Y+20	; 0x14
    1774:	98 8b       	std	Y+16, r25	; 0x10
    1776:	8f 87       	std	Y+15, r24	; 0x0f
    1778:	8f 85       	ldd	r24, Y+15	; 0x0f
    177a:	98 89       	ldd	r25, Y+16	; 0x10
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	f1 f7       	brne	.-4      	; 0x177c <STEPER_voidFullStep+0x4c2>
    1780:	98 8b       	std	Y+16, r25	; 0x10
    1782:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_SetPinValue(BLUE_WIRE,DIO_HIGH);
    1784:	82 e0       	ldi	r24, 0x02	; 2
    1786:	60 e0       	ldi	r22, 0x00	; 0
    1788:	41 e0       	ldi	r20, 0x01	; 1
    178a:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_LOW);
    178e:	82 e0       	ldi	r24, 0x02	; 2
    1790:	61 e0       	ldi	r22, 0x01	; 1
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_LOW);
    1798:	82 e0       	ldi	r24, 0x02	; 2
    179a:	62 e0       	ldi	r22, 0x02	; 2
    179c:	40 e0       	ldi	r20, 0x00	; 0
    179e:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_HIGH);
    17a2:	82 e0       	ldi	r24, 0x02	; 2
    17a4:	63 e0       	ldi	r22, 0x03	; 3
    17a6:	41 e0       	ldi	r20, 0x01	; 1
    17a8:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	_delay_ms(delay);
    17ac:	fe 01       	movw	r30, r28
    17ae:	e9 5b       	subi	r30, 0xB9	; 185
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	80 81       	ld	r24, Z
    17b4:	91 81       	ldd	r25, Z+1	; 0x01
    17b6:	cc 01       	movw	r24, r24
    17b8:	a0 e0       	ldi	r26, 0x00	; 0
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	bc 01       	movw	r22, r24
    17be:	cd 01       	movw	r24, r26
    17c0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	8b 87       	std	Y+11, r24	; 0x0b
    17ca:	9c 87       	std	Y+12, r25	; 0x0c
    17cc:	ad 87       	std	Y+13, r26	; 0x0d
    17ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	4a ef       	ldi	r20, 0xFA	; 250
    17de:	54 e4       	ldi	r21, 0x44	; 68
    17e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	8f 83       	std	Y+7, r24	; 0x07
    17ea:	98 87       	std	Y+8, r25	; 0x08
    17ec:	a9 87       	std	Y+9, r26	; 0x09
    17ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17f0:	6f 81       	ldd	r22, Y+7	; 0x07
    17f2:	78 85       	ldd	r23, Y+8	; 0x08
    17f4:	89 85       	ldd	r24, Y+9	; 0x09
    17f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	40 e8       	ldi	r20, 0x80	; 128
    17fe:	5f e3       	ldi	r21, 0x3F	; 63
    1800:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1804:	88 23       	and	r24, r24
    1806:	2c f4       	brge	.+10     	; 0x1812 <STEPER_voidFullStep+0x558>
		__ticks = 1;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	9e 83       	std	Y+6, r25	; 0x06
    180e:	8d 83       	std	Y+5, r24	; 0x05
    1810:	3f c0       	rjmp	.+126    	; 0x1890 <STEPER_voidFullStep+0x5d6>
	else if (__tmp > 65535)
    1812:	6f 81       	ldd	r22, Y+7	; 0x07
    1814:	78 85       	ldd	r23, Y+8	; 0x08
    1816:	89 85       	ldd	r24, Y+9	; 0x09
    1818:	9a 85       	ldd	r25, Y+10	; 0x0a
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	3f ef       	ldi	r19, 0xFF	; 255
    181e:	4f e7       	ldi	r20, 0x7F	; 127
    1820:	57 e4       	ldi	r21, 0x47	; 71
    1822:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1826:	18 16       	cp	r1, r24
    1828:	4c f5       	brge	.+82     	; 0x187c <STEPER_voidFullStep+0x5c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182a:	6b 85       	ldd	r22, Y+11	; 0x0b
    182c:	7c 85       	ldd	r23, Y+12	; 0x0c
    182e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1830:	9e 85       	ldd	r25, Y+14	; 0x0e
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e2       	ldi	r20, 0x20	; 32
    1838:	51 e4       	ldi	r21, 0x41	; 65
    183a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	bc 01       	movw	r22, r24
    1844:	cd 01       	movw	r24, r26
    1846:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	9e 83       	std	Y+6, r25	; 0x06
    1850:	8d 83       	std	Y+5, r24	; 0x05
    1852:	0f c0       	rjmp	.+30     	; 0x1872 <STEPER_voidFullStep+0x5b8>
    1854:	88 ec       	ldi	r24, 0xC8	; 200
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	9c 83       	std	Y+4, r25	; 0x04
    185a:	8b 83       	std	Y+3, r24	; 0x03
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	f1 f7       	brne	.-4      	; 0x1860 <STEPER_voidFullStep+0x5a6>
    1864:	9c 83       	std	Y+4, r25	; 0x04
    1866:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1868:	8d 81       	ldd	r24, Y+5	; 0x05
    186a:	9e 81       	ldd	r25, Y+6	; 0x06
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	9e 83       	std	Y+6, r25	; 0x06
    1870:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1872:	8d 81       	ldd	r24, Y+5	; 0x05
    1874:	9e 81       	ldd	r25, Y+6	; 0x06
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	69 f7       	brne	.-38     	; 0x1854 <STEPER_voidFullStep+0x59a>
    187a:	14 c0       	rjmp	.+40     	; 0x18a4 <STEPER_voidFullStep+0x5ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    187c:	6f 81       	ldd	r22, Y+7	; 0x07
    187e:	78 85       	ldd	r23, Y+8	; 0x08
    1880:	89 85       	ldd	r24, Y+9	; 0x09
    1882:	9a 85       	ldd	r25, Y+10	; 0x0a
    1884:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	9e 83       	std	Y+6, r25	; 0x06
    188e:	8d 83       	std	Y+5, r24	; 0x05
    1890:	8d 81       	ldd	r24, Y+5	; 0x05
    1892:	9e 81       	ldd	r25, Y+6	; 0x06
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	f1 f7       	brne	.-4      	; 0x189c <STEPER_voidFullStep+0x5e2>
    18a0:	9a 83       	std	Y+2, r25	; 0x02
    18a2:	89 83       	std	Y+1, r24	; 0x01
}
    18a4:	c8 5b       	subi	r28, 0xB8	; 184
    18a6:	df 4f       	sbci	r29, 0xFF	; 255
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	cd bf       	out	0x3d, r28	; 61
    18b2:	cf 91       	pop	r28
    18b4:	df 91       	pop	r29
    18b6:	1f 91       	pop	r17
    18b8:	0f 91       	pop	r16
    18ba:	08 95       	ret

000018bc <STEPER_voidHalfStep>:

void STEPER_voidHalfStep(void)
{
    18bc:	0f 93       	push	r16
    18be:	1f 93       	push	r17
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	c0 58       	subi	r28, 0x80	; 128
    18ca:	d0 40       	sbci	r29, 0x00	; 0
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
	u16 delay=500;
    18d6:	fe 01       	movw	r30, r28
    18d8:	e1 58       	subi	r30, 0x81	; 129
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	84 ef       	ldi	r24, 0xF4	; 244
    18de:	91 e0       	ldi	r25, 0x01	; 1
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	80 83       	st	Z, r24
	DIO_SetPinValue(BLUE_WIRE,DIO_HIGH);
    18e4:	82 e0       	ldi	r24, 0x02	; 2
    18e6:	60 e0       	ldi	r22, 0x00	; 0
    18e8:	41 e0       	ldi	r20, 0x01	; 1
    18ea:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_LOW);
    18ee:	82 e0       	ldi	r24, 0x02	; 2
    18f0:	61 e0       	ldi	r22, 0x01	; 1
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_LOW);
    18f8:	82 e0       	ldi	r24, 0x02	; 2
    18fa:	62 e0       	ldi	r22, 0x02	; 2
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_HIGH);
    1902:	82 e0       	ldi	r24, 0x02	; 2
    1904:	63 e0       	ldi	r22, 0x03	; 3
    1906:	41 e0       	ldi	r20, 0x01	; 1
    1908:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	_delay_ms(delay);
    190c:	fe 01       	movw	r30, r28
    190e:	e1 58       	subi	r30, 0x81	; 129
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	80 81       	ld	r24, Z
    1914:	91 81       	ldd	r25, Z+1	; 0x01
    1916:	cc 01       	movw	r24, r24
    1918:	a0 e0       	ldi	r26, 0x00	; 0
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	bc 01       	movw	r22, r24
    191e:	cd 01       	movw	r24, r26
    1920:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	fe 01       	movw	r30, r28
    192a:	e5 58       	subi	r30, 0x85	; 133
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	80 83       	st	Z, r24
    1930:	91 83       	std	Z+1, r25	; 0x01
    1932:	a2 83       	std	Z+2, r26	; 0x02
    1934:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1936:	8e 01       	movw	r16, r28
    1938:	09 58       	subi	r16, 0x89	; 137
    193a:	1f 4f       	sbci	r17, 0xFF	; 255
    193c:	fe 01       	movw	r30, r28
    193e:	e5 58       	subi	r30, 0x85	; 133
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	60 81       	ld	r22, Z
    1944:	71 81       	ldd	r23, Z+1	; 0x01
    1946:	82 81       	ldd	r24, Z+2	; 0x02
    1948:	93 81       	ldd	r25, Z+3	; 0x03
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	4a ef       	ldi	r20, 0xFA	; 250
    1950:	54 e4       	ldi	r21, 0x44	; 68
    1952:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	f8 01       	movw	r30, r16
    195c:	80 83       	st	Z, r24
    195e:	91 83       	std	Z+1, r25	; 0x01
    1960:	a2 83       	std	Z+2, r26	; 0x02
    1962:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1964:	fe 01       	movw	r30, r28
    1966:	e9 58       	subi	r30, 0x89	; 137
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	60 81       	ld	r22, Z
    196c:	71 81       	ldd	r23, Z+1	; 0x01
    196e:	82 81       	ldd	r24, Z+2	; 0x02
    1970:	93 81       	ldd	r25, Z+3	; 0x03
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e8       	ldi	r20, 0x80	; 128
    1978:	5f e3       	ldi	r21, 0x3F	; 63
    197a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    197e:	88 23       	and	r24, r24
    1980:	44 f4       	brge	.+16     	; 0x1992 <STEPER_voidHalfStep+0xd6>
		__ticks = 1;
    1982:	fe 01       	movw	r30, r28
    1984:	eb 58       	subi	r30, 0x8B	; 139
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	91 83       	std	Z+1, r25	; 0x01
    198e:	80 83       	st	Z, r24
    1990:	64 c0       	rjmp	.+200    	; 0x1a5a <STEPER_voidHalfStep+0x19e>
	else if (__tmp > 65535)
    1992:	fe 01       	movw	r30, r28
    1994:	e9 58       	subi	r30, 0x89	; 137
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	60 81       	ld	r22, Z
    199a:	71 81       	ldd	r23, Z+1	; 0x01
    199c:	82 81       	ldd	r24, Z+2	; 0x02
    199e:	93 81       	ldd	r25, Z+3	; 0x03
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	3f ef       	ldi	r19, 0xFF	; 255
    19a4:	4f e7       	ldi	r20, 0x7F	; 127
    19a6:	57 e4       	ldi	r21, 0x47	; 71
    19a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19ac:	18 16       	cp	r1, r24
    19ae:	0c f0       	brlt	.+2      	; 0x19b2 <STEPER_voidHalfStep+0xf6>
    19b0:	43 c0       	rjmp	.+134    	; 0x1a38 <STEPER_voidHalfStep+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b2:	fe 01       	movw	r30, r28
    19b4:	e5 58       	subi	r30, 0x85	; 133
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	60 81       	ld	r22, Z
    19ba:	71 81       	ldd	r23, Z+1	; 0x01
    19bc:	82 81       	ldd	r24, Z+2	; 0x02
    19be:	93 81       	ldd	r25, Z+3	; 0x03
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e2       	ldi	r20, 0x20	; 32
    19c6:	51 e4       	ldi	r21, 0x41	; 65
    19c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	8e 01       	movw	r16, r28
    19d2:	0b 58       	subi	r16, 0x8B	; 139
    19d4:	1f 4f       	sbci	r17, 0xFF	; 255
    19d6:	bc 01       	movw	r22, r24
    19d8:	cd 01       	movw	r24, r26
    19da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	f8 01       	movw	r30, r16
    19e4:	91 83       	std	Z+1, r25	; 0x01
    19e6:	80 83       	st	Z, r24
    19e8:	1f c0       	rjmp	.+62     	; 0x1a28 <STEPER_voidHalfStep+0x16c>
    19ea:	fe 01       	movw	r30, r28
    19ec:	ed 58       	subi	r30, 0x8D	; 141
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	88 ec       	ldi	r24, 0xC8	; 200
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	91 83       	std	Z+1, r25	; 0x01
    19f6:	80 83       	st	Z, r24
    19f8:	fe 01       	movw	r30, r28
    19fa:	ed 58       	subi	r30, 0x8D	; 141
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	80 81       	ld	r24, Z
    1a00:	91 81       	ldd	r25, Z+1	; 0x01
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <STEPER_voidHalfStep+0x146>
    1a06:	fe 01       	movw	r30, r28
    1a08:	ed 58       	subi	r30, 0x8D	; 141
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a10:	de 01       	movw	r26, r28
    1a12:	ab 58       	subi	r26, 0x8B	; 139
    1a14:	bf 4f       	sbci	r27, 0xFF	; 255
    1a16:	fe 01       	movw	r30, r28
    1a18:	eb 58       	subi	r30, 0x8B	; 139
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	80 81       	ld	r24, Z
    1a1e:	91 81       	ldd	r25, Z+1	; 0x01
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	11 96       	adiw	r26, 0x01	; 1
    1a24:	9c 93       	st	X, r25
    1a26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a28:	fe 01       	movw	r30, r28
    1a2a:	eb 58       	subi	r30, 0x8B	; 139
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	d1 f6       	brne	.-76     	; 0x19ea <STEPER_voidHalfStep+0x12e>
    1a36:	27 c0       	rjmp	.+78     	; 0x1a86 <STEPER_voidHalfStep+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a38:	8e 01       	movw	r16, r28
    1a3a:	0b 58       	subi	r16, 0x8B	; 139
    1a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3e:	fe 01       	movw	r30, r28
    1a40:	e9 58       	subi	r30, 0x89	; 137
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	60 81       	ld	r22, Z
    1a46:	71 81       	ldd	r23, Z+1	; 0x01
    1a48:	82 81       	ldd	r24, Z+2	; 0x02
    1a4a:	93 81       	ldd	r25, Z+3	; 0x03
    1a4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	f8 01       	movw	r30, r16
    1a56:	91 83       	std	Z+1, r25	; 0x01
    1a58:	80 83       	st	Z, r24
    1a5a:	de 01       	movw	r26, r28
    1a5c:	af 58       	subi	r26, 0x8F	; 143
    1a5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a60:	fe 01       	movw	r30, r28
    1a62:	eb 58       	subi	r30, 0x8B	; 139
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	80 81       	ld	r24, Z
    1a68:	91 81       	ldd	r25, Z+1	; 0x01
    1a6a:	8d 93       	st	X+, r24
    1a6c:	9c 93       	st	X, r25
    1a6e:	fe 01       	movw	r30, r28
    1a70:	ef 58       	subi	r30, 0x8F	; 143
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	80 81       	ld	r24, Z
    1a76:	91 81       	ldd	r25, Z+1	; 0x01
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <STEPER_voidHalfStep+0x1bc>
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	ef 58       	subi	r30, 0x8F	; 143
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	91 83       	std	Z+1, r25	; 0x01
    1a84:	80 83       	st	Z, r24
	DIO_SetPinValue(BLUE_WIRE,DIO_HIGH);
    1a86:	82 e0       	ldi	r24, 0x02	; 2
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_LOW);
    1a90:	82 e0       	ldi	r24, 0x02	; 2
    1a92:	61 e0       	ldi	r22, 0x01	; 1
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_LOW);
    1a9a:	82 e0       	ldi	r24, 0x02	; 2
    1a9c:	62 e0       	ldi	r22, 0x02	; 2
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
    1aa0:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_LOW);
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	63 e0       	ldi	r22, 0x03	; 3
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	_delay_ms(delay);
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e1 58       	subi	r30, 0x81	; 129
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	80 81       	ld	r24, Z
    1ab6:	91 81       	ldd	r25, Z+1	; 0x01
    1ab8:	cc 01       	movw	r24, r24
    1aba:	a0 e0       	ldi	r26, 0x00	; 0
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	bc 01       	movw	r22, r24
    1ac0:	cd 01       	movw	r24, r26
    1ac2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	fe 01       	movw	r30, r28
    1acc:	e3 59       	subi	r30, 0x93	; 147
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	80 83       	st	Z, r24
    1ad2:	91 83       	std	Z+1, r25	; 0x01
    1ad4:	a2 83       	std	Z+2, r26	; 0x02
    1ad6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad8:	8e 01       	movw	r16, r28
    1ada:	07 59       	subi	r16, 0x97	; 151
    1adc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ade:	fe 01       	movw	r30, r28
    1ae0:	e3 59       	subi	r30, 0x93	; 147
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	60 81       	ld	r22, Z
    1ae6:	71 81       	ldd	r23, Z+1	; 0x01
    1ae8:	82 81       	ldd	r24, Z+2	; 0x02
    1aea:	93 81       	ldd	r25, Z+3	; 0x03
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	4a ef       	ldi	r20, 0xFA	; 250
    1af2:	54 e4       	ldi	r21, 0x44	; 68
    1af4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	f8 01       	movw	r30, r16
    1afe:	80 83       	st	Z, r24
    1b00:	91 83       	std	Z+1, r25	; 0x01
    1b02:	a2 83       	std	Z+2, r26	; 0x02
    1b04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b06:	fe 01       	movw	r30, r28
    1b08:	e7 59       	subi	r30, 0x97	; 151
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	60 81       	ld	r22, Z
    1b0e:	71 81       	ldd	r23, Z+1	; 0x01
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e8       	ldi	r20, 0x80	; 128
    1b1a:	5f e3       	ldi	r21, 0x3F	; 63
    1b1c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b20:	88 23       	and	r24, r24
    1b22:	44 f4       	brge	.+16     	; 0x1b34 <STEPER_voidHalfStep+0x278>
		__ticks = 1;
    1b24:	fe 01       	movw	r30, r28
    1b26:	e9 59       	subi	r30, 0x99	; 153
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	91 83       	std	Z+1, r25	; 0x01
    1b30:	80 83       	st	Z, r24
    1b32:	64 c0       	rjmp	.+200    	; 0x1bfc <STEPER_voidHalfStep+0x340>
	else if (__tmp > 65535)
    1b34:	fe 01       	movw	r30, r28
    1b36:	e7 59       	subi	r30, 0x97	; 151
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	60 81       	ld	r22, Z
    1b3c:	71 81       	ldd	r23, Z+1	; 0x01
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	3f ef       	ldi	r19, 0xFF	; 255
    1b46:	4f e7       	ldi	r20, 0x7F	; 127
    1b48:	57 e4       	ldi	r21, 0x47	; 71
    1b4a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b4e:	18 16       	cp	r1, r24
    1b50:	0c f0       	brlt	.+2      	; 0x1b54 <STEPER_voidHalfStep+0x298>
    1b52:	43 c0       	rjmp	.+134    	; 0x1bda <STEPER_voidHalfStep+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b54:	fe 01       	movw	r30, r28
    1b56:	e3 59       	subi	r30, 0x93	; 147
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	60 81       	ld	r22, Z
    1b5c:	71 81       	ldd	r23, Z+1	; 0x01
    1b5e:	82 81       	ldd	r24, Z+2	; 0x02
    1b60:	93 81       	ldd	r25, Z+3	; 0x03
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e2       	ldi	r20, 0x20	; 32
    1b68:	51 e4       	ldi	r21, 0x41	; 65
    1b6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	8e 01       	movw	r16, r28
    1b74:	09 59       	subi	r16, 0x99	; 153
    1b76:	1f 4f       	sbci	r17, 0xFF	; 255
    1b78:	bc 01       	movw	r22, r24
    1b7a:	cd 01       	movw	r24, r26
    1b7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	f8 01       	movw	r30, r16
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	80 83       	st	Z, r24
    1b8a:	1f c0       	rjmp	.+62     	; 0x1bca <STEPER_voidHalfStep+0x30e>
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	eb 59       	subi	r30, 0x9B	; 155
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	88 ec       	ldi	r24, 0xC8	; 200
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	80 83       	st	Z, r24
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	eb 59       	subi	r30, 0x9B	; 155
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	80 81       	ld	r24, Z
    1ba2:	91 81       	ldd	r25, Z+1	; 0x01
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <STEPER_voidHalfStep+0x2e8>
    1ba8:	fe 01       	movw	r30, r28
    1baa:	eb 59       	subi	r30, 0x9B	; 155
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	91 83       	std	Z+1, r25	; 0x01
    1bb0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb2:	de 01       	movw	r26, r28
    1bb4:	a9 59       	subi	r26, 0x99	; 153
    1bb6:	bf 4f       	sbci	r27, 0xFF	; 255
    1bb8:	fe 01       	movw	r30, r28
    1bba:	e9 59       	subi	r30, 0x99	; 153
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	80 81       	ld	r24, Z
    1bc0:	91 81       	ldd	r25, Z+1	; 0x01
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	11 96       	adiw	r26, 0x01	; 1
    1bc6:	9c 93       	st	X, r25
    1bc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e9 59       	subi	r30, 0x99	; 153
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	80 81       	ld	r24, Z
    1bd2:	91 81       	ldd	r25, Z+1	; 0x01
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	d1 f6       	brne	.-76     	; 0x1b8c <STEPER_voidHalfStep+0x2d0>
    1bd8:	27 c0       	rjmp	.+78     	; 0x1c28 <STEPER_voidHalfStep+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bda:	8e 01       	movw	r16, r28
    1bdc:	09 59       	subi	r16, 0x99	; 153
    1bde:	1f 4f       	sbci	r17, 0xFF	; 255
    1be0:	fe 01       	movw	r30, r28
    1be2:	e7 59       	subi	r30, 0x97	; 151
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	60 81       	ld	r22, Z
    1be8:	71 81       	ldd	r23, Z+1	; 0x01
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	93 81       	ldd	r25, Z+3	; 0x03
    1bee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	91 83       	std	Z+1, r25	; 0x01
    1bfa:	80 83       	st	Z, r24
    1bfc:	de 01       	movw	r26, r28
    1bfe:	ad 59       	subi	r26, 0x9D	; 157
    1c00:	bf 4f       	sbci	r27, 0xFF	; 255
    1c02:	fe 01       	movw	r30, r28
    1c04:	e9 59       	subi	r30, 0x99	; 153
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	80 81       	ld	r24, Z
    1c0a:	91 81       	ldd	r25, Z+1	; 0x01
    1c0c:	8d 93       	st	X+, r24
    1c0e:	9c 93       	st	X, r25
    1c10:	fe 01       	movw	r30, r28
    1c12:	ed 59       	subi	r30, 0x9D	; 157
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	80 81       	ld	r24, Z
    1c18:	91 81       	ldd	r25, Z+1	; 0x01
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <STEPER_voidHalfStep+0x35e>
    1c1e:	fe 01       	movw	r30, r28
    1c20:	ed 59       	subi	r30, 0x9D	; 157
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	91 83       	std	Z+1, r25	; 0x01
    1c26:	80 83       	st	Z, r24
	DIO_SetPinValue(BLUE_WIRE,DIO_HIGH);
    1c28:	82 e0       	ldi	r24, 0x02	; 2
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	41 e0       	ldi	r20, 0x01	; 1
    1c2e:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_HIGH);
    1c32:	82 e0       	ldi	r24, 0x02	; 2
    1c34:	61 e0       	ldi	r22, 0x01	; 1
    1c36:	41 e0       	ldi	r20, 0x01	; 1
    1c38:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_LOW);
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	62 e0       	ldi	r22, 0x02	; 2
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_LOW);
    1c46:	82 e0       	ldi	r24, 0x02	; 2
    1c48:	63 e0       	ldi	r22, 0x03	; 3
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	_delay_ms(delay);
    1c50:	fe 01       	movw	r30, r28
    1c52:	e1 58       	subi	r30, 0x81	; 129
    1c54:	ff 4f       	sbci	r31, 0xFF	; 255
    1c56:	80 81       	ld	r24, Z
    1c58:	91 81       	ldd	r25, Z+1	; 0x01
    1c5a:	cc 01       	movw	r24, r24
    1c5c:	a0 e0       	ldi	r26, 0x00	; 0
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	bc 01       	movw	r22, r24
    1c62:	cd 01       	movw	r24, r26
    1c64:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	e1 5a       	subi	r30, 0xA1	; 161
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	80 83       	st	Z, r24
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	a2 83       	std	Z+2, r26	; 0x02
    1c78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7a:	8e 01       	movw	r16, r28
    1c7c:	05 5a       	subi	r16, 0xA5	; 165
    1c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c80:	fe 01       	movw	r30, r28
    1c82:	e1 5a       	subi	r30, 0xA1	; 161
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	60 81       	ld	r22, Z
    1c88:	71 81       	ldd	r23, Z+1	; 0x01
    1c8a:	82 81       	ldd	r24, Z+2	; 0x02
    1c8c:	93 81       	ldd	r25, Z+3	; 0x03
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	4a ef       	ldi	r20, 0xFA	; 250
    1c94:	54 e4       	ldi	r21, 0x44	; 68
    1c96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	80 83       	st	Z, r24
    1ca2:	91 83       	std	Z+1, r25	; 0x01
    1ca4:	a2 83       	std	Z+2, r26	; 0x02
    1ca6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ca8:	fe 01       	movw	r30, r28
    1caa:	e5 5a       	subi	r30, 0xA5	; 165
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	60 81       	ld	r22, Z
    1cb0:	71 81       	ldd	r23, Z+1	; 0x01
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e8       	ldi	r20, 0x80	; 128
    1cbc:	5f e3       	ldi	r21, 0x3F	; 63
    1cbe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cc2:	88 23       	and	r24, r24
    1cc4:	44 f4       	brge	.+16     	; 0x1cd6 <STEPER_voidHalfStep+0x41a>
		__ticks = 1;
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e7 5a       	subi	r30, 0xA7	; 167
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	91 83       	std	Z+1, r25	; 0x01
    1cd2:	80 83       	st	Z, r24
    1cd4:	64 c0       	rjmp	.+200    	; 0x1d9e <STEPER_voidHalfStep+0x4e2>
	else if (__tmp > 65535)
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	e5 5a       	subi	r30, 0xA5	; 165
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	60 81       	ld	r22, Z
    1cde:	71 81       	ldd	r23, Z+1	; 0x01
    1ce0:	82 81       	ldd	r24, Z+2	; 0x02
    1ce2:	93 81       	ldd	r25, Z+3	; 0x03
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	3f ef       	ldi	r19, 0xFF	; 255
    1ce8:	4f e7       	ldi	r20, 0x7F	; 127
    1cea:	57 e4       	ldi	r21, 0x47	; 71
    1cec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cf0:	18 16       	cp	r1, r24
    1cf2:	0c f0       	brlt	.+2      	; 0x1cf6 <STEPER_voidHalfStep+0x43a>
    1cf4:	43 c0       	rjmp	.+134    	; 0x1d7c <STEPER_voidHalfStep+0x4c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e1 5a       	subi	r30, 0xA1	; 161
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	60 81       	ld	r22, Z
    1cfe:	71 81       	ldd	r23, Z+1	; 0x01
    1d00:	82 81       	ldd	r24, Z+2	; 0x02
    1d02:	93 81       	ldd	r25, Z+3	; 0x03
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e2       	ldi	r20, 0x20	; 32
    1d0a:	51 e4       	ldi	r21, 0x41	; 65
    1d0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	8e 01       	movw	r16, r28
    1d16:	07 5a       	subi	r16, 0xA7	; 167
    1d18:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1a:	bc 01       	movw	r22, r24
    1d1c:	cd 01       	movw	r24, r26
    1d1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	f8 01       	movw	r30, r16
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	80 83       	st	Z, r24
    1d2c:	1f c0       	rjmp	.+62     	; 0x1d6c <STEPER_voidHalfStep+0x4b0>
    1d2e:	fe 01       	movw	r30, r28
    1d30:	e9 5a       	subi	r30, 0xA9	; 169
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	88 ec       	ldi	r24, 0xC8	; 200
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	91 83       	std	Z+1, r25	; 0x01
    1d3a:	80 83       	st	Z, r24
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	e9 5a       	subi	r30, 0xA9	; 169
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	80 81       	ld	r24, Z
    1d44:	91 81       	ldd	r25, Z+1	; 0x01
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <STEPER_voidHalfStep+0x48a>
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e9 5a       	subi	r30, 0xA9	; 169
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	91 83       	std	Z+1, r25	; 0x01
    1d52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d54:	de 01       	movw	r26, r28
    1d56:	a7 5a       	subi	r26, 0xA7	; 167
    1d58:	bf 4f       	sbci	r27, 0xFF	; 255
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e7 5a       	subi	r30, 0xA7	; 167
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	80 81       	ld	r24, Z
    1d62:	91 81       	ldd	r25, Z+1	; 0x01
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	11 96       	adiw	r26, 0x01	; 1
    1d68:	9c 93       	st	X, r25
    1d6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e7 5a       	subi	r30, 0xA7	; 167
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	80 81       	ld	r24, Z
    1d74:	91 81       	ldd	r25, Z+1	; 0x01
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	d1 f6       	brne	.-76     	; 0x1d2e <STEPER_voidHalfStep+0x472>
    1d7a:	27 c0       	rjmp	.+78     	; 0x1dca <STEPER_voidHalfStep+0x50e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7c:	8e 01       	movw	r16, r28
    1d7e:	07 5a       	subi	r16, 0xA7	; 167
    1d80:	1f 4f       	sbci	r17, 0xFF	; 255
    1d82:	fe 01       	movw	r30, r28
    1d84:	e5 5a       	subi	r30, 0xA5	; 165
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	60 81       	ld	r22, Z
    1d8a:	71 81       	ldd	r23, Z+1	; 0x01
    1d8c:	82 81       	ldd	r24, Z+2	; 0x02
    1d8e:	93 81       	ldd	r25, Z+3	; 0x03
    1d90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	f8 01       	movw	r30, r16
    1d9a:	91 83       	std	Z+1, r25	; 0x01
    1d9c:	80 83       	st	Z, r24
    1d9e:	de 01       	movw	r26, r28
    1da0:	ab 5a       	subi	r26, 0xAB	; 171
    1da2:	bf 4f       	sbci	r27, 0xFF	; 255
    1da4:	fe 01       	movw	r30, r28
    1da6:	e7 5a       	subi	r30, 0xA7	; 167
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	80 81       	ld	r24, Z
    1dac:	91 81       	ldd	r25, Z+1	; 0x01
    1dae:	8d 93       	st	X+, r24
    1db0:	9c 93       	st	X, r25
    1db2:	fe 01       	movw	r30, r28
    1db4:	eb 5a       	subi	r30, 0xAB	; 171
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	80 81       	ld	r24, Z
    1dba:	91 81       	ldd	r25, Z+1	; 0x01
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <STEPER_voidHalfStep+0x500>
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	eb 5a       	subi	r30, 0xAB	; 171
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	91 83       	std	Z+1, r25	; 0x01
    1dc8:	80 83       	st	Z, r24
	DIO_SetPinValue(BLUE_WIRE,DIO_LOW);
    1dca:	82 e0       	ldi	r24, 0x02	; 2
    1dcc:	60 e0       	ldi	r22, 0x00	; 0
    1dce:	40 e0       	ldi	r20, 0x00	; 0
    1dd0:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_HIGH);
    1dd4:	82 e0       	ldi	r24, 0x02	; 2
    1dd6:	61 e0       	ldi	r22, 0x01	; 1
    1dd8:	41 e0       	ldi	r20, 0x01	; 1
    1dda:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_LOW);
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	62 e0       	ldi	r22, 0x02	; 2
    1de2:	40 e0       	ldi	r20, 0x00	; 0
    1de4:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_LOW);
    1de8:	82 e0       	ldi	r24, 0x02	; 2
    1dea:	63 e0       	ldi	r22, 0x03	; 3
    1dec:	40 e0       	ldi	r20, 0x00	; 0
    1dee:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	_delay_ms(delay);
    1df2:	fe 01       	movw	r30, r28
    1df4:	e1 58       	subi	r30, 0x81	; 129
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 81       	ld	r24, Z
    1dfa:	91 81       	ldd	r25, Z+1	; 0x01
    1dfc:	cc 01       	movw	r24, r24
    1dfe:	a0 e0       	ldi	r26, 0x00	; 0
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	fe 01       	movw	r30, r28
    1e10:	ef 5a       	subi	r30, 0xAF	; 175
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	80 83       	st	Z, r24
    1e16:	91 83       	std	Z+1, r25	; 0x01
    1e18:	a2 83       	std	Z+2, r26	; 0x02
    1e1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1c:	8e 01       	movw	r16, r28
    1e1e:	03 5b       	subi	r16, 0xB3	; 179
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	fe 01       	movw	r30, r28
    1e24:	ef 5a       	subi	r30, 0xAF	; 175
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	60 81       	ld	r22, Z
    1e2a:	71 81       	ldd	r23, Z+1	; 0x01
    1e2c:	82 81       	ldd	r24, Z+2	; 0x02
    1e2e:	93 81       	ldd	r25, Z+3	; 0x03
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	4a ef       	ldi	r20, 0xFA	; 250
    1e36:	54 e4       	ldi	r21, 0x44	; 68
    1e38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	f8 01       	movw	r30, r16
    1e42:	80 83       	st	Z, r24
    1e44:	91 83       	std	Z+1, r25	; 0x01
    1e46:	a2 83       	std	Z+2, r26	; 0x02
    1e48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	e3 5b       	subi	r30, 0xB3	; 179
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	60 81       	ld	r22, Z
    1e52:	71 81       	ldd	r23, Z+1	; 0x01
    1e54:	82 81       	ldd	r24, Z+2	; 0x02
    1e56:	93 81       	ldd	r25, Z+3	; 0x03
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e8       	ldi	r20, 0x80	; 128
    1e5e:	5f e3       	ldi	r21, 0x3F	; 63
    1e60:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e64:	88 23       	and	r24, r24
    1e66:	44 f4       	brge	.+16     	; 0x1e78 <STEPER_voidHalfStep+0x5bc>
		__ticks = 1;
    1e68:	fe 01       	movw	r30, r28
    1e6a:	e5 5b       	subi	r30, 0xB5	; 181
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	91 83       	std	Z+1, r25	; 0x01
    1e74:	80 83       	st	Z, r24
    1e76:	64 c0       	rjmp	.+200    	; 0x1f40 <STEPER_voidHalfStep+0x684>
	else if (__tmp > 65535)
    1e78:	fe 01       	movw	r30, r28
    1e7a:	e3 5b       	subi	r30, 0xB3	; 179
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	60 81       	ld	r22, Z
    1e80:	71 81       	ldd	r23, Z+1	; 0x01
    1e82:	82 81       	ldd	r24, Z+2	; 0x02
    1e84:	93 81       	ldd	r25, Z+3	; 0x03
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	3f ef       	ldi	r19, 0xFF	; 255
    1e8a:	4f e7       	ldi	r20, 0x7F	; 127
    1e8c:	57 e4       	ldi	r21, 0x47	; 71
    1e8e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e92:	18 16       	cp	r1, r24
    1e94:	0c f0       	brlt	.+2      	; 0x1e98 <STEPER_voidHalfStep+0x5dc>
    1e96:	43 c0       	rjmp	.+134    	; 0x1f1e <STEPER_voidHalfStep+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e98:	fe 01       	movw	r30, r28
    1e9a:	ef 5a       	subi	r30, 0xAF	; 175
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	60 81       	ld	r22, Z
    1ea0:	71 81       	ldd	r23, Z+1	; 0x01
    1ea2:	82 81       	ldd	r24, Z+2	; 0x02
    1ea4:	93 81       	ldd	r25, Z+3	; 0x03
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e2       	ldi	r20, 0x20	; 32
    1eac:	51 e4       	ldi	r21, 0x41	; 65
    1eae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	8e 01       	movw	r16, r28
    1eb8:	05 5b       	subi	r16, 0xB5	; 181
    1eba:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebc:	bc 01       	movw	r22, r24
    1ebe:	cd 01       	movw	r24, r26
    1ec0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	f8 01       	movw	r30, r16
    1eca:	91 83       	std	Z+1, r25	; 0x01
    1ecc:	80 83       	st	Z, r24
    1ece:	1f c0       	rjmp	.+62     	; 0x1f0e <STEPER_voidHalfStep+0x652>
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	e7 5b       	subi	r30, 0xB7	; 183
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	88 ec       	ldi	r24, 0xC8	; 200
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	91 83       	std	Z+1, r25	; 0x01
    1edc:	80 83       	st	Z, r24
    1ede:	fe 01       	movw	r30, r28
    1ee0:	e7 5b       	subi	r30, 0xB7	; 183
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	80 81       	ld	r24, Z
    1ee6:	91 81       	ldd	r25, Z+1	; 0x01
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <STEPER_voidHalfStep+0x62c>
    1eec:	fe 01       	movw	r30, r28
    1eee:	e7 5b       	subi	r30, 0xB7	; 183
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	91 83       	std	Z+1, r25	; 0x01
    1ef4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef6:	de 01       	movw	r26, r28
    1ef8:	a5 5b       	subi	r26, 0xB5	; 181
    1efa:	bf 4f       	sbci	r27, 0xFF	; 255
    1efc:	fe 01       	movw	r30, r28
    1efe:	e5 5b       	subi	r30, 0xB5	; 181
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	80 81       	ld	r24, Z
    1f04:	91 81       	ldd	r25, Z+1	; 0x01
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	11 96       	adiw	r26, 0x01	; 1
    1f0a:	9c 93       	st	X, r25
    1f0c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0e:	fe 01       	movw	r30, r28
    1f10:	e5 5b       	subi	r30, 0xB5	; 181
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	80 81       	ld	r24, Z
    1f16:	91 81       	ldd	r25, Z+1	; 0x01
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	d1 f6       	brne	.-76     	; 0x1ed0 <STEPER_voidHalfStep+0x614>
    1f1c:	27 c0       	rjmp	.+78     	; 0x1f6c <STEPER_voidHalfStep+0x6b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1e:	8e 01       	movw	r16, r28
    1f20:	05 5b       	subi	r16, 0xB5	; 181
    1f22:	1f 4f       	sbci	r17, 0xFF	; 255
    1f24:	fe 01       	movw	r30, r28
    1f26:	e3 5b       	subi	r30, 0xB3	; 179
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	60 81       	ld	r22, Z
    1f2c:	71 81       	ldd	r23, Z+1	; 0x01
    1f2e:	82 81       	ldd	r24, Z+2	; 0x02
    1f30:	93 81       	ldd	r25, Z+3	; 0x03
    1f32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	91 83       	std	Z+1, r25	; 0x01
    1f3e:	80 83       	st	Z, r24
    1f40:	de 01       	movw	r26, r28
    1f42:	a9 5b       	subi	r26, 0xB9	; 185
    1f44:	bf 4f       	sbci	r27, 0xFF	; 255
    1f46:	fe 01       	movw	r30, r28
    1f48:	e5 5b       	subi	r30, 0xB5	; 181
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	80 81       	ld	r24, Z
    1f4e:	91 81       	ldd	r25, Z+1	; 0x01
    1f50:	8d 93       	st	X+, r24
    1f52:	9c 93       	st	X, r25
    1f54:	fe 01       	movw	r30, r28
    1f56:	e9 5b       	subi	r30, 0xB9	; 185
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	80 81       	ld	r24, Z
    1f5c:	91 81       	ldd	r25, Z+1	; 0x01
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <STEPER_voidHalfStep+0x6a2>
    1f62:	fe 01       	movw	r30, r28
    1f64:	e9 5b       	subi	r30, 0xB9	; 185
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	91 83       	std	Z+1, r25	; 0x01
    1f6a:	80 83       	st	Z, r24
	DIO_SetPinValue(BLUE_WIRE,DIO_LOW);
    1f6c:	82 e0       	ldi	r24, 0x02	; 2
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_HIGH);
    1f76:	82 e0       	ldi	r24, 0x02	; 2
    1f78:	61 e0       	ldi	r22, 0x01	; 1
    1f7a:	41 e0       	ldi	r20, 0x01	; 1
    1f7c:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_HIGH);
    1f80:	82 e0       	ldi	r24, 0x02	; 2
    1f82:	62 e0       	ldi	r22, 0x02	; 2
    1f84:	41 e0       	ldi	r20, 0x01	; 1
    1f86:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_LOW);
    1f8a:	82 e0       	ldi	r24, 0x02	; 2
    1f8c:	63 e0       	ldi	r22, 0x03	; 3
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	_delay_ms(delay);
    1f94:	fe 01       	movw	r30, r28
    1f96:	e1 58       	subi	r30, 0x81	; 129
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	80 81       	ld	r24, Z
    1f9c:	91 81       	ldd	r25, Z+1	; 0x01
    1f9e:	cc 01       	movw	r24, r24
    1fa0:	a0 e0       	ldi	r26, 0x00	; 0
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	bc 01       	movw	r22, r24
    1fa6:	cd 01       	movw	r24, r26
    1fa8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	ed 5b       	subi	r30, 0xBD	; 189
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	80 83       	st	Z, r24
    1fb8:	91 83       	std	Z+1, r25	; 0x01
    1fba:	a2 83       	std	Z+2, r26	; 0x02
    1fbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbe:	8e 01       	movw	r16, r28
    1fc0:	01 5c       	subi	r16, 0xC1	; 193
    1fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	ed 5b       	subi	r30, 0xBD	; 189
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	60 81       	ld	r22, Z
    1fcc:	71 81       	ldd	r23, Z+1	; 0x01
    1fce:	82 81       	ldd	r24, Z+2	; 0x02
    1fd0:	93 81       	ldd	r25, Z+3	; 0x03
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	4a ef       	ldi	r20, 0xFA	; 250
    1fd8:	54 e4       	ldi	r21, 0x44	; 68
    1fda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	f8 01       	movw	r30, r16
    1fe4:	80 83       	st	Z, r24
    1fe6:	91 83       	std	Z+1, r25	; 0x01
    1fe8:	a2 83       	std	Z+2, r26	; 0x02
    1fea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fec:	fe 01       	movw	r30, r28
    1fee:	ff 96       	adiw	r30, 0x3f	; 63
    1ff0:	60 81       	ld	r22, Z
    1ff2:	71 81       	ldd	r23, Z+1	; 0x01
    1ff4:	82 81       	ldd	r24, Z+2	; 0x02
    1ff6:	93 81       	ldd	r25, Z+3	; 0x03
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e8       	ldi	r20, 0x80	; 128
    1ffe:	5f e3       	ldi	r21, 0x3F	; 63
    2000:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2004:	88 23       	and	r24, r24
    2006:	2c f4       	brge	.+10     	; 0x2012 <STEPER_voidHalfStep+0x756>
		__ticks = 1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9e af       	std	Y+62, r25	; 0x3e
    200e:	8d af       	std	Y+61, r24	; 0x3d
    2010:	46 c0       	rjmp	.+140    	; 0x209e <STEPER_voidHalfStep+0x7e2>
	else if (__tmp > 65535)
    2012:	fe 01       	movw	r30, r28
    2014:	ff 96       	adiw	r30, 0x3f	; 63
    2016:	60 81       	ld	r22, Z
    2018:	71 81       	ldd	r23, Z+1	; 0x01
    201a:	82 81       	ldd	r24, Z+2	; 0x02
    201c:	93 81       	ldd	r25, Z+3	; 0x03
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	3f ef       	ldi	r19, 0xFF	; 255
    2022:	4f e7       	ldi	r20, 0x7F	; 127
    2024:	57 e4       	ldi	r21, 0x47	; 71
    2026:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    202a:	18 16       	cp	r1, r24
    202c:	64 f5       	brge	.+88     	; 0x2086 <STEPER_voidHalfStep+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202e:	fe 01       	movw	r30, r28
    2030:	ed 5b       	subi	r30, 0xBD	; 189
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	60 81       	ld	r22, Z
    2036:	71 81       	ldd	r23, Z+1	; 0x01
    2038:	82 81       	ldd	r24, Z+2	; 0x02
    203a:	93 81       	ldd	r25, Z+3	; 0x03
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e2       	ldi	r20, 0x20	; 32
    2042:	51 e4       	ldi	r21, 0x41	; 65
    2044:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	9e af       	std	Y+62, r25	; 0x3e
    205a:	8d af       	std	Y+61, r24	; 0x3d
    205c:	0f c0       	rjmp	.+30     	; 0x207c <STEPER_voidHalfStep+0x7c0>
    205e:	88 ec       	ldi	r24, 0xC8	; 200
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	9c af       	std	Y+60, r25	; 0x3c
    2064:	8b af       	std	Y+59, r24	; 0x3b
    2066:	8b ad       	ldd	r24, Y+59	; 0x3b
    2068:	9c ad       	ldd	r25, Y+60	; 0x3c
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <STEPER_voidHalfStep+0x7ae>
    206e:	9c af       	std	Y+60, r25	; 0x3c
    2070:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2072:	8d ad       	ldd	r24, Y+61	; 0x3d
    2074:	9e ad       	ldd	r25, Y+62	; 0x3e
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	9e af       	std	Y+62, r25	; 0x3e
    207a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207c:	8d ad       	ldd	r24, Y+61	; 0x3d
    207e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	69 f7       	brne	.-38     	; 0x205e <STEPER_voidHalfStep+0x7a2>
    2084:	16 c0       	rjmp	.+44     	; 0x20b2 <STEPER_voidHalfStep+0x7f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2086:	fe 01       	movw	r30, r28
    2088:	ff 96       	adiw	r30, 0x3f	; 63
    208a:	60 81       	ld	r22, Z
    208c:	71 81       	ldd	r23, Z+1	; 0x01
    208e:	82 81       	ldd	r24, Z+2	; 0x02
    2090:	93 81       	ldd	r25, Z+3	; 0x03
    2092:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	9e af       	std	Y+62, r25	; 0x3e
    209c:	8d af       	std	Y+61, r24	; 0x3d
    209e:	8d ad       	ldd	r24, Y+61	; 0x3d
    20a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    20a2:	9a af       	std	Y+58, r25	; 0x3a
    20a4:	89 af       	std	Y+57, r24	; 0x39
    20a6:	89 ad       	ldd	r24, Y+57	; 0x39
    20a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <STEPER_voidHalfStep+0x7ee>
    20ae:	9a af       	std	Y+58, r25	; 0x3a
    20b0:	89 af       	std	Y+57, r24	; 0x39
	DIO_SetPinValue(BLUE_WIRE,DIO_LOW);
    20b2:	82 e0       	ldi	r24, 0x02	; 2
    20b4:	60 e0       	ldi	r22, 0x00	; 0
    20b6:	40 e0       	ldi	r20, 0x00	; 0
    20b8:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_LOW);
    20bc:	82 e0       	ldi	r24, 0x02	; 2
    20be:	61 e0       	ldi	r22, 0x01	; 1
    20c0:	40 e0       	ldi	r20, 0x00	; 0
    20c2:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_HIGH);
    20c6:	82 e0       	ldi	r24, 0x02	; 2
    20c8:	62 e0       	ldi	r22, 0x02	; 2
    20ca:	41 e0       	ldi	r20, 0x01	; 1
    20cc:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_LOW);
    20d0:	82 e0       	ldi	r24, 0x02	; 2
    20d2:	63 e0       	ldi	r22, 0x03	; 3
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	_delay_ms(delay);
    20da:	fe 01       	movw	r30, r28
    20dc:	e1 58       	subi	r30, 0x81	; 129
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	80 81       	ld	r24, Z
    20e2:	91 81       	ldd	r25, Z+1	; 0x01
    20e4:	cc 01       	movw	r24, r24
    20e6:	a0 e0       	ldi	r26, 0x00	; 0
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	bc 01       	movw	r22, r24
    20ec:	cd 01       	movw	r24, r26
    20ee:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	8d ab       	std	Y+53, r24	; 0x35
    20f8:	9e ab       	std	Y+54, r25	; 0x36
    20fa:	af ab       	std	Y+55, r26	; 0x37
    20fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fe:	6d a9       	ldd	r22, Y+53	; 0x35
    2100:	7e a9       	ldd	r23, Y+54	; 0x36
    2102:	8f a9       	ldd	r24, Y+55	; 0x37
    2104:	98 ad       	ldd	r25, Y+56	; 0x38
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	4a ef       	ldi	r20, 0xFA	; 250
    210c:	54 e4       	ldi	r21, 0x44	; 68
    210e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	89 ab       	std	Y+49, r24	; 0x31
    2118:	9a ab       	std	Y+50, r25	; 0x32
    211a:	ab ab       	std	Y+51, r26	; 0x33
    211c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    211e:	69 a9       	ldd	r22, Y+49	; 0x31
    2120:	7a a9       	ldd	r23, Y+50	; 0x32
    2122:	8b a9       	ldd	r24, Y+51	; 0x33
    2124:	9c a9       	ldd	r25, Y+52	; 0x34
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e8       	ldi	r20, 0x80	; 128
    212c:	5f e3       	ldi	r21, 0x3F	; 63
    212e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2132:	88 23       	and	r24, r24
    2134:	2c f4       	brge	.+10     	; 0x2140 <STEPER_voidHalfStep+0x884>
		__ticks = 1;
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	98 ab       	std	Y+48, r25	; 0x30
    213c:	8f a7       	std	Y+47, r24	; 0x2f
    213e:	3f c0       	rjmp	.+126    	; 0x21be <STEPER_voidHalfStep+0x902>
	else if (__tmp > 65535)
    2140:	69 a9       	ldd	r22, Y+49	; 0x31
    2142:	7a a9       	ldd	r23, Y+50	; 0x32
    2144:	8b a9       	ldd	r24, Y+51	; 0x33
    2146:	9c a9       	ldd	r25, Y+52	; 0x34
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	3f ef       	ldi	r19, 0xFF	; 255
    214c:	4f e7       	ldi	r20, 0x7F	; 127
    214e:	57 e4       	ldi	r21, 0x47	; 71
    2150:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2154:	18 16       	cp	r1, r24
    2156:	4c f5       	brge	.+82     	; 0x21aa <STEPER_voidHalfStep+0x8ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2158:	6d a9       	ldd	r22, Y+53	; 0x35
    215a:	7e a9       	ldd	r23, Y+54	; 0x36
    215c:	8f a9       	ldd	r24, Y+55	; 0x37
    215e:	98 ad       	ldd	r25, Y+56	; 0x38
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e2       	ldi	r20, 0x20	; 32
    2166:	51 e4       	ldi	r21, 0x41	; 65
    2168:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	bc 01       	movw	r22, r24
    2172:	cd 01       	movw	r24, r26
    2174:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	98 ab       	std	Y+48, r25	; 0x30
    217e:	8f a7       	std	Y+47, r24	; 0x2f
    2180:	0f c0       	rjmp	.+30     	; 0x21a0 <STEPER_voidHalfStep+0x8e4>
    2182:	88 ec       	ldi	r24, 0xC8	; 200
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	9e a7       	std	Y+46, r25	; 0x2e
    2188:	8d a7       	std	Y+45, r24	; 0x2d
    218a:	8d a5       	ldd	r24, Y+45	; 0x2d
    218c:	9e a5       	ldd	r25, Y+46	; 0x2e
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	f1 f7       	brne	.-4      	; 0x218e <STEPER_voidHalfStep+0x8d2>
    2192:	9e a7       	std	Y+46, r25	; 0x2e
    2194:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2196:	8f a5       	ldd	r24, Y+47	; 0x2f
    2198:	98 a9       	ldd	r25, Y+48	; 0x30
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	98 ab       	std	Y+48, r25	; 0x30
    219e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21a2:	98 a9       	ldd	r25, Y+48	; 0x30
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	69 f7       	brne	.-38     	; 0x2182 <STEPER_voidHalfStep+0x8c6>
    21a8:	14 c0       	rjmp	.+40     	; 0x21d2 <STEPER_voidHalfStep+0x916>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21aa:	69 a9       	ldd	r22, Y+49	; 0x31
    21ac:	7a a9       	ldd	r23, Y+50	; 0x32
    21ae:	8b a9       	ldd	r24, Y+51	; 0x33
    21b0:	9c a9       	ldd	r25, Y+52	; 0x34
    21b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	98 ab       	std	Y+48, r25	; 0x30
    21bc:	8f a7       	std	Y+47, r24	; 0x2f
    21be:	8f a5       	ldd	r24, Y+47	; 0x2f
    21c0:	98 a9       	ldd	r25, Y+48	; 0x30
    21c2:	9c a7       	std	Y+44, r25	; 0x2c
    21c4:	8b a7       	std	Y+43, r24	; 0x2b
    21c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    21c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <STEPER_voidHalfStep+0x90e>
    21ce:	9c a7       	std	Y+44, r25	; 0x2c
    21d0:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_SetPinValue(BLUE_WIRE,DIO_LOW);
    21d2:	82 e0       	ldi	r24, 0x02	; 2
    21d4:	60 e0       	ldi	r22, 0x00	; 0
    21d6:	40 e0       	ldi	r20, 0x00	; 0
    21d8:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_LOW);
    21dc:	82 e0       	ldi	r24, 0x02	; 2
    21de:	61 e0       	ldi	r22, 0x01	; 1
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_HIGH);
    21e6:	82 e0       	ldi	r24, 0x02	; 2
    21e8:	62 e0       	ldi	r22, 0x02	; 2
    21ea:	41 e0       	ldi	r20, 0x01	; 1
    21ec:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_HIGH);
    21f0:	82 e0       	ldi	r24, 0x02	; 2
    21f2:	63 e0       	ldi	r22, 0x03	; 3
    21f4:	41 e0       	ldi	r20, 0x01	; 1
    21f6:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	_delay_ms(delay);
    21fa:	fe 01       	movw	r30, r28
    21fc:	e1 58       	subi	r30, 0x81	; 129
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	80 81       	ld	r24, Z
    2202:	91 81       	ldd	r25, Z+1	; 0x01
    2204:	cc 01       	movw	r24, r24
    2206:	a0 e0       	ldi	r26, 0x00	; 0
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	8f a3       	std	Y+39, r24	; 0x27
    2218:	98 a7       	std	Y+40, r25	; 0x28
    221a:	a9 a7       	std	Y+41, r26	; 0x29
    221c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    221e:	6f a1       	ldd	r22, Y+39	; 0x27
    2220:	78 a5       	ldd	r23, Y+40	; 0x28
    2222:	89 a5       	ldd	r24, Y+41	; 0x29
    2224:	9a a5       	ldd	r25, Y+42	; 0x2a
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	4a ef       	ldi	r20, 0xFA	; 250
    222c:	54 e4       	ldi	r21, 0x44	; 68
    222e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	8b a3       	std	Y+35, r24	; 0x23
    2238:	9c a3       	std	Y+36, r25	; 0x24
    223a:	ad a3       	std	Y+37, r26	; 0x25
    223c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    223e:	6b a1       	ldd	r22, Y+35	; 0x23
    2240:	7c a1       	ldd	r23, Y+36	; 0x24
    2242:	8d a1       	ldd	r24, Y+37	; 0x25
    2244:	9e a1       	ldd	r25, Y+38	; 0x26
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e8       	ldi	r20, 0x80	; 128
    224c:	5f e3       	ldi	r21, 0x3F	; 63
    224e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2252:	88 23       	and	r24, r24
    2254:	2c f4       	brge	.+10     	; 0x2260 <STEPER_voidHalfStep+0x9a4>
		__ticks = 1;
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	9a a3       	std	Y+34, r25	; 0x22
    225c:	89 a3       	std	Y+33, r24	; 0x21
    225e:	3f c0       	rjmp	.+126    	; 0x22de <STEPER_voidHalfStep+0xa22>
	else if (__tmp > 65535)
    2260:	6b a1       	ldd	r22, Y+35	; 0x23
    2262:	7c a1       	ldd	r23, Y+36	; 0x24
    2264:	8d a1       	ldd	r24, Y+37	; 0x25
    2266:	9e a1       	ldd	r25, Y+38	; 0x26
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	3f ef       	ldi	r19, 0xFF	; 255
    226c:	4f e7       	ldi	r20, 0x7F	; 127
    226e:	57 e4       	ldi	r21, 0x47	; 71
    2270:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2274:	18 16       	cp	r1, r24
    2276:	4c f5       	brge	.+82     	; 0x22ca <STEPER_voidHalfStep+0xa0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2278:	6f a1       	ldd	r22, Y+39	; 0x27
    227a:	78 a5       	ldd	r23, Y+40	; 0x28
    227c:	89 a5       	ldd	r24, Y+41	; 0x29
    227e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 e2       	ldi	r20, 0x20	; 32
    2286:	51 e4       	ldi	r21, 0x41	; 65
    2288:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	bc 01       	movw	r22, r24
    2292:	cd 01       	movw	r24, r26
    2294:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	9a a3       	std	Y+34, r25	; 0x22
    229e:	89 a3       	std	Y+33, r24	; 0x21
    22a0:	0f c0       	rjmp	.+30     	; 0x22c0 <STEPER_voidHalfStep+0xa04>
    22a2:	88 ec       	ldi	r24, 0xC8	; 200
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	98 a3       	std	Y+32, r25	; 0x20
    22a8:	8f 8f       	std	Y+31, r24	; 0x1f
    22aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22ac:	98 a1       	ldd	r25, Y+32	; 0x20
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	f1 f7       	brne	.-4      	; 0x22ae <STEPER_voidHalfStep+0x9f2>
    22b2:	98 a3       	std	Y+32, r25	; 0x20
    22b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b6:	89 a1       	ldd	r24, Y+33	; 0x21
    22b8:	9a a1       	ldd	r25, Y+34	; 0x22
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	9a a3       	std	Y+34, r25	; 0x22
    22be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c0:	89 a1       	ldd	r24, Y+33	; 0x21
    22c2:	9a a1       	ldd	r25, Y+34	; 0x22
    22c4:	00 97       	sbiw	r24, 0x00	; 0
    22c6:	69 f7       	brne	.-38     	; 0x22a2 <STEPER_voidHalfStep+0x9e6>
    22c8:	14 c0       	rjmp	.+40     	; 0x22f2 <STEPER_voidHalfStep+0xa36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ca:	6b a1       	ldd	r22, Y+35	; 0x23
    22cc:	7c a1       	ldd	r23, Y+36	; 0x24
    22ce:	8d a1       	ldd	r24, Y+37	; 0x25
    22d0:	9e a1       	ldd	r25, Y+38	; 0x26
    22d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	9a a3       	std	Y+34, r25	; 0x22
    22dc:	89 a3       	std	Y+33, r24	; 0x21
    22de:	89 a1       	ldd	r24, Y+33	; 0x21
    22e0:	9a a1       	ldd	r25, Y+34	; 0x22
    22e2:	9e 8f       	std	Y+30, r25	; 0x1e
    22e4:	8d 8f       	std	Y+29, r24	; 0x1d
    22e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	f1 f7       	brne	.-4      	; 0x22ea <STEPER_voidHalfStep+0xa2e>
    22ee:	9e 8f       	std	Y+30, r25	; 0x1e
    22f0:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_SetPinValue(BLUE_WIRE,DIO_LOW);
    22f2:	82 e0       	ldi	r24, 0x02	; 2
    22f4:	60 e0       	ldi	r22, 0x00	; 0
    22f6:	40 e0       	ldi	r20, 0x00	; 0
    22f8:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_LOW);
    22fc:	82 e0       	ldi	r24, 0x02	; 2
    22fe:	61 e0       	ldi	r22, 0x01	; 1
    2300:	40 e0       	ldi	r20, 0x00	; 0
    2302:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_LOW);
    2306:	82 e0       	ldi	r24, 0x02	; 2
    2308:	62 e0       	ldi	r22, 0x02	; 2
    230a:	40 e0       	ldi	r20, 0x00	; 0
    230c:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_HIGH);
    2310:	82 e0       	ldi	r24, 0x02	; 2
    2312:	63 e0       	ldi	r22, 0x03	; 3
    2314:	41 e0       	ldi	r20, 0x01	; 1
    2316:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	_delay_ms(delay);
    231a:	fe 01       	movw	r30, r28
    231c:	e1 58       	subi	r30, 0x81	; 129
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	80 81       	ld	r24, Z
    2322:	91 81       	ldd	r25, Z+1	; 0x01
    2324:	cc 01       	movw	r24, r24
    2326:	a0 e0       	ldi	r26, 0x00	; 0
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	bc 01       	movw	r22, r24
    232c:	cd 01       	movw	r24, r26
    232e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	89 8f       	std	Y+25, r24	; 0x19
    2338:	9a 8f       	std	Y+26, r25	; 0x1a
    233a:	ab 8f       	std	Y+27, r26	; 0x1b
    233c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233e:	69 8d       	ldd	r22, Y+25	; 0x19
    2340:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2342:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2344:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	4a ef       	ldi	r20, 0xFA	; 250
    234c:	54 e4       	ldi	r21, 0x44	; 68
    234e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	8d 8b       	std	Y+21, r24	; 0x15
    2358:	9e 8b       	std	Y+22, r25	; 0x16
    235a:	af 8b       	std	Y+23, r26	; 0x17
    235c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    235e:	6d 89       	ldd	r22, Y+21	; 0x15
    2360:	7e 89       	ldd	r23, Y+22	; 0x16
    2362:	8f 89       	ldd	r24, Y+23	; 0x17
    2364:	98 8d       	ldd	r25, Y+24	; 0x18
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e8       	ldi	r20, 0x80	; 128
    236c:	5f e3       	ldi	r21, 0x3F	; 63
    236e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2372:	88 23       	and	r24, r24
    2374:	2c f4       	brge	.+10     	; 0x2380 <STEPER_voidHalfStep+0xac4>
		__ticks = 1;
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	9c 8b       	std	Y+20, r25	; 0x14
    237c:	8b 8b       	std	Y+19, r24	; 0x13
    237e:	3f c0       	rjmp	.+126    	; 0x23fe <STEPER_voidHalfStep+0xb42>
	else if (__tmp > 65535)
    2380:	6d 89       	ldd	r22, Y+21	; 0x15
    2382:	7e 89       	ldd	r23, Y+22	; 0x16
    2384:	8f 89       	ldd	r24, Y+23	; 0x17
    2386:	98 8d       	ldd	r25, Y+24	; 0x18
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	3f ef       	ldi	r19, 0xFF	; 255
    238c:	4f e7       	ldi	r20, 0x7F	; 127
    238e:	57 e4       	ldi	r21, 0x47	; 71
    2390:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2394:	18 16       	cp	r1, r24
    2396:	4c f5       	brge	.+82     	; 0x23ea <STEPER_voidHalfStep+0xb2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2398:	69 8d       	ldd	r22, Y+25	; 0x19
    239a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    239c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    239e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	40 e2       	ldi	r20, 0x20	; 32
    23a6:	51 e4       	ldi	r21, 0x41	; 65
    23a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	bc 01       	movw	r22, r24
    23b2:	cd 01       	movw	r24, r26
    23b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	9c 8b       	std	Y+20, r25	; 0x14
    23be:	8b 8b       	std	Y+19, r24	; 0x13
    23c0:	0f c0       	rjmp	.+30     	; 0x23e0 <STEPER_voidHalfStep+0xb24>
    23c2:	88 ec       	ldi	r24, 0xC8	; 200
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	9a 8b       	std	Y+18, r25	; 0x12
    23c8:	89 8b       	std	Y+17, r24	; 0x11
    23ca:	89 89       	ldd	r24, Y+17	; 0x11
    23cc:	9a 89       	ldd	r25, Y+18	; 0x12
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <STEPER_voidHalfStep+0xb12>
    23d2:	9a 8b       	std	Y+18, r25	; 0x12
    23d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d6:	8b 89       	ldd	r24, Y+19	; 0x13
    23d8:	9c 89       	ldd	r25, Y+20	; 0x14
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	9c 8b       	std	Y+20, r25	; 0x14
    23de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e0:	8b 89       	ldd	r24, Y+19	; 0x13
    23e2:	9c 89       	ldd	r25, Y+20	; 0x14
    23e4:	00 97       	sbiw	r24, 0x00	; 0
    23e6:	69 f7       	brne	.-38     	; 0x23c2 <STEPER_voidHalfStep+0xb06>
    23e8:	14 c0       	rjmp	.+40     	; 0x2412 <STEPER_voidHalfStep+0xb56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ea:	6d 89       	ldd	r22, Y+21	; 0x15
    23ec:	7e 89       	ldd	r23, Y+22	; 0x16
    23ee:	8f 89       	ldd	r24, Y+23	; 0x17
    23f0:	98 8d       	ldd	r25, Y+24	; 0x18
    23f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	9c 8b       	std	Y+20, r25	; 0x14
    23fc:	8b 8b       	std	Y+19, r24	; 0x13
    23fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2400:	9c 89       	ldd	r25, Y+20	; 0x14
    2402:	98 8b       	std	Y+16, r25	; 0x10
    2404:	8f 87       	std	Y+15, r24	; 0x0f
    2406:	8f 85       	ldd	r24, Y+15	; 0x0f
    2408:	98 89       	ldd	r25, Y+16	; 0x10
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	f1 f7       	brne	.-4      	; 0x240a <STEPER_voidHalfStep+0xb4e>
    240e:	98 8b       	std	Y+16, r25	; 0x10
    2410:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_SetPinValue(BLUE_WIRE,DIO_HIGH);
    2412:	82 e0       	ldi	r24, 0x02	; 2
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(RED_WIRE,DIO_LOW);
    241c:	82 e0       	ldi	r24, 0x02	; 2
    241e:	61 e0       	ldi	r22, 0x01	; 1
    2420:	40 e0       	ldi	r20, 0x00	; 0
    2422:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(YELLOW_WIRE,DIO_LOW);
    2426:	82 e0       	ldi	r24, 0x02	; 2
    2428:	62 e0       	ldi	r22, 0x02	; 2
    242a:	40 e0       	ldi	r20, 0x00	; 0
    242c:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	DIO_SetPinValue(ORANGE_WIRE,DIO_HIGH);
    2430:	82 e0       	ldi	r24, 0x02	; 2
    2432:	63 e0       	ldi	r22, 0x03	; 3
    2434:	41 e0       	ldi	r20, 0x01	; 1
    2436:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	_delay_ms(delay);
    243a:	fe 01       	movw	r30, r28
    243c:	e1 58       	subi	r30, 0x81	; 129
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 81       	ld	r24, Z
    2442:	91 81       	ldd	r25, Z+1	; 0x01
    2444:	cc 01       	movw	r24, r24
    2446:	a0 e0       	ldi	r26, 0x00	; 0
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	bc 01       	movw	r22, r24
    244c:	cd 01       	movw	r24, r26
    244e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	8b 87       	std	Y+11, r24	; 0x0b
    2458:	9c 87       	std	Y+12, r25	; 0x0c
    245a:	ad 87       	std	Y+13, r26	; 0x0d
    245c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2460:	7c 85       	ldd	r23, Y+12	; 0x0c
    2462:	8d 85       	ldd	r24, Y+13	; 0x0d
    2464:	9e 85       	ldd	r25, Y+14	; 0x0e
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	4a ef       	ldi	r20, 0xFA	; 250
    246c:	54 e4       	ldi	r21, 0x44	; 68
    246e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	8f 83       	std	Y+7, r24	; 0x07
    2478:	98 87       	std	Y+8, r25	; 0x08
    247a:	a9 87       	std	Y+9, r26	; 0x09
    247c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    247e:	6f 81       	ldd	r22, Y+7	; 0x07
    2480:	78 85       	ldd	r23, Y+8	; 0x08
    2482:	89 85       	ldd	r24, Y+9	; 0x09
    2484:	9a 85       	ldd	r25, Y+10	; 0x0a
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e8       	ldi	r20, 0x80	; 128
    248c:	5f e3       	ldi	r21, 0x3F	; 63
    248e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2492:	88 23       	and	r24, r24
    2494:	2c f4       	brge	.+10     	; 0x24a0 <STEPER_voidHalfStep+0xbe4>
		__ticks = 1;
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	9e 83       	std	Y+6, r25	; 0x06
    249c:	8d 83       	std	Y+5, r24	; 0x05
    249e:	3f c0       	rjmp	.+126    	; 0x251e <STEPER_voidHalfStep+0xc62>
	else if (__tmp > 65535)
    24a0:	6f 81       	ldd	r22, Y+7	; 0x07
    24a2:	78 85       	ldd	r23, Y+8	; 0x08
    24a4:	89 85       	ldd	r24, Y+9	; 0x09
    24a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	3f ef       	ldi	r19, 0xFF	; 255
    24ac:	4f e7       	ldi	r20, 0x7F	; 127
    24ae:	57 e4       	ldi	r21, 0x47	; 71
    24b0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24b4:	18 16       	cp	r1, r24
    24b6:	4c f5       	brge	.+82     	; 0x250a <STEPER_voidHalfStep+0xc4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    24bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24be:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e2       	ldi	r20, 0x20	; 32
    24c6:	51 e4       	ldi	r21, 0x41	; 65
    24c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	bc 01       	movw	r22, r24
    24d2:	cd 01       	movw	r24, r26
    24d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	9e 83       	std	Y+6, r25	; 0x06
    24de:	8d 83       	std	Y+5, r24	; 0x05
    24e0:	0f c0       	rjmp	.+30     	; 0x2500 <STEPER_voidHalfStep+0xc44>
    24e2:	88 ec       	ldi	r24, 0xC8	; 200
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	9c 83       	std	Y+4, r25	; 0x04
    24e8:	8b 83       	std	Y+3, r24	; 0x03
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	9c 81       	ldd	r25, Y+4	; 0x04
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <STEPER_voidHalfStep+0xc32>
    24f2:	9c 83       	std	Y+4, r25	; 0x04
    24f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f6:	8d 81       	ldd	r24, Y+5	; 0x05
    24f8:	9e 81       	ldd	r25, Y+6	; 0x06
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	9e 83       	std	Y+6, r25	; 0x06
    24fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2500:	8d 81       	ldd	r24, Y+5	; 0x05
    2502:	9e 81       	ldd	r25, Y+6	; 0x06
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	69 f7       	brne	.-38     	; 0x24e2 <STEPER_voidHalfStep+0xc26>
    2508:	14 c0       	rjmp	.+40     	; 0x2532 <STEPER_voidHalfStep+0xc76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250a:	6f 81       	ldd	r22, Y+7	; 0x07
    250c:	78 85       	ldd	r23, Y+8	; 0x08
    250e:	89 85       	ldd	r24, Y+9	; 0x09
    2510:	9a 85       	ldd	r25, Y+10	; 0x0a
    2512:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	9e 83       	std	Y+6, r25	; 0x06
    251c:	8d 83       	std	Y+5, r24	; 0x05
    251e:	8d 81       	ldd	r24, Y+5	; 0x05
    2520:	9e 81       	ldd	r25, Y+6	; 0x06
    2522:	9a 83       	std	Y+2, r25	; 0x02
    2524:	89 83       	std	Y+1, r24	; 0x01
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	9a 81       	ldd	r25, Y+2	; 0x02
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	f1 f7       	brne	.-4      	; 0x252a <STEPER_voidHalfStep+0xc6e>
    252e:	9a 83       	std	Y+2, r25	; 0x02
    2530:	89 83       	std	Y+1, r24	; 0x01


}
    2532:	c0 58       	subi	r28, 0x80	; 128
    2534:	df 4f       	sbci	r29, 0xFF	; 255
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	cf 91       	pop	r28
    2542:	df 91       	pop	r29
    2544:	1f 91       	pop	r17
    2546:	0f 91       	pop	r16
    2548:	08 95       	ret

0000254a <LCD_Init>:
#include "LCD_INTERFACE.h"



void LCD_Init(void)
{
    254a:	df 93       	push	r29
    254c:	cf 93       	push	r28
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
    2552:	e8 97       	sbiw	r28, 0x38	; 56
    2554:	0f b6       	in	r0, 0x3f	; 63
    2556:	f8 94       	cli
    2558:	de bf       	out	0x3e, r29	; 62
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinDirection(RS,DIO_OUTPUT); //RS
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	60 e0       	ldi	r22, 0x00	; 0
    2562:	41 e0       	ldi	r20, 0x01	; 1
    2564:	0e 94 63 06 	call	0xcc6	; 0xcc6 <DIO_SetPinDirection>
	DIO_SetPinDirection(EN,DIO_OUTPUT); //EN
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	61 e0       	ldi	r22, 0x01	; 1
    256c:	41 e0       	ldi	r20, 0x01	; 1
    256e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <DIO_SetPinDirection>

	DIO_SetPortDirection(LCD_PORT,0xFF);
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	6f ef       	ldi	r22, 0xFF	; 255
    2576:	0e 94 c0 08 	call	0x1180	; 0x1180 <DIO_SetPortDirection>
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	a8 ec       	ldi	r26, 0xC8	; 200
    2580:	b2 e4       	ldi	r27, 0x42	; 66
    2582:	8d ab       	std	Y+53, r24	; 0x35
    2584:	9e ab       	std	Y+54, r25	; 0x36
    2586:	af ab       	std	Y+55, r26	; 0x37
    2588:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258a:	6d a9       	ldd	r22, Y+53	; 0x35
    258c:	7e a9       	ldd	r23, Y+54	; 0x36
    258e:	8f a9       	ldd	r24, Y+55	; 0x37
    2590:	98 ad       	ldd	r25, Y+56	; 0x38
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	4a ef       	ldi	r20, 0xFA	; 250
    2598:	54 e4       	ldi	r21, 0x44	; 68
    259a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	89 ab       	std	Y+49, r24	; 0x31
    25a4:	9a ab       	std	Y+50, r25	; 0x32
    25a6:	ab ab       	std	Y+51, r26	; 0x33
    25a8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25aa:	69 a9       	ldd	r22, Y+49	; 0x31
    25ac:	7a a9       	ldd	r23, Y+50	; 0x32
    25ae:	8b a9       	ldd	r24, Y+51	; 0x33
    25b0:	9c a9       	ldd	r25, Y+52	; 0x34
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e8       	ldi	r20, 0x80	; 128
    25b8:	5f e3       	ldi	r21, 0x3F	; 63
    25ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25be:	88 23       	and	r24, r24
    25c0:	2c f4       	brge	.+10     	; 0x25cc <LCD_Init+0x82>
		__ticks = 1;
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	98 ab       	std	Y+48, r25	; 0x30
    25c8:	8f a7       	std	Y+47, r24	; 0x2f
    25ca:	3f c0       	rjmp	.+126    	; 0x264a <LCD_Init+0x100>
	else if (__tmp > 65535)
    25cc:	69 a9       	ldd	r22, Y+49	; 0x31
    25ce:	7a a9       	ldd	r23, Y+50	; 0x32
    25d0:	8b a9       	ldd	r24, Y+51	; 0x33
    25d2:	9c a9       	ldd	r25, Y+52	; 0x34
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	3f ef       	ldi	r19, 0xFF	; 255
    25d8:	4f e7       	ldi	r20, 0x7F	; 127
    25da:	57 e4       	ldi	r21, 0x47	; 71
    25dc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25e0:	18 16       	cp	r1, r24
    25e2:	4c f5       	brge	.+82     	; 0x2636 <LCD_Init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e4:	6d a9       	ldd	r22, Y+53	; 0x35
    25e6:	7e a9       	ldd	r23, Y+54	; 0x36
    25e8:	8f a9       	ldd	r24, Y+55	; 0x37
    25ea:	98 ad       	ldd	r25, Y+56	; 0x38
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	40 e2       	ldi	r20, 0x20	; 32
    25f2:	51 e4       	ldi	r21, 0x41	; 65
    25f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	bc 01       	movw	r22, r24
    25fe:	cd 01       	movw	r24, r26
    2600:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	98 ab       	std	Y+48, r25	; 0x30
    260a:	8f a7       	std	Y+47, r24	; 0x2f
    260c:	0f c0       	rjmp	.+30     	; 0x262c <LCD_Init+0xe2>
    260e:	88 ec       	ldi	r24, 0xC8	; 200
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	9e a7       	std	Y+46, r25	; 0x2e
    2614:	8d a7       	std	Y+45, r24	; 0x2d
    2616:	8d a5       	ldd	r24, Y+45	; 0x2d
    2618:	9e a5       	ldd	r25, Y+46	; 0x2e
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	f1 f7       	brne	.-4      	; 0x261a <LCD_Init+0xd0>
    261e:	9e a7       	std	Y+46, r25	; 0x2e
    2620:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2622:	8f a5       	ldd	r24, Y+47	; 0x2f
    2624:	98 a9       	ldd	r25, Y+48	; 0x30
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	98 ab       	std	Y+48, r25	; 0x30
    262a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262c:	8f a5       	ldd	r24, Y+47	; 0x2f
    262e:	98 a9       	ldd	r25, Y+48	; 0x30
    2630:	00 97       	sbiw	r24, 0x00	; 0
    2632:	69 f7       	brne	.-38     	; 0x260e <LCD_Init+0xc4>
    2634:	14 c0       	rjmp	.+40     	; 0x265e <LCD_Init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2636:	69 a9       	ldd	r22, Y+49	; 0x31
    2638:	7a a9       	ldd	r23, Y+50	; 0x32
    263a:	8b a9       	ldd	r24, Y+51	; 0x33
    263c:	9c a9       	ldd	r25, Y+52	; 0x34
    263e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	98 ab       	std	Y+48, r25	; 0x30
    2648:	8f a7       	std	Y+47, r24	; 0x2f
    264a:	8f a5       	ldd	r24, Y+47	; 0x2f
    264c:	98 a9       	ldd	r25, Y+48	; 0x30
    264e:	9c a7       	std	Y+44, r25	; 0x2c
    2650:	8b a7       	std	Y+43, r24	; 0x2b
    2652:	8b a5       	ldd	r24, Y+43	; 0x2b
    2654:	9c a5       	ldd	r25, Y+44	; 0x2c
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <LCD_Init+0x10c>
    265a:	9c a7       	std	Y+44, r25	; 0x2c
    265c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);

	LCD_WriteCommand(0x38);
    265e:	88 e3       	ldi	r24, 0x38	; 56
    2660:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_WriteCommand>
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	a0 e8       	ldi	r26, 0x80	; 128
    266a:	bf e3       	ldi	r27, 0x3F	; 63
    266c:	8f a3       	std	Y+39, r24	; 0x27
    266e:	98 a7       	std	Y+40, r25	; 0x28
    2670:	a9 a7       	std	Y+41, r26	; 0x29
    2672:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2674:	6f a1       	ldd	r22, Y+39	; 0x27
    2676:	78 a5       	ldd	r23, Y+40	; 0x28
    2678:	89 a5       	ldd	r24, Y+41	; 0x29
    267a:	9a a5       	ldd	r25, Y+42	; 0x2a
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	4a ef       	ldi	r20, 0xFA	; 250
    2682:	54 e4       	ldi	r21, 0x44	; 68
    2684:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	8b a3       	std	Y+35, r24	; 0x23
    268e:	9c a3       	std	Y+36, r25	; 0x24
    2690:	ad a3       	std	Y+37, r26	; 0x25
    2692:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2694:	6b a1       	ldd	r22, Y+35	; 0x23
    2696:	7c a1       	ldd	r23, Y+36	; 0x24
    2698:	8d a1       	ldd	r24, Y+37	; 0x25
    269a:	9e a1       	ldd	r25, Y+38	; 0x26
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e8       	ldi	r20, 0x80	; 128
    26a2:	5f e3       	ldi	r21, 0x3F	; 63
    26a4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26a8:	88 23       	and	r24, r24
    26aa:	2c f4       	brge	.+10     	; 0x26b6 <LCD_Init+0x16c>
		__ticks = 1;
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	9a a3       	std	Y+34, r25	; 0x22
    26b2:	89 a3       	std	Y+33, r24	; 0x21
    26b4:	3f c0       	rjmp	.+126    	; 0x2734 <LCD_Init+0x1ea>
	else if (__tmp > 65535)
    26b6:	6b a1       	ldd	r22, Y+35	; 0x23
    26b8:	7c a1       	ldd	r23, Y+36	; 0x24
    26ba:	8d a1       	ldd	r24, Y+37	; 0x25
    26bc:	9e a1       	ldd	r25, Y+38	; 0x26
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	3f ef       	ldi	r19, 0xFF	; 255
    26c2:	4f e7       	ldi	r20, 0x7F	; 127
    26c4:	57 e4       	ldi	r21, 0x47	; 71
    26c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26ca:	18 16       	cp	r1, r24
    26cc:	4c f5       	brge	.+82     	; 0x2720 <LCD_Init+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ce:	6f a1       	ldd	r22, Y+39	; 0x27
    26d0:	78 a5       	ldd	r23, Y+40	; 0x28
    26d2:	89 a5       	ldd	r24, Y+41	; 0x29
    26d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e2       	ldi	r20, 0x20	; 32
    26dc:	51 e4       	ldi	r21, 0x41	; 65
    26de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	bc 01       	movw	r22, r24
    26e8:	cd 01       	movw	r24, r26
    26ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	9a a3       	std	Y+34, r25	; 0x22
    26f4:	89 a3       	std	Y+33, r24	; 0x21
    26f6:	0f c0       	rjmp	.+30     	; 0x2716 <LCD_Init+0x1cc>
    26f8:	88 ec       	ldi	r24, 0xC8	; 200
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	98 a3       	std	Y+32, r25	; 0x20
    26fe:	8f 8f       	std	Y+31, r24	; 0x1f
    2700:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2702:	98 a1       	ldd	r25, Y+32	; 0x20
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	f1 f7       	brne	.-4      	; 0x2704 <LCD_Init+0x1ba>
    2708:	98 a3       	std	Y+32, r25	; 0x20
    270a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270c:	89 a1       	ldd	r24, Y+33	; 0x21
    270e:	9a a1       	ldd	r25, Y+34	; 0x22
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	9a a3       	std	Y+34, r25	; 0x22
    2714:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2716:	89 a1       	ldd	r24, Y+33	; 0x21
    2718:	9a a1       	ldd	r25, Y+34	; 0x22
    271a:	00 97       	sbiw	r24, 0x00	; 0
    271c:	69 f7       	brne	.-38     	; 0x26f8 <LCD_Init+0x1ae>
    271e:	14 c0       	rjmp	.+40     	; 0x2748 <LCD_Init+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2720:	6b a1       	ldd	r22, Y+35	; 0x23
    2722:	7c a1       	ldd	r23, Y+36	; 0x24
    2724:	8d a1       	ldd	r24, Y+37	; 0x25
    2726:	9e a1       	ldd	r25, Y+38	; 0x26
    2728:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	9a a3       	std	Y+34, r25	; 0x22
    2732:	89 a3       	std	Y+33, r24	; 0x21
    2734:	89 a1       	ldd	r24, Y+33	; 0x21
    2736:	9a a1       	ldd	r25, Y+34	; 0x22
    2738:	9e 8f       	std	Y+30, r25	; 0x1e
    273a:	8d 8f       	std	Y+29, r24	; 0x1d
    273c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    273e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	f1 f7       	brne	.-4      	; 0x2740 <LCD_Init+0x1f6>
    2744:	9e 8f       	std	Y+30, r25	; 0x1e
    2746:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_WriteCommand(0x0C);
    2748:	8c e0       	ldi	r24, 0x0C	; 12
    274a:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_WriteCommand>
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	a0 e8       	ldi	r26, 0x80	; 128
    2754:	bf e3       	ldi	r27, 0x3F	; 63
    2756:	89 8f       	std	Y+25, r24	; 0x19
    2758:	9a 8f       	std	Y+26, r25	; 0x1a
    275a:	ab 8f       	std	Y+27, r26	; 0x1b
    275c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275e:	69 8d       	ldd	r22, Y+25	; 0x19
    2760:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2762:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2764:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	4a ef       	ldi	r20, 0xFA	; 250
    276c:	54 e4       	ldi	r21, 0x44	; 68
    276e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	8d 8b       	std	Y+21, r24	; 0x15
    2778:	9e 8b       	std	Y+22, r25	; 0x16
    277a:	af 8b       	std	Y+23, r26	; 0x17
    277c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    277e:	6d 89       	ldd	r22, Y+21	; 0x15
    2780:	7e 89       	ldd	r23, Y+22	; 0x16
    2782:	8f 89       	ldd	r24, Y+23	; 0x17
    2784:	98 8d       	ldd	r25, Y+24	; 0x18
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e8       	ldi	r20, 0x80	; 128
    278c:	5f e3       	ldi	r21, 0x3F	; 63
    278e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2792:	88 23       	and	r24, r24
    2794:	2c f4       	brge	.+10     	; 0x27a0 <LCD_Init+0x256>
		__ticks = 1;
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	9c 8b       	std	Y+20, r25	; 0x14
    279c:	8b 8b       	std	Y+19, r24	; 0x13
    279e:	3f c0       	rjmp	.+126    	; 0x281e <LCD_Init+0x2d4>
	else if (__tmp > 65535)
    27a0:	6d 89       	ldd	r22, Y+21	; 0x15
    27a2:	7e 89       	ldd	r23, Y+22	; 0x16
    27a4:	8f 89       	ldd	r24, Y+23	; 0x17
    27a6:	98 8d       	ldd	r25, Y+24	; 0x18
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	3f ef       	ldi	r19, 0xFF	; 255
    27ac:	4f e7       	ldi	r20, 0x7F	; 127
    27ae:	57 e4       	ldi	r21, 0x47	; 71
    27b0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27b4:	18 16       	cp	r1, r24
    27b6:	4c f5       	brge	.+82     	; 0x280a <LCD_Init+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b8:	69 8d       	ldd	r22, Y+25	; 0x19
    27ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e2       	ldi	r20, 0x20	; 32
    27c6:	51 e4       	ldi	r21, 0x41	; 65
    27c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	bc 01       	movw	r22, r24
    27d2:	cd 01       	movw	r24, r26
    27d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	9c 8b       	std	Y+20, r25	; 0x14
    27de:	8b 8b       	std	Y+19, r24	; 0x13
    27e0:	0f c0       	rjmp	.+30     	; 0x2800 <LCD_Init+0x2b6>
    27e2:	88 ec       	ldi	r24, 0xC8	; 200
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	9a 8b       	std	Y+18, r25	; 0x12
    27e8:	89 8b       	std	Y+17, r24	; 0x11
    27ea:	89 89       	ldd	r24, Y+17	; 0x11
    27ec:	9a 89       	ldd	r25, Y+18	; 0x12
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	f1 f7       	brne	.-4      	; 0x27ee <LCD_Init+0x2a4>
    27f2:	9a 8b       	std	Y+18, r25	; 0x12
    27f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f6:	8b 89       	ldd	r24, Y+19	; 0x13
    27f8:	9c 89       	ldd	r25, Y+20	; 0x14
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	9c 8b       	std	Y+20, r25	; 0x14
    27fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2800:	8b 89       	ldd	r24, Y+19	; 0x13
    2802:	9c 89       	ldd	r25, Y+20	; 0x14
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	69 f7       	brne	.-38     	; 0x27e2 <LCD_Init+0x298>
    2808:	14 c0       	rjmp	.+40     	; 0x2832 <LCD_Init+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280a:	6d 89       	ldd	r22, Y+21	; 0x15
    280c:	7e 89       	ldd	r23, Y+22	; 0x16
    280e:	8f 89       	ldd	r24, Y+23	; 0x17
    2810:	98 8d       	ldd	r25, Y+24	; 0x18
    2812:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	9c 8b       	std	Y+20, r25	; 0x14
    281c:	8b 8b       	std	Y+19, r24	; 0x13
    281e:	8b 89       	ldd	r24, Y+19	; 0x13
    2820:	9c 89       	ldd	r25, Y+20	; 0x14
    2822:	98 8b       	std	Y+16, r25	; 0x10
    2824:	8f 87       	std	Y+15, r24	; 0x0f
    2826:	8f 85       	ldd	r24, Y+15	; 0x0f
    2828:	98 89       	ldd	r25, Y+16	; 0x10
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	f1 f7       	brne	.-4      	; 0x282a <LCD_Init+0x2e0>
    282e:	98 8b       	std	Y+16, r25	; 0x10
    2830:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_WriteCommand(0x01);
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_WriteCommand>
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	a0 e0       	ldi	r26, 0x00	; 0
    283e:	b0 e4       	ldi	r27, 0x40	; 64
    2840:	8b 87       	std	Y+11, r24	; 0x0b
    2842:	9c 87       	std	Y+12, r25	; 0x0c
    2844:	ad 87       	std	Y+13, r26	; 0x0d
    2846:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2848:	6b 85       	ldd	r22, Y+11	; 0x0b
    284a:	7c 85       	ldd	r23, Y+12	; 0x0c
    284c:	8d 85       	ldd	r24, Y+13	; 0x0d
    284e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	4a ef       	ldi	r20, 0xFA	; 250
    2856:	54 e4       	ldi	r21, 0x44	; 68
    2858:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	8f 83       	std	Y+7, r24	; 0x07
    2862:	98 87       	std	Y+8, r25	; 0x08
    2864:	a9 87       	std	Y+9, r26	; 0x09
    2866:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2868:	6f 81       	ldd	r22, Y+7	; 0x07
    286a:	78 85       	ldd	r23, Y+8	; 0x08
    286c:	89 85       	ldd	r24, Y+9	; 0x09
    286e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	40 e8       	ldi	r20, 0x80	; 128
    2876:	5f e3       	ldi	r21, 0x3F	; 63
    2878:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    287c:	88 23       	and	r24, r24
    287e:	2c f4       	brge	.+10     	; 0x288a <LCD_Init+0x340>
		__ticks = 1;
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	9e 83       	std	Y+6, r25	; 0x06
    2886:	8d 83       	std	Y+5, r24	; 0x05
    2888:	3f c0       	rjmp	.+126    	; 0x2908 <LCD_Init+0x3be>
	else if (__tmp > 65535)
    288a:	6f 81       	ldd	r22, Y+7	; 0x07
    288c:	78 85       	ldd	r23, Y+8	; 0x08
    288e:	89 85       	ldd	r24, Y+9	; 0x09
    2890:	9a 85       	ldd	r25, Y+10	; 0x0a
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	3f ef       	ldi	r19, 0xFF	; 255
    2896:	4f e7       	ldi	r20, 0x7F	; 127
    2898:	57 e4       	ldi	r21, 0x47	; 71
    289a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    289e:	18 16       	cp	r1, r24
    28a0:	4c f5       	brge	.+82     	; 0x28f4 <LCD_Init+0x3aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	40 e2       	ldi	r20, 0x20	; 32
    28b0:	51 e4       	ldi	r21, 0x41	; 65
    28b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	bc 01       	movw	r22, r24
    28bc:	cd 01       	movw	r24, r26
    28be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	9e 83       	std	Y+6, r25	; 0x06
    28c8:	8d 83       	std	Y+5, r24	; 0x05
    28ca:	0f c0       	rjmp	.+30     	; 0x28ea <LCD_Init+0x3a0>
    28cc:	88 ec       	ldi	r24, 0xC8	; 200
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	9c 83       	std	Y+4, r25	; 0x04
    28d2:	8b 83       	std	Y+3, r24	; 0x03
    28d4:	8b 81       	ldd	r24, Y+3	; 0x03
    28d6:	9c 81       	ldd	r25, Y+4	; 0x04
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	f1 f7       	brne	.-4      	; 0x28d8 <LCD_Init+0x38e>
    28dc:	9c 83       	std	Y+4, r25	; 0x04
    28de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e0:	8d 81       	ldd	r24, Y+5	; 0x05
    28e2:	9e 81       	ldd	r25, Y+6	; 0x06
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	9e 83       	std	Y+6, r25	; 0x06
    28e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ea:	8d 81       	ldd	r24, Y+5	; 0x05
    28ec:	9e 81       	ldd	r25, Y+6	; 0x06
    28ee:	00 97       	sbiw	r24, 0x00	; 0
    28f0:	69 f7       	brne	.-38     	; 0x28cc <LCD_Init+0x382>
    28f2:	14 c0       	rjmp	.+40     	; 0x291c <LCD_Init+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f4:	6f 81       	ldd	r22, Y+7	; 0x07
    28f6:	78 85       	ldd	r23, Y+8	; 0x08
    28f8:	89 85       	ldd	r24, Y+9	; 0x09
    28fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	9e 83       	std	Y+6, r25	; 0x06
    2906:	8d 83       	std	Y+5, r24	; 0x05
    2908:	8d 81       	ldd	r24, Y+5	; 0x05
    290a:	9e 81       	ldd	r25, Y+6	; 0x06
    290c:	9a 83       	std	Y+2, r25	; 0x02
    290e:	89 83       	std	Y+1, r24	; 0x01
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	9a 81       	ldd	r25, Y+2	; 0x02
    2914:	01 97       	sbiw	r24, 0x01	; 1
    2916:	f1 f7       	brne	.-4      	; 0x2914 <LCD_Init+0x3ca>
    2918:	9a 83       	std	Y+2, r25	; 0x02
    291a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_WriteCommand(0x06);
    291c:	86 e0       	ldi	r24, 0x06	; 6
    291e:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_WriteCommand>
}
    2922:	e8 96       	adiw	r28, 0x38	; 56
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	f8 94       	cli
    2928:	de bf       	out	0x3e, r29	; 62
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	cd bf       	out	0x3d, r28	; 61
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <LCD_WriteCommand>:

void LCD_WriteCommand(u8 Command)
{
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	6d 97       	sbiw	r28, 0x1d	; 29
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Rs = 0*/
	DIO_SetPinValue(RS,DIO_LOW);
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	60 e0       	ldi	r22, 0x00	; 0
    294e:	40 e0       	ldi	r20, 0x00	; 0
    2950:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	/* Rw = 0*/

	DIO_SetPortValue(LCD_PORT,Command);
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2958:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_SetPortValue>
	/*Set Enable */
	DIO_SetPinValue(EN,DIO_HIGH); //EN
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	61 e0       	ldi	r22, 0x01	; 1
    2960:	41 e0       	ldi	r20, 0x01	; 1
    2962:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	a0 e8       	ldi	r26, 0x80	; 128
    296c:	bf e3       	ldi	r27, 0x3F	; 63
    296e:	89 8f       	std	Y+25, r24	; 0x19
    2970:	9a 8f       	std	Y+26, r25	; 0x1a
    2972:	ab 8f       	std	Y+27, r26	; 0x1b
    2974:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2976:	69 8d       	ldd	r22, Y+25	; 0x19
    2978:	7a 8d       	ldd	r23, Y+26	; 0x1a
    297a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    297c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	4a ef       	ldi	r20, 0xFA	; 250
    2984:	54 e4       	ldi	r21, 0x44	; 68
    2986:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	8d 8b       	std	Y+21, r24	; 0x15
    2990:	9e 8b       	std	Y+22, r25	; 0x16
    2992:	af 8b       	std	Y+23, r26	; 0x17
    2994:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2996:	6d 89       	ldd	r22, Y+21	; 0x15
    2998:	7e 89       	ldd	r23, Y+22	; 0x16
    299a:	8f 89       	ldd	r24, Y+23	; 0x17
    299c:	98 8d       	ldd	r25, Y+24	; 0x18
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	40 e8       	ldi	r20, 0x80	; 128
    29a4:	5f e3       	ldi	r21, 0x3F	; 63
    29a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29aa:	88 23       	and	r24, r24
    29ac:	2c f4       	brge	.+10     	; 0x29b8 <LCD_WriteCommand+0x84>
		__ticks = 1;
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	9c 8b       	std	Y+20, r25	; 0x14
    29b4:	8b 8b       	std	Y+19, r24	; 0x13
    29b6:	3f c0       	rjmp	.+126    	; 0x2a36 <LCD_WriteCommand+0x102>
	else if (__tmp > 65535)
    29b8:	6d 89       	ldd	r22, Y+21	; 0x15
    29ba:	7e 89       	ldd	r23, Y+22	; 0x16
    29bc:	8f 89       	ldd	r24, Y+23	; 0x17
    29be:	98 8d       	ldd	r25, Y+24	; 0x18
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	3f ef       	ldi	r19, 0xFF	; 255
    29c4:	4f e7       	ldi	r20, 0x7F	; 127
    29c6:	57 e4       	ldi	r21, 0x47	; 71
    29c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29cc:	18 16       	cp	r1, r24
    29ce:	4c f5       	brge	.+82     	; 0x2a22 <LCD_WriteCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d0:	69 8d       	ldd	r22, Y+25	; 0x19
    29d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	40 e2       	ldi	r20, 0x20	; 32
    29de:	51 e4       	ldi	r21, 0x41	; 65
    29e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	bc 01       	movw	r22, r24
    29ea:	cd 01       	movw	r24, r26
    29ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	9c 8b       	std	Y+20, r25	; 0x14
    29f6:	8b 8b       	std	Y+19, r24	; 0x13
    29f8:	0f c0       	rjmp	.+30     	; 0x2a18 <LCD_WriteCommand+0xe4>
    29fa:	88 ec       	ldi	r24, 0xC8	; 200
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	9a 8b       	std	Y+18, r25	; 0x12
    2a00:	89 8b       	std	Y+17, r24	; 0x11
    2a02:	89 89       	ldd	r24, Y+17	; 0x11
    2a04:	9a 89       	ldd	r25, Y+18	; 0x12
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	f1 f7       	brne	.-4      	; 0x2a06 <LCD_WriteCommand+0xd2>
    2a0a:	9a 8b       	std	Y+18, r25	; 0x12
    2a0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a10:	9c 89       	ldd	r25, Y+20	; 0x14
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	9c 8b       	std	Y+20, r25	; 0x14
    2a16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a18:	8b 89       	ldd	r24, Y+19	; 0x13
    2a1a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a1c:	00 97       	sbiw	r24, 0x00	; 0
    2a1e:	69 f7       	brne	.-38     	; 0x29fa <LCD_WriteCommand+0xc6>
    2a20:	14 c0       	rjmp	.+40     	; 0x2a4a <LCD_WriteCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a22:	6d 89       	ldd	r22, Y+21	; 0x15
    2a24:	7e 89       	ldd	r23, Y+22	; 0x16
    2a26:	8f 89       	ldd	r24, Y+23	; 0x17
    2a28:	98 8d       	ldd	r25, Y+24	; 0x18
    2a2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	9c 8b       	std	Y+20, r25	; 0x14
    2a34:	8b 8b       	std	Y+19, r24	; 0x13
    2a36:	8b 89       	ldd	r24, Y+19	; 0x13
    2a38:	9c 89       	ldd	r25, Y+20	; 0x14
    2a3a:	98 8b       	std	Y+16, r25	; 0x10
    2a3c:	8f 87       	std	Y+15, r24	; 0x0f
    2a3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a40:	98 89       	ldd	r25, Y+16	; 0x10
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	f1 f7       	brne	.-4      	; 0x2a42 <LCD_WriteCommand+0x10e>
    2a46:	98 8b       	std	Y+16, r25	; 0x10
    2a48:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_SetPinValue(EN,DIO_LOW);
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	61 e0       	ldi	r22, 0x01	; 1
    2a4e:	40 e0       	ldi	r20, 0x00	; 0
    2a50:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	a0 ea       	ldi	r26, 0xA0	; 160
    2a5a:	b0 e4       	ldi	r27, 0x40	; 64
    2a5c:	8b 87       	std	Y+11, r24	; 0x0b
    2a5e:	9c 87       	std	Y+12, r25	; 0x0c
    2a60:	ad 87       	std	Y+13, r26	; 0x0d
    2a62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	4a ef       	ldi	r20, 0xFA	; 250
    2a72:	54 e4       	ldi	r21, 0x44	; 68
    2a74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	8f 83       	std	Y+7, r24	; 0x07
    2a7e:	98 87       	std	Y+8, r25	; 0x08
    2a80:	a9 87       	std	Y+9, r26	; 0x09
    2a82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a84:	6f 81       	ldd	r22, Y+7	; 0x07
    2a86:	78 85       	ldd	r23, Y+8	; 0x08
    2a88:	89 85       	ldd	r24, Y+9	; 0x09
    2a8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	40 e8       	ldi	r20, 0x80	; 128
    2a92:	5f e3       	ldi	r21, 0x3F	; 63
    2a94:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a98:	88 23       	and	r24, r24
    2a9a:	2c f4       	brge	.+10     	; 0x2aa6 <LCD_WriteCommand+0x172>
		__ticks = 1;
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	9e 83       	std	Y+6, r25	; 0x06
    2aa2:	8d 83       	std	Y+5, r24	; 0x05
    2aa4:	3f c0       	rjmp	.+126    	; 0x2b24 <LCD_WriteCommand+0x1f0>
	else if (__tmp > 65535)
    2aa6:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa8:	78 85       	ldd	r23, Y+8	; 0x08
    2aaa:	89 85       	ldd	r24, Y+9	; 0x09
    2aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	3f ef       	ldi	r19, 0xFF	; 255
    2ab2:	4f e7       	ldi	r20, 0x7F	; 127
    2ab4:	57 e4       	ldi	r21, 0x47	; 71
    2ab6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2aba:	18 16       	cp	r1, r24
    2abc:	4c f5       	brge	.+82     	; 0x2b10 <LCD_WriteCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2abe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ac0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	40 e2       	ldi	r20, 0x20	; 32
    2acc:	51 e4       	ldi	r21, 0x41	; 65
    2ace:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	bc 01       	movw	r22, r24
    2ad8:	cd 01       	movw	r24, r26
    2ada:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	9e 83       	std	Y+6, r25	; 0x06
    2ae4:	8d 83       	std	Y+5, r24	; 0x05
    2ae6:	0f c0       	rjmp	.+30     	; 0x2b06 <LCD_WriteCommand+0x1d2>
    2ae8:	88 ec       	ldi	r24, 0xC8	; 200
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	9c 83       	std	Y+4, r25	; 0x04
    2aee:	8b 83       	std	Y+3, r24	; 0x03
    2af0:	8b 81       	ldd	r24, Y+3	; 0x03
    2af2:	9c 81       	ldd	r25, Y+4	; 0x04
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	f1 f7       	brne	.-4      	; 0x2af4 <LCD_WriteCommand+0x1c0>
    2af8:	9c 83       	std	Y+4, r25	; 0x04
    2afa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2afc:	8d 81       	ldd	r24, Y+5	; 0x05
    2afe:	9e 81       	ldd	r25, Y+6	; 0x06
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	9e 83       	std	Y+6, r25	; 0x06
    2b04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b06:	8d 81       	ldd	r24, Y+5	; 0x05
    2b08:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0a:	00 97       	sbiw	r24, 0x00	; 0
    2b0c:	69 f7       	brne	.-38     	; 0x2ae8 <LCD_WriteCommand+0x1b4>
    2b0e:	14 c0       	rjmp	.+40     	; 0x2b38 <LCD_WriteCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b10:	6f 81       	ldd	r22, Y+7	; 0x07
    2b12:	78 85       	ldd	r23, Y+8	; 0x08
    2b14:	89 85       	ldd	r24, Y+9	; 0x09
    2b16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	9e 83       	std	Y+6, r25	; 0x06
    2b22:	8d 83       	std	Y+5, r24	; 0x05
    2b24:	8d 81       	ldd	r24, Y+5	; 0x05
    2b26:	9e 81       	ldd	r25, Y+6	; 0x06
    2b28:	9a 83       	std	Y+2, r25	; 0x02
    2b2a:	89 83       	std	Y+1, r24	; 0x01
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b30:	01 97       	sbiw	r24, 0x01	; 1
    2b32:	f1 f7       	brne	.-4      	; 0x2b30 <LCD_WriteCommand+0x1fc>
    2b34:	9a 83       	std	Y+2, r25	; 0x02
    2b36:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2b38:	6d 96       	adiw	r28, 0x1d	; 29
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	f8 94       	cli
    2b3e:	de bf       	out	0x3e, r29	; 62
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	cd bf       	out	0x3d, r28	; 61
    2b44:	cf 91       	pop	r28
    2b46:	df 91       	pop	r29
    2b48:	08 95       	ret

00002b4a <LCD_WriteData>:
void LCD_WriteData(u8 Data)
{
    2b4a:	df 93       	push	r29
    2b4c:	cf 93       	push	r28
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
    2b52:	6d 97       	sbiw	r28, 0x1d	; 29
    2b54:	0f b6       	in	r0, 0x3f	; 63
    2b56:	f8 94       	cli
    2b58:	de bf       	out	0x3e, r29	; 62
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	cd bf       	out	0x3d, r28	; 61
    2b5e:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Rs = 0*/
	DIO_SetPinValue(RS,DIO_HIGH);
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	60 e0       	ldi	r22, 0x00	; 0
    2b64:	41 e0       	ldi	r20, 0x01	; 1
    2b66:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	/* Rw = 0*/

	DIO_SetPortValue(LCD_PORT,Data);
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2b6e:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_SetPortValue>
	/*Set Enable */
	DIO_SetPinValue(EN,DIO_HIGH); //EN
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	61 e0       	ldi	r22, 0x01	; 1
    2b76:	41 e0       	ldi	r20, 0x01	; 1
    2b78:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	a0 e8       	ldi	r26, 0x80	; 128
    2b82:	bf e3       	ldi	r27, 0x3F	; 63
    2b84:	89 8f       	std	Y+25, r24	; 0x19
    2b86:	9a 8f       	std	Y+26, r25	; 0x1a
    2b88:	ab 8f       	std	Y+27, r26	; 0x1b
    2b8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	4a ef       	ldi	r20, 0xFA	; 250
    2b9a:	54 e4       	ldi	r21, 0x44	; 68
    2b9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	8d 8b       	std	Y+21, r24	; 0x15
    2ba6:	9e 8b       	std	Y+22, r25	; 0x16
    2ba8:	af 8b       	std	Y+23, r26	; 0x17
    2baa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bac:	6d 89       	ldd	r22, Y+21	; 0x15
    2bae:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e8       	ldi	r20, 0x80	; 128
    2bba:	5f e3       	ldi	r21, 0x3F	; 63
    2bbc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2bc0:	88 23       	and	r24, r24
    2bc2:	2c f4       	brge	.+10     	; 0x2bce <LCD_WriteData+0x84>
		__ticks = 1;
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	9c 8b       	std	Y+20, r25	; 0x14
    2bca:	8b 8b       	std	Y+19, r24	; 0x13
    2bcc:	3f c0       	rjmp	.+126    	; 0x2c4c <LCD_WriteData+0x102>
	else if (__tmp > 65535)
    2bce:	6d 89       	ldd	r22, Y+21	; 0x15
    2bd0:	7e 89       	ldd	r23, Y+22	; 0x16
    2bd2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bd4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	3f ef       	ldi	r19, 0xFF	; 255
    2bda:	4f e7       	ldi	r20, 0x7F	; 127
    2bdc:	57 e4       	ldi	r21, 0x47	; 71
    2bde:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2be2:	18 16       	cp	r1, r24
    2be4:	4c f5       	brge	.+82     	; 0x2c38 <LCD_WriteData+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be6:	69 8d       	ldd	r22, Y+25	; 0x19
    2be8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e2       	ldi	r20, 0x20	; 32
    2bf4:	51 e4       	ldi	r21, 0x41	; 65
    2bf6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	bc 01       	movw	r22, r24
    2c00:	cd 01       	movw	r24, r26
    2c02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	9c 8b       	std	Y+20, r25	; 0x14
    2c0c:	8b 8b       	std	Y+19, r24	; 0x13
    2c0e:	0f c0       	rjmp	.+30     	; 0x2c2e <LCD_WriteData+0xe4>
    2c10:	88 ec       	ldi	r24, 0xC8	; 200
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	9a 8b       	std	Y+18, r25	; 0x12
    2c16:	89 8b       	std	Y+17, r24	; 0x11
    2c18:	89 89       	ldd	r24, Y+17	; 0x11
    2c1a:	9a 89       	ldd	r25, Y+18	; 0x12
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	f1 f7       	brne	.-4      	; 0x2c1c <LCD_WriteData+0xd2>
    2c20:	9a 8b       	std	Y+18, r25	; 0x12
    2c22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c24:	8b 89       	ldd	r24, Y+19	; 0x13
    2c26:	9c 89       	ldd	r25, Y+20	; 0x14
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	9c 8b       	std	Y+20, r25	; 0x14
    2c2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c30:	9c 89       	ldd	r25, Y+20	; 0x14
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	69 f7       	brne	.-38     	; 0x2c10 <LCD_WriteData+0xc6>
    2c36:	14 c0       	rjmp	.+40     	; 0x2c60 <LCD_WriteData+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c38:	6d 89       	ldd	r22, Y+21	; 0x15
    2c3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	9c 8b       	std	Y+20, r25	; 0x14
    2c4a:	8b 8b       	std	Y+19, r24	; 0x13
    2c4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c50:	98 8b       	std	Y+16, r25	; 0x10
    2c52:	8f 87       	std	Y+15, r24	; 0x0f
    2c54:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c56:	98 89       	ldd	r25, Y+16	; 0x10
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	f1 f7       	brne	.-4      	; 0x2c58 <LCD_WriteData+0x10e>
    2c5c:	98 8b       	std	Y+16, r25	; 0x10
    2c5e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_SetPinValue(EN,DIO_LOW);
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	61 e0       	ldi	r22, 0x01	; 1
    2c64:	40 e0       	ldi	r20, 0x00	; 0
    2c66:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	a0 ea       	ldi	r26, 0xA0	; 160
    2c70:	b0 e4       	ldi	r27, 0x40	; 64
    2c72:	8b 87       	std	Y+11, r24	; 0x0b
    2c74:	9c 87       	std	Y+12, r25	; 0x0c
    2c76:	ad 87       	std	Y+13, r26	; 0x0d
    2c78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	4a ef       	ldi	r20, 0xFA	; 250
    2c88:	54 e4       	ldi	r21, 0x44	; 68
    2c8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	8f 83       	std	Y+7, r24	; 0x07
    2c94:	98 87       	std	Y+8, r25	; 0x08
    2c96:	a9 87       	std	Y+9, r26	; 0x09
    2c98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c9c:	78 85       	ldd	r23, Y+8	; 0x08
    2c9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	40 e8       	ldi	r20, 0x80	; 128
    2ca8:	5f e3       	ldi	r21, 0x3F	; 63
    2caa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2cae:	88 23       	and	r24, r24
    2cb0:	2c f4       	brge	.+10     	; 0x2cbc <LCD_WriteData+0x172>
		__ticks = 1;
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	9e 83       	std	Y+6, r25	; 0x06
    2cb8:	8d 83       	std	Y+5, r24	; 0x05
    2cba:	3f c0       	rjmp	.+126    	; 0x2d3a <LCD_WriteData+0x1f0>
	else if (__tmp > 65535)
    2cbc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cbe:	78 85       	ldd	r23, Y+8	; 0x08
    2cc0:	89 85       	ldd	r24, Y+9	; 0x09
    2cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	3f ef       	ldi	r19, 0xFF	; 255
    2cc8:	4f e7       	ldi	r20, 0x7F	; 127
    2cca:	57 e4       	ldi	r21, 0x47	; 71
    2ccc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2cd0:	18 16       	cp	r1, r24
    2cd2:	4c f5       	brge	.+82     	; 0x2d26 <LCD_WriteData+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cda:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	40 e2       	ldi	r20, 0x20	; 32
    2ce2:	51 e4       	ldi	r21, 0x41	; 65
    2ce4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	bc 01       	movw	r22, r24
    2cee:	cd 01       	movw	r24, r26
    2cf0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	9e 83       	std	Y+6, r25	; 0x06
    2cfa:	8d 83       	std	Y+5, r24	; 0x05
    2cfc:	0f c0       	rjmp	.+30     	; 0x2d1c <LCD_WriteData+0x1d2>
    2cfe:	88 ec       	ldi	r24, 0xC8	; 200
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	9c 83       	std	Y+4, r25	; 0x04
    2d04:	8b 83       	std	Y+3, r24	; 0x03
    2d06:	8b 81       	ldd	r24, Y+3	; 0x03
    2d08:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	f1 f7       	brne	.-4      	; 0x2d0a <LCD_WriteData+0x1c0>
    2d0e:	9c 83       	std	Y+4, r25	; 0x04
    2d10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d12:	8d 81       	ldd	r24, Y+5	; 0x05
    2d14:	9e 81       	ldd	r25, Y+6	; 0x06
    2d16:	01 97       	sbiw	r24, 0x01	; 1
    2d18:	9e 83       	std	Y+6, r25	; 0x06
    2d1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d20:	00 97       	sbiw	r24, 0x00	; 0
    2d22:	69 f7       	brne	.-38     	; 0x2cfe <LCD_WriteData+0x1b4>
    2d24:	14 c0       	rjmp	.+40     	; 0x2d4e <LCD_WriteData+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d26:	6f 81       	ldd	r22, Y+7	; 0x07
    2d28:	78 85       	ldd	r23, Y+8	; 0x08
    2d2a:	89 85       	ldd	r24, Y+9	; 0x09
    2d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	9e 83       	std	Y+6, r25	; 0x06
    2d38:	8d 83       	std	Y+5, r24	; 0x05
    2d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3e:	9a 83       	std	Y+2, r25	; 0x02
    2d40:	89 83       	std	Y+1, r24	; 0x01
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
    2d44:	9a 81       	ldd	r25, Y+2	; 0x02
    2d46:	01 97       	sbiw	r24, 0x01	; 1
    2d48:	f1 f7       	brne	.-4      	; 0x2d46 <LCD_WriteData+0x1fc>
    2d4a:	9a 83       	std	Y+2, r25	; 0x02
    2d4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2d4e:	6d 96       	adiw	r28, 0x1d	; 29
    2d50:	0f b6       	in	r0, 0x3f	; 63
    2d52:	f8 94       	cli
    2d54:	de bf       	out	0x3e, r29	; 62
    2d56:	0f be       	out	0x3f, r0	; 63
    2d58:	cd bf       	out	0x3d, r28	; 61
    2d5a:	cf 91       	pop	r28
    2d5c:	df 91       	pop	r29
    2d5e:	08 95       	ret

00002d60 <LCD_WriteString>:




void LCD_WriteString(char *Ptr)
{
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	00 d0       	rcall	.+0      	; 0x2d66 <LCD_WriteString+0x6>
    2d66:	0f 92       	push	r0
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	9b 83       	std	Y+3, r25	; 0x03
    2d6e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2d70:	19 82       	std	Y+1, r1	; 0x01
    2d72:	0e c0       	rjmp	.+28     	; 0x2d90 <LCD_WriteString+0x30>
	while(Ptr[i] != '\0')
	{
		LCD_WriteData(Ptr[i]);
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	28 2f       	mov	r18, r24
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7e:	fc 01       	movw	r30, r24
    2d80:	e2 0f       	add	r30, r18
    2d82:	f3 1f       	adc	r31, r19
    2d84:	80 81       	ld	r24, Z
    2d86:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <LCD_WriteData>
		i++;
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	8f 5f       	subi	r24, 0xFF	; 255
    2d8e:	89 83       	std	Y+1, r24	; 0x01


void LCD_WriteString(char *Ptr)
{
	u8 i = 0;
	while(Ptr[i] != '\0')
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	28 2f       	mov	r18, r24
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	8a 81       	ldd	r24, Y+2	; 0x02
    2d98:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	e2 0f       	add	r30, r18
    2d9e:	f3 1f       	adc	r31, r19
    2da0:	80 81       	ld	r24, Z
    2da2:	88 23       	and	r24, r24
    2da4:	39 f7       	brne	.-50     	; 0x2d74 <LCD_WriteString+0x14>
	{
		LCD_WriteData(Ptr[i]);
		i++;
	}
}
    2da6:	0f 90       	pop	r0
    2da8:	0f 90       	pop	r0
    2daa:	0f 90       	pop	r0
    2dac:	cf 91       	pop	r28
    2dae:	df 91       	pop	r29
    2db0:	08 95       	ret

00002db2 <LCD_GoToXY>:




void LCD_GoToXY(u8 X_Pos , u8 Y_Pos)
{
    2db2:	df 93       	push	r29
    2db4:	cf 93       	push	r28
    2db6:	00 d0       	rcall	.+0      	; 0x2db8 <LCD_GoToXY+0x6>
    2db8:	0f 92       	push	r0
    2dba:	cd b7       	in	r28, 0x3d	; 61
    2dbc:	de b7       	in	r29, 0x3e	; 62
    2dbe:	8a 83       	std	Y+2, r24	; 0x02
    2dc0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Adress;

	if (X_Pos==0)
    2dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc4:	88 23       	and	r24, r24
    2dc6:	19 f4       	brne	.+6      	; 0x2dce <LCD_GoToXY+0x1c>
	{
		Local_Adress=Y_Pos;
    2dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dca:	89 83       	std	Y+1, r24	; 0x01
    2dcc:	06 c0       	rjmp	.+12     	; 0x2dda <LCD_GoToXY+0x28>

	}

	else if (X_Pos==1)
    2dce:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd0:	81 30       	cpi	r24, 0x01	; 1
    2dd2:	19 f4       	brne	.+6      	; 0x2dda <LCD_GoToXY+0x28>
	{
		Local_Adress = Y_Pos+ 0x40 ;
    2dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd6:	80 5c       	subi	r24, 0xC0	; 192
    2dd8:	89 83       	std	Y+1, r24	; 0x01
	}

	/* set the calculated address into DDRAM */
	LCD_WriteCommand(Local_Adress+128);
    2dda:	89 81       	ldd	r24, Y+1	; 0x01
    2ddc:	80 58       	subi	r24, 0x80	; 128
    2dde:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_WriteCommand>


}
    2de2:	0f 90       	pop	r0
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	cf 91       	pop	r28
    2dea:	df 91       	pop	r29
    2dec:	08 95       	ret

00002dee <LCD_voidDisplayIntegar>:


void LCD_voidDisplayIntegar(u32 COPY_u32Number)
{
    2dee:	df 93       	push	r29
    2df0:	cf 93       	push	r28
    2df2:	cd b7       	in	r28, 0x3d	; 61
    2df4:	de b7       	in	r29, 0x3e	; 62
    2df6:	64 97       	sbiw	r28, 0x14	; 20
    2df8:	0f b6       	in	r0, 0x3f	; 63
    2dfa:	f8 94       	cli
    2dfc:	de bf       	out	0x3e, r29	; 62
    2dfe:	0f be       	out	0x3f, r0	; 63
    2e00:	cd bf       	out	0x3d, r28	; 61
    2e02:	69 8b       	std	Y+17, r22	; 0x11
    2e04:	7a 8b       	std	Y+18, r23	; 0x12
    2e06:	8b 8b       	std	Y+19, r24	; 0x13
    2e08:	9c 8b       	std	Y+20, r25	; 0x14
	u8 LOCAL_u8Num[10]={0};
    2e0a:	8a e0       	ldi	r24, 0x0A	; 10
    2e0c:	fe 01       	movw	r30, r28
    2e0e:	37 96       	adiw	r30, 0x07	; 7
    2e10:	df 01       	movw	r26, r30
    2e12:	98 2f       	mov	r25, r24
    2e14:	1d 92       	st	X+, r1
    2e16:	9a 95       	dec	r25
    2e18:	e9 f7       	brne	.-6      	; 0x2e14 <LCD_voidDisplayIntegar+0x26>
	s16 i=0;
    2e1a:	1e 82       	std	Y+6, r1	; 0x06
    2e1c:	1d 82       	std	Y+5, r1	; 0x05
	u32 LOCAL_u32Remainder;
	if(COPY_u32Number==0)
    2e1e:	89 89       	ldd	r24, Y+17	; 0x11
    2e20:	9a 89       	ldd	r25, Y+18	; 0x12
    2e22:	ab 89       	ldd	r26, Y+19	; 0x13
    2e24:	bc 89       	ldd	r27, Y+20	; 0x14
    2e26:	00 97       	sbiw	r24, 0x00	; 0
    2e28:	a1 05       	cpc	r26, r1
    2e2a:	b1 05       	cpc	r27, r1
    2e2c:	19 f4       	brne	.+6      	; 0x2e34 <LCD_voidDisplayIntegar+0x46>
	{
		LCD_WriteData('0');
    2e2e:	80 e3       	ldi	r24, 0x30	; 48
    2e30:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <LCD_WriteData>
	}

	if(COPY_u32Number>0)
    2e34:	89 89       	ldd	r24, Y+17	; 0x11
    2e36:	9a 89       	ldd	r25, Y+18	; 0x12
    2e38:	ab 89       	ldd	r26, Y+19	; 0x13
    2e3a:	bc 89       	ldd	r27, Y+20	; 0x14
    2e3c:	00 97       	sbiw	r24, 0x00	; 0
    2e3e:	a1 05       	cpc	r26, r1
    2e40:	b1 05       	cpc	r27, r1
    2e42:	09 f4       	brne	.+2      	; 0x2e46 <LCD_voidDisplayIntegar+0x58>
    2e44:	55 c0       	rjmp	.+170    	; 0x2ef0 <LCD_voidDisplayIntegar+0x102>
    2e46:	32 c0       	rjmp	.+100    	; 0x2eac <LCD_voidDisplayIntegar+0xbe>
	{
		while(COPY_u32Number!=0)
		{
			LOCAL_u32Remainder=COPY_u32Number%10;
    2e48:	89 89       	ldd	r24, Y+17	; 0x11
    2e4a:	9a 89       	ldd	r25, Y+18	; 0x12
    2e4c:	ab 89       	ldd	r26, Y+19	; 0x13
    2e4e:	bc 89       	ldd	r27, Y+20	; 0x14
    2e50:	2a e0       	ldi	r18, 0x0A	; 10
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	40 e0       	ldi	r20, 0x00	; 0
    2e56:	50 e0       	ldi	r21, 0x00	; 0
    2e58:	bc 01       	movw	r22, r24
    2e5a:	cd 01       	movw	r24, r26
    2e5c:	0e 94 c6 18 	call	0x318c	; 0x318c <__udivmodsi4>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	89 83       	std	Y+1, r24	; 0x01
    2e66:	9a 83       	std	Y+2, r25	; 0x02
    2e68:	ab 83       	std	Y+3, r26	; 0x03
    2e6a:	bc 83       	std	Y+4, r27	; 0x04
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
    2e6c:	2d 81       	ldd	r18, Y+5	; 0x05
    2e6e:	3e 81       	ldd	r19, Y+6	; 0x06
    2e70:	49 81       	ldd	r20, Y+1	; 0x01
    2e72:	ce 01       	movw	r24, r28
    2e74:	07 96       	adiw	r24, 0x07	; 7
    2e76:	fc 01       	movw	r30, r24
    2e78:	e2 0f       	add	r30, r18
    2e7a:	f3 1f       	adc	r31, r19
    2e7c:	40 83       	st	Z, r20
			COPY_u32Number=COPY_u32Number/10;
    2e7e:	89 89       	ldd	r24, Y+17	; 0x11
    2e80:	9a 89       	ldd	r25, Y+18	; 0x12
    2e82:	ab 89       	ldd	r26, Y+19	; 0x13
    2e84:	bc 89       	ldd	r27, Y+20	; 0x14
    2e86:	2a e0       	ldi	r18, 0x0A	; 10
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	40 e0       	ldi	r20, 0x00	; 0
    2e8c:	50 e0       	ldi	r21, 0x00	; 0
    2e8e:	bc 01       	movw	r22, r24
    2e90:	cd 01       	movw	r24, r26
    2e92:	0e 94 c6 18 	call	0x318c	; 0x318c <__udivmodsi4>
    2e96:	da 01       	movw	r26, r20
    2e98:	c9 01       	movw	r24, r18
    2e9a:	89 8b       	std	Y+17, r24	; 0x11
    2e9c:	9a 8b       	std	Y+18, r25	; 0x12
    2e9e:	ab 8b       	std	Y+19, r26	; 0x13
    2ea0:	bc 8b       	std	Y+20, r27	; 0x14
			i++;
    2ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea6:	01 96       	adiw	r24, 0x01	; 1
    2ea8:	9e 83       	std	Y+6, r25	; 0x06
    2eaa:	8d 83       	std	Y+5, r24	; 0x05
		LCD_WriteData('0');
	}

	if(COPY_u32Number>0)
	{
		while(COPY_u32Number!=0)
    2eac:	89 89       	ldd	r24, Y+17	; 0x11
    2eae:	9a 89       	ldd	r25, Y+18	; 0x12
    2eb0:	ab 89       	ldd	r26, Y+19	; 0x13
    2eb2:	bc 89       	ldd	r27, Y+20	; 0x14
    2eb4:	00 97       	sbiw	r24, 0x00	; 0
    2eb6:	a1 05       	cpc	r26, r1
    2eb8:	b1 05       	cpc	r27, r1
    2eba:	31 f6       	brne	.-116    	; 0x2e48 <LCD_voidDisplayIntegar+0x5a>
			LOCAL_u32Remainder=COPY_u32Number%10;
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
			COPY_u32Number=COPY_u32Number/10;
			i++;
		}
        i--;
    2ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec0:	01 97       	sbiw	r24, 0x01	; 1
    2ec2:	9e 83       	std	Y+6, r25	; 0x06
    2ec4:	8d 83       	std	Y+5, r24	; 0x05
    2ec6:	10 c0       	rjmp	.+32     	; 0x2ee8 <LCD_voidDisplayIntegar+0xfa>
		while(i>=0)
		{
			LCD_WriteData(LOCAL_u8Num[i]+48);
    2ec8:	2d 81       	ldd	r18, Y+5	; 0x05
    2eca:	3e 81       	ldd	r19, Y+6	; 0x06
    2ecc:	ce 01       	movw	r24, r28
    2ece:	07 96       	adiw	r24, 0x07	; 7
    2ed0:	fc 01       	movw	r30, r24
    2ed2:	e2 0f       	add	r30, r18
    2ed4:	f3 1f       	adc	r31, r19
    2ed6:	80 81       	ld	r24, Z
    2ed8:	80 5d       	subi	r24, 0xD0	; 208
    2eda:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <LCD_WriteData>
			i--;
    2ede:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee2:	01 97       	sbiw	r24, 0x01	; 1
    2ee4:	9e 83       	std	Y+6, r25	; 0x06
    2ee6:	8d 83       	std	Y+5, r24	; 0x05
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
			COPY_u32Number=COPY_u32Number/10;
			i++;
		}
        i--;
		while(i>=0)
    2ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eea:	9e 81       	ldd	r25, Y+6	; 0x06
    2eec:	99 23       	and	r25, r25
    2eee:	64 f7       	brge	.-40     	; 0x2ec8 <LCD_voidDisplayIntegar+0xda>
		{
			LCD_WriteData(LOCAL_u8Num[i]+48);
			i--;
		}
	}
}
    2ef0:	64 96       	adiw	r28, 0x14	; 20
    2ef2:	0f b6       	in	r0, 0x3f	; 63
    2ef4:	f8 94       	cli
    2ef6:	de bf       	out	0x3e, r29	; 62
    2ef8:	0f be       	out	0x3f, r0	; 63
    2efa:	cd bf       	out	0x3d, r28	; 61
    2efc:	cf 91       	pop	r28
    2efe:	df 91       	pop	r29
    2f00:	08 95       	ret

00002f02 <LCD_voidDisplaySpecialChar>:


void LCD_voidDisplaySpecialChar(u8* Ptr_u8PtrChar,u8 CGRam_index,u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    2f02:	df 93       	push	r29
    2f04:	cf 93       	push	r28
    2f06:	cd b7       	in	r28, 0x3d	; 61
    2f08:	de b7       	in	r29, 0x3e	; 62
    2f0a:	27 97       	sbiw	r28, 0x07	; 7
    2f0c:	0f b6       	in	r0, 0x3f	; 63
    2f0e:	f8 94       	cli
    2f10:	de bf       	out	0x3e, r29	; 62
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	cd bf       	out	0x3d, r28	; 61
    2f16:	9c 83       	std	Y+4, r25	; 0x04
    2f18:	8b 83       	std	Y+3, r24	; 0x03
    2f1a:	6d 83       	std	Y+5, r22	; 0x05
    2f1c:	4e 83       	std	Y+6, r20	; 0x06
    2f1e:	2f 83       	std	Y+7, r18	; 0x07
	LCD_GoToXY( Copy_u8RowNum, Copy_u8ColNum);
    2f20:	8e 81       	ldd	r24, Y+6	; 0x06
    2f22:	6f 81       	ldd	r22, Y+7	; 0x07
    2f24:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <LCD_GoToXY>
	LCD_WriteData(CGRam_index);
    2f28:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2a:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <LCD_WriteData>
	u8 Local_u8address;
	u8 Local_u8Index;
	if (CGRam_index < 8)
    2f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f30:	88 30       	cpi	r24, 0x08	; 8
    2f32:	18 f5       	brcc	.+70     	; 0x2f7a <LCD_voidDisplaySpecialChar+0x78>
	{
		Local_u8address= CGRam_index * 8;
    2f34:	8d 81       	ldd	r24, Y+5	; 0x05
    2f36:	88 2f       	mov	r24, r24
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	88 0f       	add	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	88 0f       	add	r24, r24
    2f40:	99 1f       	adc	r25, r25
    2f42:	88 0f       	add	r24, r24
    2f44:	99 1f       	adc	r25, r25
    2f46:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8address=SET_BIT(Local_u8address,6);
    2f48:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4a:	80 64       	ori	r24, 0x40	; 64
    2f4c:	8a 83       	std	Y+2, r24	; 0x02
		LCD_WriteCommand(Local_u8address);
    2f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f50:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_WriteCommand>
		for(Local_u8Index = 0;Local_u8Index < 8;Local_u8Index++)
    2f54:	19 82       	std	Y+1, r1	; 0x01
    2f56:	0e c0       	rjmp	.+28     	; 0x2f74 <LCD_voidDisplaySpecialChar+0x72>
		{
			LCD_WriteData(Ptr_u8PtrChar[Local_u8Index]);
    2f58:	89 81       	ldd	r24, Y+1	; 0x01
    2f5a:	28 2f       	mov	r18, r24
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f60:	9c 81       	ldd	r25, Y+4	; 0x04
    2f62:	fc 01       	movw	r30, r24
    2f64:	e2 0f       	add	r30, r18
    2f66:	f3 1f       	adc	r31, r19
    2f68:	80 81       	ld	r24, Z
    2f6a:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <LCD_WriteData>
	if (CGRam_index < 8)
	{
		Local_u8address= CGRam_index * 8;
		Local_u8address=SET_BIT(Local_u8address,6);
		LCD_WriteCommand(Local_u8address);
		for(Local_u8Index = 0;Local_u8Index < 8;Local_u8Index++)
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	8f 5f       	subi	r24, 0xFF	; 255
    2f72:	89 83       	std	Y+1, r24	; 0x01
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	88 30       	cpi	r24, 0x08	; 8
    2f78:	78 f3       	brcs	.-34     	; 0x2f58 <LCD_voidDisplaySpecialChar+0x56>
		{
			LCD_WriteData(Ptr_u8PtrChar[Local_u8Index]);
		}
	}
	LCD_WriteCommand(0x02);
    2f7a:	82 e0       	ldi	r24, 0x02	; 2
    2f7c:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_WriteCommand>

}
    2f80:	27 96       	adiw	r28, 0x07	; 7
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	cf 91       	pop	r28
    2f8e:	df 91       	pop	r29
    2f90:	08 95       	ret

00002f92 <KPD_Init>:
#include "KPD_CONFIG.h"
#include "KPD_INTERFACE.h"


void KPD_Init()
{
    2f92:	df 93       	push	r29
    2f94:	cf 93       	push	r28
    2f96:	cd b7       	in	r28, 0x3d	; 61
    2f98:	de b7       	in	r29, 0x3e	; 62
			DIO_SetPinDirection(KPD_PORT,KPD_COULMN0_PIN,DIO_OUTPUT);
    2f9a:	83 e0       	ldi	r24, 0x03	; 3
    2f9c:	60 e0       	ldi	r22, 0x00	; 0
    2f9e:	41 e0       	ldi	r20, 0x01	; 1
    2fa0:	0e 94 63 06 	call	0xcc6	; 0xcc6 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_COULMN1_PIN,DIO_OUTPUT);
    2fa4:	83 e0       	ldi	r24, 0x03	; 3
    2fa6:	61 e0       	ldi	r22, 0x01	; 1
    2fa8:	41 e0       	ldi	r20, 0x01	; 1
    2faa:	0e 94 63 06 	call	0xcc6	; 0xcc6 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_COULMN2_PIN,DIO_OUTPUT);
    2fae:	83 e0       	ldi	r24, 0x03	; 3
    2fb0:	62 e0       	ldi	r22, 0x02	; 2
    2fb2:	41 e0       	ldi	r20, 0x01	; 1
    2fb4:	0e 94 63 06 	call	0xcc6	; 0xcc6 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_COULMN3_PIN,DIO_OUTPUT);
    2fb8:	83 e0       	ldi	r24, 0x03	; 3
    2fba:	63 e0       	ldi	r22, 0x03	; 3
    2fbc:	41 e0       	ldi	r20, 0x01	; 1
    2fbe:	0e 94 63 06 	call	0xcc6	; 0xcc6 <DIO_SetPinDirection>

			DIO_SetPinDirection(KPD_PORT,KPD_ROW0_PIN,DIO_INPUT);
    2fc2:	83 e0       	ldi	r24, 0x03	; 3
    2fc4:	64 e0       	ldi	r22, 0x04	; 4
    2fc6:	40 e0       	ldi	r20, 0x00	; 0
    2fc8:	0e 94 63 06 	call	0xcc6	; 0xcc6 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_ROW1_PIN,DIO_INPUT);
    2fcc:	83 e0       	ldi	r24, 0x03	; 3
    2fce:	65 e0       	ldi	r22, 0x05	; 5
    2fd0:	40 e0       	ldi	r20, 0x00	; 0
    2fd2:	0e 94 63 06 	call	0xcc6	; 0xcc6 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_ROW2_PIN,DIO_INPUT);
    2fd6:	83 e0       	ldi	r24, 0x03	; 3
    2fd8:	66 e0       	ldi	r22, 0x06	; 6
    2fda:	40 e0       	ldi	r20, 0x00	; 0
    2fdc:	0e 94 63 06 	call	0xcc6	; 0xcc6 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_ROW3_PIN,DIO_INPUT);
    2fe0:	83 e0       	ldi	r24, 0x03	; 3
    2fe2:	67 e0       	ldi	r22, 0x07	; 7
    2fe4:	40 e0       	ldi	r20, 0x00	; 0
    2fe6:	0e 94 63 06 	call	0xcc6	; 0xcc6 <DIO_SetPinDirection>
			//DIO_SetPortValue(KPD_PORT,0b00001111);
			DIO_SetPortValue(KPD_PORT,0xff);
    2fea:	83 e0       	ldi	r24, 0x03	; 3
    2fec:	6f ef       	ldi	r22, 0xFF	; 255
    2fee:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_SetPortValue>
}
    2ff2:	cf 91       	pop	r28
    2ff4:	df 91       	pop	r29
    2ff6:	08 95       	ret

00002ff8 <KPD_u8GetPressedKye>:

u8 KPD_u8GetPressedKye(void)
{
    2ff8:	df 93       	push	r29
    2ffa:	cf 93       	push	r28
    2ffc:	cd b7       	in	r28, 0x3d	; 61
    2ffe:	de b7       	in	r29, 0x3e	; 62
    3000:	a1 97       	sbiw	r28, 0x21	; 33
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	f8 94       	cli
    3006:	de bf       	out	0x3e, r29	; 62
    3008:	0f be       	out	0x3f, r0	; 63
    300a:	cd bf       	out	0x3d, r28	; 61

	/*Indication for the pressed key value*/
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY;
    300c:	8f ef       	ldi	r24, 0xFF	; 255
    300e:	8b 83       	std	Y+3, r24	; 0x03

	u8 Local_u8CoulmnArr[COULMN_NUM]={KPD_COULMN0_PIN,KPD_COULMN1_PIN,KPD_COULMN2_PIN,KPD_COULMN3_PIN};
    3010:	1c 82       	std	Y+4, r1	; 0x04
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	8d 83       	std	Y+5, r24	; 0x05
    3016:	82 e0       	ldi	r24, 0x02	; 2
    3018:	8e 83       	std	Y+6, r24	; 0x06
    301a:	83 e0       	ldi	r24, 0x03	; 3
    301c:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8RowArr[COULMN_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
    301e:	84 e0       	ldi	r24, 0x04	; 4
    3020:	88 87       	std	Y+8, r24	; 0x08
    3022:	85 e0       	ldi	r24, 0x05	; 5
    3024:	89 87       	std	Y+9, r24	; 0x09
    3026:	86 e0       	ldi	r24, 0x06	; 6
    3028:	8a 87       	std	Y+10, r24	; 0x0a
    302a:	87 e0       	ldi	r24, 0x07	; 7
    302c:	8b 87       	std	Y+11, r24	; 0x0b

	/*Array of values of key pad*/
	u8 Local_u8KPDArr[ROW_NUM][COULMN_NUM]= KPD_ARR_VAL;
    302e:	ce 01       	movw	r24, r28
    3030:	0c 96       	adiw	r24, 0x0c	; 12
    3032:	9e 8f       	std	Y+30, r25	; 0x1e
    3034:	8d 8f       	std	Y+29, r24	; 0x1d
    3036:	e8 e6       	ldi	r30, 0x68	; 104
    3038:	f1 e0       	ldi	r31, 0x01	; 1
    303a:	f8 a3       	std	Y+32, r31	; 0x20
    303c:	ef 8f       	std	Y+31, r30	; 0x1f
    303e:	f0 e1       	ldi	r31, 0x10	; 16
    3040:	f9 a3       	std	Y+33, r31	; 0x21
    3042:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3044:	f8 a1       	ldd	r31, Y+32	; 0x20
    3046:	00 80       	ld	r0, Z
    3048:	8f 8d       	ldd	r24, Y+31	; 0x1f
    304a:	98 a1       	ldd	r25, Y+32	; 0x20
    304c:	01 96       	adiw	r24, 0x01	; 1
    304e:	98 a3       	std	Y+32, r25	; 0x20
    3050:	8f 8f       	std	Y+31, r24	; 0x1f
    3052:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3054:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3056:	00 82       	st	Z, r0
    3058:	8d 8d       	ldd	r24, Y+29	; 0x1d
    305a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    305c:	01 96       	adiw	r24, 0x01	; 1
    305e:	9e 8f       	std	Y+30, r25	; 0x1e
    3060:	8d 8f       	std	Y+29, r24	; 0x1d
    3062:	99 a1       	ldd	r25, Y+33	; 0x21
    3064:	91 50       	subi	r25, 0x01	; 1
    3066:	99 a3       	std	Y+33, r25	; 0x21
    3068:	e9 a1       	ldd	r30, Y+33	; 0x21
    306a:	ee 23       	and	r30, r30
    306c:	51 f7       	brne	.-44     	; 0x3042 <KPD_u8GetPressedKye+0x4a>

	u8 Local_u8ColumnIndex,Local_u8RowIndex;

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex < COULMN_NUM; Local_u8ColumnIndex++)
    306e:	1a 82       	std	Y+2, r1	; 0x02
    3070:	72 c0       	rjmp	.+228    	; 0x3156 <KPD_u8GetPressedKye+0x15e>
	{

		DIO_SetPinValue(KPD_PORT,Local_u8CoulmnArr[Local_u8ColumnIndex],DIO_LOW);
    3072:	8a 81       	ldd	r24, Y+2	; 0x02
    3074:	28 2f       	mov	r18, r24
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	ce 01       	movw	r24, r28
    307a:	04 96       	adiw	r24, 0x04	; 4
    307c:	fc 01       	movw	r30, r24
    307e:	e2 0f       	add	r30, r18
    3080:	f3 1f       	adc	r31, r19
    3082:	90 81       	ld	r25, Z
    3084:	83 e0       	ldi	r24, 0x03	; 3
    3086:	69 2f       	mov	r22, r25
    3088:	40 e0       	ldi	r20, 0x00	; 0
    308a:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>

		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
    308e:	19 82       	std	Y+1, r1	; 0x01
    3090:	4d c0       	rjmp	.+154    	; 0x312c <KPD_u8GetPressedKye+0x134>
		{
			if(DIO_GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex])==DIO_LOW)
    3092:	89 81       	ldd	r24, Y+1	; 0x01
    3094:	28 2f       	mov	r18, r24
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	ce 01       	movw	r24, r28
    309a:	08 96       	adiw	r24, 0x08	; 8
    309c:	fc 01       	movw	r30, r24
    309e:	e2 0f       	add	r30, r18
    30a0:	f3 1f       	adc	r31, r19
    30a2:	90 81       	ld	r25, Z
    30a4:	83 e0       	ldi	r24, 0x03	; 3
    30a6:	69 2f       	mov	r22, r25
    30a8:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_GetPinValue>
    30ac:	88 23       	and	r24, r24
    30ae:	d9 f5       	brne	.+118    	; 0x3126 <KPD_u8GetPressedKye+0x12e>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    30b0:	89 81       	ldd	r24, Y+1	; 0x01
    30b2:	28 2f       	mov	r18, r24
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	8a 81       	ldd	r24, Y+2	; 0x02
    30b8:	48 2f       	mov	r20, r24
    30ba:	50 e0       	ldi	r21, 0x00	; 0
    30bc:	22 0f       	add	r18, r18
    30be:	33 1f       	adc	r19, r19
    30c0:	22 0f       	add	r18, r18
    30c2:	33 1f       	adc	r19, r19
    30c4:	ce 01       	movw	r24, r28
    30c6:	01 96       	adiw	r24, 0x01	; 1
    30c8:	82 0f       	add	r24, r18
    30ca:	93 1f       	adc	r25, r19
    30cc:	84 0f       	add	r24, r20
    30ce:	95 1f       	adc	r25, r21
    30d0:	fc 01       	movw	r30, r24
    30d2:	3b 96       	adiw	r30, 0x0b	; 11
    30d4:	80 81       	ld	r24, Z
    30d6:	8b 83       	std	Y+3, r24	; 0x03
    30d8:	14 c0       	rjmp	.+40     	; 0x3102 <KPD_u8GetPressedKye+0x10a>
				while(DIO_GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex])==DIO_LOW)
				{
					Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    30da:	89 81       	ldd	r24, Y+1	; 0x01
    30dc:	28 2f       	mov	r18, r24
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	8a 81       	ldd	r24, Y+2	; 0x02
    30e2:	48 2f       	mov	r20, r24
    30e4:	50 e0       	ldi	r21, 0x00	; 0
    30e6:	22 0f       	add	r18, r18
    30e8:	33 1f       	adc	r19, r19
    30ea:	22 0f       	add	r18, r18
    30ec:	33 1f       	adc	r19, r19
    30ee:	ce 01       	movw	r24, r28
    30f0:	01 96       	adiw	r24, 0x01	; 1
    30f2:	82 0f       	add	r24, r18
    30f4:	93 1f       	adc	r25, r19
    30f6:	84 0f       	add	r24, r20
    30f8:	95 1f       	adc	r25, r21
    30fa:	fc 01       	movw	r30, r24
    30fc:	3b 96       	adiw	r30, 0x0b	; 11
    30fe:	80 81       	ld	r24, Z
    3100:	8b 83       	std	Y+3, r24	; 0x03
		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
		{
			if(DIO_GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex])==DIO_LOW)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
				while(DIO_GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex])==DIO_LOW)
    3102:	89 81       	ldd	r24, Y+1	; 0x01
    3104:	28 2f       	mov	r18, r24
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	ce 01       	movw	r24, r28
    310a:	08 96       	adiw	r24, 0x08	; 8
    310c:	fc 01       	movw	r30, r24
    310e:	e2 0f       	add	r30, r18
    3110:	f3 1f       	adc	r31, r19
    3112:	90 81       	ld	r25, Z
    3114:	83 e0       	ldi	r24, 0x03	; 3
    3116:	69 2f       	mov	r22, r25
    3118:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_GetPinValue>
    311c:	88 23       	and	r24, r24
    311e:	e9 f2       	breq	.-70     	; 0x30da <KPD_u8GetPressedKye+0xe2>
				{
					Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
				}

				return Local_u8PressedKey;
    3120:	fb 81       	ldd	r31, Y+3	; 0x03
    3122:	fc 8f       	std	Y+28, r31	; 0x1c
    3124:	1e c0       	rjmp	.+60     	; 0x3162 <KPD_u8GetPressedKye+0x16a>
	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex < COULMN_NUM; Local_u8ColumnIndex++)
	{

		DIO_SetPinValue(KPD_PORT,Local_u8CoulmnArr[Local_u8ColumnIndex],DIO_LOW);

		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	8f 5f       	subi	r24, 0xFF	; 255
    312a:	89 83       	std	Y+1, r24	; 0x01
    312c:	89 81       	ldd	r24, Y+1	; 0x01
    312e:	84 30       	cpi	r24, 0x04	; 4
    3130:	08 f4       	brcc	.+2      	; 0x3134 <KPD_u8GetPressedKye+0x13c>
    3132:	af cf       	rjmp	.-162    	; 0x3092 <KPD_u8GetPressedKye+0x9a>
				}

				return Local_u8PressedKey;
			}
		}
		DIO_SetPinValue(KPD_PORT,Local_u8CoulmnArr[Local_u8ColumnIndex],DIO_HIGH);
    3134:	8a 81       	ldd	r24, Y+2	; 0x02
    3136:	28 2f       	mov	r18, r24
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	ce 01       	movw	r24, r28
    313c:	04 96       	adiw	r24, 0x04	; 4
    313e:	fc 01       	movw	r30, r24
    3140:	e2 0f       	add	r30, r18
    3142:	f3 1f       	adc	r31, r19
    3144:	90 81       	ld	r25, Z
    3146:	83 e0       	ldi	r24, 0x03	; 3
    3148:	69 2f       	mov	r22, r25
    314a:	41 e0       	ldi	r20, 0x01	; 1
    314c:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_SetPinValue>
	/*Array of values of key pad*/
	u8 Local_u8KPDArr[ROW_NUM][COULMN_NUM]= KPD_ARR_VAL;

	u8 Local_u8ColumnIndex,Local_u8RowIndex;

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex < COULMN_NUM; Local_u8ColumnIndex++)
    3150:	8a 81       	ldd	r24, Y+2	; 0x02
    3152:	8f 5f       	subi	r24, 0xFF	; 255
    3154:	8a 83       	std	Y+2, r24	; 0x02
    3156:	8a 81       	ldd	r24, Y+2	; 0x02
    3158:	84 30       	cpi	r24, 0x04	; 4
    315a:	08 f4       	brcc	.+2      	; 0x315e <KPD_u8GetPressedKye+0x166>
    315c:	8a cf       	rjmp	.-236    	; 0x3072 <KPD_u8GetPressedKye+0x7a>
				return Local_u8PressedKey;
			}
		}
		DIO_SetPinValue(KPD_PORT,Local_u8CoulmnArr[Local_u8ColumnIndex],DIO_HIGH);
	}
	return Local_u8PressedKey;
    315e:	8b 81       	ldd	r24, Y+3	; 0x03
    3160:	8c 8f       	std	Y+28, r24	; 0x1c
    3162:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    3164:	a1 96       	adiw	r28, 0x21	; 33
    3166:	0f b6       	in	r0, 0x3f	; 63
    3168:	f8 94       	cli
    316a:	de bf       	out	0x3e, r29	; 62
    316c:	0f be       	out	0x3f, r0	; 63
    316e:	cd bf       	out	0x3d, r28	; 61
    3170:	cf 91       	pop	r28
    3172:	df 91       	pop	r29
    3174:	08 95       	ret

00003176 <main>:
#include "../MCAL/DIO/DIO_INTERFACE.h"
#include <avr/delay.h>


int main(void)
{
    3176:	df 93       	push	r29
    3178:	cf 93       	push	r28
    317a:	cd b7       	in	r28, 0x3d	; 61
    317c:	de b7       	in	r29, 0x3e	; 62

	STEPER_voidInit();
    317e:	0e 94 42 09 	call	0x1284	; 0x1284 <STEPER_voidInit>


	while(1)
	{

	STEPER_voidFullStep(1500); //delay for speed of motor
    3182:	8c ed       	ldi	r24, 0xDC	; 220
    3184:	95 e0       	ldi	r25, 0x05	; 5
    3186:	0e 94 5d 09 	call	0x12ba	; 0x12ba <STEPER_voidFullStep>
    318a:	fb cf       	rjmp	.-10     	; 0x3182 <main+0xc>

0000318c <__udivmodsi4>:
    318c:	a1 e2       	ldi	r26, 0x21	; 33
    318e:	1a 2e       	mov	r1, r26
    3190:	aa 1b       	sub	r26, r26
    3192:	bb 1b       	sub	r27, r27
    3194:	fd 01       	movw	r30, r26
    3196:	0d c0       	rjmp	.+26     	; 0x31b2 <__udivmodsi4_ep>

00003198 <__udivmodsi4_loop>:
    3198:	aa 1f       	adc	r26, r26
    319a:	bb 1f       	adc	r27, r27
    319c:	ee 1f       	adc	r30, r30
    319e:	ff 1f       	adc	r31, r31
    31a0:	a2 17       	cp	r26, r18
    31a2:	b3 07       	cpc	r27, r19
    31a4:	e4 07       	cpc	r30, r20
    31a6:	f5 07       	cpc	r31, r21
    31a8:	20 f0       	brcs	.+8      	; 0x31b2 <__udivmodsi4_ep>
    31aa:	a2 1b       	sub	r26, r18
    31ac:	b3 0b       	sbc	r27, r19
    31ae:	e4 0b       	sbc	r30, r20
    31b0:	f5 0b       	sbc	r31, r21

000031b2 <__udivmodsi4_ep>:
    31b2:	66 1f       	adc	r22, r22
    31b4:	77 1f       	adc	r23, r23
    31b6:	88 1f       	adc	r24, r24
    31b8:	99 1f       	adc	r25, r25
    31ba:	1a 94       	dec	r1
    31bc:	69 f7       	brne	.-38     	; 0x3198 <__udivmodsi4_loop>
    31be:	60 95       	com	r22
    31c0:	70 95       	com	r23
    31c2:	80 95       	com	r24
    31c4:	90 95       	com	r25
    31c6:	9b 01       	movw	r18, r22
    31c8:	ac 01       	movw	r20, r24
    31ca:	bd 01       	movw	r22, r26
    31cc:	cf 01       	movw	r24, r30
    31ce:	08 95       	ret

000031d0 <__prologue_saves__>:
    31d0:	2f 92       	push	r2
    31d2:	3f 92       	push	r3
    31d4:	4f 92       	push	r4
    31d6:	5f 92       	push	r5
    31d8:	6f 92       	push	r6
    31da:	7f 92       	push	r7
    31dc:	8f 92       	push	r8
    31de:	9f 92       	push	r9
    31e0:	af 92       	push	r10
    31e2:	bf 92       	push	r11
    31e4:	cf 92       	push	r12
    31e6:	df 92       	push	r13
    31e8:	ef 92       	push	r14
    31ea:	ff 92       	push	r15
    31ec:	0f 93       	push	r16
    31ee:	1f 93       	push	r17
    31f0:	cf 93       	push	r28
    31f2:	df 93       	push	r29
    31f4:	cd b7       	in	r28, 0x3d	; 61
    31f6:	de b7       	in	r29, 0x3e	; 62
    31f8:	ca 1b       	sub	r28, r26
    31fa:	db 0b       	sbc	r29, r27
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	f8 94       	cli
    3200:	de bf       	out	0x3e, r29	; 62
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	cd bf       	out	0x3d, r28	; 61
    3206:	09 94       	ijmp

00003208 <__epilogue_restores__>:
    3208:	2a 88       	ldd	r2, Y+18	; 0x12
    320a:	39 88       	ldd	r3, Y+17	; 0x11
    320c:	48 88       	ldd	r4, Y+16	; 0x10
    320e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3210:	6e 84       	ldd	r6, Y+14	; 0x0e
    3212:	7d 84       	ldd	r7, Y+13	; 0x0d
    3214:	8c 84       	ldd	r8, Y+12	; 0x0c
    3216:	9b 84       	ldd	r9, Y+11	; 0x0b
    3218:	aa 84       	ldd	r10, Y+10	; 0x0a
    321a:	b9 84       	ldd	r11, Y+9	; 0x09
    321c:	c8 84       	ldd	r12, Y+8	; 0x08
    321e:	df 80       	ldd	r13, Y+7	; 0x07
    3220:	ee 80       	ldd	r14, Y+6	; 0x06
    3222:	fd 80       	ldd	r15, Y+5	; 0x05
    3224:	0c 81       	ldd	r16, Y+4	; 0x04
    3226:	1b 81       	ldd	r17, Y+3	; 0x03
    3228:	aa 81       	ldd	r26, Y+2	; 0x02
    322a:	b9 81       	ldd	r27, Y+1	; 0x01
    322c:	ce 0f       	add	r28, r30
    322e:	d1 1d       	adc	r29, r1
    3230:	0f b6       	in	r0, 0x3f	; 63
    3232:	f8 94       	cli
    3234:	de bf       	out	0x3e, r29	; 62
    3236:	0f be       	out	0x3f, r0	; 63
    3238:	cd bf       	out	0x3d, r28	; 61
    323a:	ed 01       	movw	r28, r26
    323c:	08 95       	ret

0000323e <_exit>:
    323e:	f8 94       	cli

00003240 <__stop_program>:
    3240:	ff cf       	rjmp	.-2      	; 0x3240 <__stop_program>
