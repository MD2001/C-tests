
UART_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00001fa4  00002038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000064  00800090  00800090  00002068  2**0
                  ALLOC
  3 .stab         00001d64  00000000  00000000  00002068  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001139  00000000  00000000  00003dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005045  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000051b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008e85  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009653  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3f       	cpi	r26, 0xF4	; 244
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <main>
      8a:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e7       	ldi	r26, 0x77	; 119
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e7       	ldi	r24, 0x77	; 119
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <USART_voidInit>:
#include "USART_INTERFACE.h"
#include "USART_RIGSTER.h"
#include "USART_PRIVET.h"

void USART_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	/*set BUAD rate*/
	CLR_BIT(UCSRA,UCSRA_U2X);
     b50:	ab e2       	ldi	r26, 0x2B	; 43
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	eb e2       	ldi	r30, 0x2B	; 43
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	8d 7f       	andi	r24, 0xFD	; 253
     b5c:	8c 93       	st	X, r24
	UBRRL=51;
     b5e:	e9 e2       	ldi	r30, 0x29	; 41
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	83 e3       	ldi	r24, 0x33	; 51
     b64:	80 83       	st	Z, r24

	u8 Local_u8Value=0;
     b66:	19 82       	std	Y+1, r1	; 0x01
	/*Using UCSRC register*/
	SET_BIT(Local_u8Value,UCSRC_URSEL);
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	80 68       	ori	r24, 0x80	; 128
     b6c:	89 83       	std	Y+1, r24	; 0x01

	//*Asynchronous*/
	CLR_BIT(Local_u8Value,UCSRC_UMSEL);
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	8f 7b       	andi	r24, 0xBF	; 191
     b72:	89 83       	std	Y+1, r24	; 0x01
	/*no parity*/
	CLR_BIT(Local_u8Value,UCSRC_UPM1);
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	8f 7d       	andi	r24, 0xDF	; 223
     b78:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8Value,UCSRC_UPM0);
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	8f 7e       	andi	r24, 0xEF	; 239
     b7e:	89 83       	std	Y+1, r24	; 0x01


	/**one stop bit*/
	CLR_BIT(Local_u8Value,UCSRC_USBS);
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	87 7f       	andi	r24, 0xF7	; 247
     b84:	89 83       	std	Y+1, r24	; 0x01

	/*on char size 8-bit mode*/
	SET_BIT(Local_u8Value,UCSRC_UCSZ1);
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	84 60       	ori	r24, 0x04	; 4
     b8a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8Value,UCSRC_UCSZ0);
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	82 60       	ori	r24, 0x02	; 2
     b90:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
     b92:	aa e2       	ldi	r26, 0x2A	; 42
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	ea e2       	ldi	r30, 0x2A	; 42
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	8b 7f       	andi	r24, 0xFB	; 251
     b9e:	8c 93       	st	X, r24

	UCSRC=Local_u8Value;
     ba0:	e0 e4       	ldi	r30, 0x40	; 64
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	80 83       	st	Z, r24

	SET_BIT(UCSRB,UCSRB_TXEN);    //transmitter enable
     ba8:	aa e2       	ldi	r26, 0x2A	; 42
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	ea e2       	ldi	r30, 0x2A	; 42
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	88 60       	ori	r24, 0x08	; 8
     bb4:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_RXEN);    //receiver   enable
     bb6:	aa e2       	ldi	r26, 0x2A	; 42
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	ea e2       	ldi	r30, 0x2A	; 42
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	80 61       	ori	r24, 0x10	; 16
     bc2:	8c 93       	st	X, r24

}
     bc4:	0f 90       	pop	r0
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret

00000bcc <USART_u8Read>:



u8 USART_u8Read()
{
     bcc:	df 93       	push	r29
     bce:	cf 93       	push	r28
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,UCSRA_RXC)==0);
     bd4:	eb e2       	ldi	r30, 0x2B	; 43
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	88 23       	and	r24, r24
     bdc:	dc f7       	brge	.-10     	; 0xbd4 <USART_u8Read+0x8>
	return UDR;
     bde:	ec e2       	ldi	r30, 0x2C	; 44
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
}
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	08 95       	ret

00000bea <USART_voidSend>:

void USART_voidSend(u8 Copy_data)
{
     bea:	df 93       	push	r29
     bec:	cf 93       	push	r28
     bee:	0f 92       	push	r0
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UCSRA_UDRE)==0);
     bf6:	eb e2       	ldi	r30, 0x2B	; 43
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	82 95       	swap	r24
     bfe:	86 95       	lsr	r24
     c00:	87 70       	andi	r24, 0x07	; 7
     c02:	88 2f       	mov	r24, r24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	81 70       	andi	r24, 0x01	; 1
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	00 97       	sbiw	r24, 0x00	; 0
     c0c:	a1 f3       	breq	.-24     	; 0xbf6 <USART_voidSend+0xc>
	UDR=Copy_data;
     c0e:	ec e2       	ldi	r30, 0x2C	; 44
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	80 83       	st	Z, r24

}
     c16:	0f 90       	pop	r0
     c18:	cf 91       	pop	r28
     c1a:	df 91       	pop	r29
     c1c:	08 95       	ret

00000c1e <USART_SendString>:

void USART_SendString(u8* Copy_data)
{
     c1e:	df 93       	push	r29
     c20:	cf 93       	push	r28
     c22:	00 d0       	rcall	.+0      	; 0xc24 <USART_SendString+0x6>
     c24:	0f 92       	push	r0
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	9b 83       	std	Y+3, r25	; 0x03
     c2c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
     c2e:	19 82       	std	Y+1, r1	; 0x01
     c30:	0e c0       	rjmp	.+28     	; 0xc4e <USART_SendString+0x30>
	while(Copy_data[i]!='\0')
	{
		USART_voidSend(Copy_data[i]);
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	9b 81       	ldd	r25, Y+3	; 0x03
     c3c:	fc 01       	movw	r30, r24
     c3e:	e2 0f       	add	r30, r18
     c40:	f3 1f       	adc	r31, r19
     c42:	80 81       	ld	r24, Z
     c44:	0e 94 f5 05 	call	0xbea	; 0xbea <USART_voidSend>
		i++;
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	8f 5f       	subi	r24, 0xFF	; 255
     c4c:	89 83       	std	Y+1, r24	; 0x01
}

void USART_SendString(u8* Copy_data)
{
	u8 i=0;
	while(Copy_data[i]!='\0')
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	9b 81       	ldd	r25, Y+3	; 0x03
     c58:	fc 01       	movw	r30, r24
     c5a:	e2 0f       	add	r30, r18
     c5c:	f3 1f       	adc	r31, r19
     c5e:	80 81       	ld	r24, Z
     c60:	88 23       	and	r24, r24
     c62:	39 f7       	brne	.-50     	; 0xc32 <USART_SendString+0x14>
	{
		USART_voidSend(Copy_data[i]);
		i++;
	}
}
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	cf 91       	pop	r28
     c6c:	df 91       	pop	r29
     c6e:	08 95       	ret

00000c70 <USART_ReciveString>:

u8* USART_ReciveString()
{
     c70:	df 93       	push	r29
     c72:	cf 93       	push	r28
     c74:	00 d0       	rcall	.+0      	; 0xc76 <USART_ReciveString+0x6>
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
	static u8 string[100]={0};
	u8 i=0;
     c7a:	1a 82       	std	Y+2, r1	; 0x02
	u8 x=USART_u8Read();
     c7c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <USART_u8Read>
     c80:	89 83       	std	Y+1, r24	; 0x01
     c82:	0e c0       	rjmp	.+28     	; 0xca0 <USART_ReciveString+0x30>
	while(x !=0x0D)
	{
		string[i]=x;
     c84:	8a 81       	ldd	r24, Y+2	; 0x02
     c86:	88 2f       	mov	r24, r24
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	fc 01       	movw	r30, r24
     c8c:	e0 57       	subi	r30, 0x70	; 112
     c8e:	ff 4f       	sbci	r31, 0xFF	; 255
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	80 83       	st	Z, r24
		x=USART_u8Read();
     c94:	0e 94 e6 05 	call	0xbcc	; 0xbcc <USART_u8Read>
     c98:	89 83       	std	Y+1, r24	; 0x01
		i++;
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	8f 5f       	subi	r24, 0xFF	; 255
     c9e:	8a 83       	std	Y+2, r24	; 0x02
u8* USART_ReciveString()
{
	static u8 string[100]={0};
	u8 i=0;
	u8 x=USART_u8Read();
	while(x !=0x0D)
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	8d 30       	cpi	r24, 0x0D	; 13
     ca4:	79 f7       	brne	.-34     	; 0xc84 <USART_ReciveString+0x14>
	{
		string[i]=x;
		x=USART_u8Read();
		i++;
	}
	return string;
     ca6:	80 e9       	ldi	r24, 0x90	; 144
     ca8:	90 e0       	ldi	r25, 0x00	; 0
}
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <DIO_SetPinDirection>:
#include "DIO_INTERFACE.h"



void DIO_SetPinDirection(u8 Port , u8 Pin , u8 Direction)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	00 d0       	rcall	.+0      	; 0xcba <DIO_SetPinDirection+0x6>
     cba:	00 d0       	rcall	.+0      	; 0xcbc <DIO_SetPinDirection+0x8>
     cbc:	0f 92       	push	r0
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
     cc2:	89 83       	std	Y+1, r24	; 0x01
     cc4:	6a 83       	std	Y+2, r22	; 0x02
     cc6:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	3d 83       	std	Y+5, r19	; 0x05
     cd0:	2c 83       	std	Y+4, r18	; 0x04
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	9d 81       	ldd	r25, Y+5	; 0x05
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	91 05       	cpc	r25, r1
     cda:	09 f4       	brne	.+2      	; 0xcde <DIO_SetPinDirection+0x2a>
     cdc:	47 c0       	rjmp	.+142    	; 0xd6c <DIO_SetPinDirection+0xb8>
     cde:	2c 81       	ldd	r18, Y+4	; 0x04
     ce0:	3d 81       	ldd	r19, Y+5	; 0x05
     ce2:	22 30       	cpi	r18, 0x02	; 2
     ce4:	31 05       	cpc	r19, r1
     ce6:	2c f4       	brge	.+10     	; 0xcf2 <DIO_SetPinDirection+0x3e>
     ce8:	8c 81       	ldd	r24, Y+4	; 0x04
     cea:	9d 81       	ldd	r25, Y+5	; 0x05
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	71 f0       	breq	.+28     	; 0xd0c <DIO_SetPinDirection+0x58>
     cf0:	cb c0       	rjmp	.+406    	; 0xe88 <DIO_SetPinDirection+0x1d4>
     cf2:	2c 81       	ldd	r18, Y+4	; 0x04
     cf4:	3d 81       	ldd	r19, Y+5	; 0x05
     cf6:	22 30       	cpi	r18, 0x02	; 2
     cf8:	31 05       	cpc	r19, r1
     cfa:	09 f4       	brne	.+2      	; 0xcfe <DIO_SetPinDirection+0x4a>
     cfc:	67 c0       	rjmp	.+206    	; 0xdcc <DIO_SetPinDirection+0x118>
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
     d00:	9d 81       	ldd	r25, Y+5	; 0x05
     d02:	83 30       	cpi	r24, 0x03	; 3
     d04:	91 05       	cpc	r25, r1
     d06:	09 f4       	brne	.+2      	; 0xd0a <DIO_SetPinDirection+0x56>
     d08:	91 c0       	rjmp	.+290    	; 0xe2c <DIO_SetPinDirection+0x178>
     d0a:	be c0       	rjmp	.+380    	; 0xe88 <DIO_SetPinDirection+0x1d4>
	{
		case DIO_PORTA: 
		if(Direction == DIO_INPUT) 
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	88 23       	and	r24, r24
     d10:	a9 f4       	brne	.+42     	; 0xd3c <DIO_SetPinDirection+0x88>
		{ 
			CLR_BIT(DDRA_REG,Pin);
     d12:	aa e3       	ldi	r26, 0x3A	; 58
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	ea e3       	ldi	r30, 0x3A	; 58
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	48 2f       	mov	r20, r24
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 2e       	mov	r0, r18
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <DIO_SetPinDirection+0x7c>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	0a 94       	dec	r0
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <DIO_SetPinDirection+0x78>
     d34:	80 95       	com	r24
     d36:	84 23       	and	r24, r20
     d38:	8c 93       	st	X, r24
     d3a:	a6 c0       	rjmp	.+332    	; 0xe88 <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
     d3c:	8b 81       	ldd	r24, Y+3	; 0x03
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	09 f0       	breq	.+2      	; 0xd44 <DIO_SetPinDirection+0x90>
     d42:	a2 c0       	rjmp	.+324    	; 0xe88 <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRA_REG,Pin);
     d44:	aa e3       	ldi	r26, 0x3A	; 58
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	ea e3       	ldi	r30, 0x3A	; 58
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	48 2f       	mov	r20, r24
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	02 2e       	mov	r0, r18
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <DIO_SetPinDirection+0xae>
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	0a 94       	dec	r0
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <DIO_SetPinDirection+0xaa>
     d66:	84 2b       	or	r24, r20
     d68:	8c 93       	st	X, r24
     d6a:	8e c0       	rjmp	.+284    	; 0xe88 <DIO_SetPinDirection+0x1d4>
		}  
		break;
		case DIO_PORTB: 
		if(Direction == DIO_INPUT) 
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	88 23       	and	r24, r24
     d70:	a9 f4       	brne	.+42     	; 0xd9c <DIO_SetPinDirection+0xe8>
		{ 
			CLR_BIT(DDRB_REG,Pin);
     d72:	a7 e3       	ldi	r26, 0x37	; 55
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e7 e3       	ldi	r30, 0x37	; 55
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	48 2f       	mov	r20, r24
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 2e       	mov	r0, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <DIO_SetPinDirection+0xdc>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <DIO_SetPinDirection+0xd8>
     d94:	80 95       	com	r24
     d96:	84 23       	and	r24, r20
     d98:	8c 93       	st	X, r24
     d9a:	76 c0       	rjmp	.+236    	; 0xe88 <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	81 30       	cpi	r24, 0x01	; 1
     da0:	09 f0       	breq	.+2      	; 0xda4 <DIO_SetPinDirection+0xf0>
     da2:	72 c0       	rjmp	.+228    	; 0xe88 <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRB_REG,Pin);
     da4:	a7 e3       	ldi	r26, 0x37	; 55
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e7 e3       	ldi	r30, 0x37	; 55
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	48 2f       	mov	r20, r24
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 2e       	mov	r0, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <DIO_SetPinDirection+0x10e>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <DIO_SetPinDirection+0x10a>
     dc6:	84 2b       	or	r24, r20
     dc8:	8c 93       	st	X, r24
     dca:	5e c0       	rjmp	.+188    	; 0xe88 <DIO_SetPinDirection+0x1d4>
		}  
		break;
		case DIO_PORTC: 
		if(Direction == DIO_INPUT) 
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	88 23       	and	r24, r24
     dd0:	a9 f4       	brne	.+42     	; 0xdfc <DIO_SetPinDirection+0x148>
		{ 
			CLR_BIT(DDRC_REG,Pin);
     dd2:	a4 e3       	ldi	r26, 0x34	; 52
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e4 e3       	ldi	r30, 0x34	; 52
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <DIO_SetPinDirection+0x13c>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <DIO_SetPinDirection+0x138>
     df4:	80 95       	com	r24
     df6:	84 23       	and	r24, r20
     df8:	8c 93       	st	X, r24
     dfa:	46 c0       	rjmp	.+140    	; 0xe88 <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	09 f0       	breq	.+2      	; 0xe04 <DIO_SetPinDirection+0x150>
     e02:	42 c0       	rjmp	.+132    	; 0xe88 <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRC_REG,Pin);
     e04:	a4 e3       	ldi	r26, 0x34	; 52
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e4 e3       	ldi	r30, 0x34	; 52
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	48 2f       	mov	r20, r24
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	02 2e       	mov	r0, r18
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <DIO_SetPinDirection+0x16e>
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	0a 94       	dec	r0
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <DIO_SetPinDirection+0x16a>
     e26:	84 2b       	or	r24, r20
     e28:	8c 93       	st	X, r24
     e2a:	2e c0       	rjmp	.+92     	; 0xe88 <DIO_SetPinDirection+0x1d4>
		}  
		break;
		case DIO_PORTD: 
		if(Direction == DIO_INPUT) 
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	88 23       	and	r24, r24
     e30:	a9 f4       	brne	.+42     	; 0xe5c <DIO_SetPinDirection+0x1a8>
		{ 
			CLR_BIT(DDRD_REG,Pin);
     e32:	a1 e3       	ldi	r26, 0x31	; 49
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e1 e3       	ldi	r30, 0x31	; 49
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	02 2e       	mov	r0, r18
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <DIO_SetPinDirection+0x19c>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	0a 94       	dec	r0
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <DIO_SetPinDirection+0x198>
     e54:	80 95       	com	r24
     e56:	84 23       	and	r24, r20
     e58:	8c 93       	st	X, r24
     e5a:	16 c0       	rjmp	.+44     	; 0xe88 <DIO_SetPinDirection+0x1d4>
		} 
		else if(Direction == DIO_OUTPUT) 
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	99 f4       	brne	.+38     	; 0xe88 <DIO_SetPinDirection+0x1d4>
		{
			SET_BIT(DDRD_REG,Pin);
     e62:	a1 e3       	ldi	r26, 0x31	; 49
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e1 e3       	ldi	r30, 0x31	; 49
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_SetPinDirection+0x1cc>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_SetPinDirection+0x1c8>
     e84:	84 2b       	or	r24, r20
     e86:	8c 93       	st	X, r24
		default:
		// " Port or Pin or Direction not valid "
		break;
	}
	
}
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <DIO_SetPinValue>:

void DIO_SetPinValue    (u8 Port , u8 Pin , u8 Value )
{
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <DIO_SetPinValue+0x6>
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <DIO_SetPinValue+0x8>
     ea0:	0f 92       	push	r0
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	89 83       	std	Y+1, r24	; 0x01
     ea8:	6a 83       	std	Y+2, r22	; 0x02
     eaa:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	3d 83       	std	Y+5, r19	; 0x05
     eb4:	2c 83       	std	Y+4, r18	; 0x04
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	9d 81       	ldd	r25, Y+5	; 0x05
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	91 05       	cpc	r25, r1
     ebe:	09 f4       	brne	.+2      	; 0xec2 <DIO_SetPinValue+0x2a>
     ec0:	47 c0       	rjmp	.+142    	; 0xf50 <DIO_SetPinValue+0xb8>
     ec2:	2c 81       	ldd	r18, Y+4	; 0x04
     ec4:	3d 81       	ldd	r19, Y+5	; 0x05
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	2c f4       	brge	.+10     	; 0xed6 <DIO_SetPinValue+0x3e>
     ecc:	8c 81       	ldd	r24, Y+4	; 0x04
     ece:	9d 81       	ldd	r25, Y+5	; 0x05
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	71 f0       	breq	.+28     	; 0xef0 <DIO_SetPinValue+0x58>
     ed4:	cb c0       	rjmp	.+406    	; 0x106c <DIO_SetPinValue+0x1d4>
     ed6:	2c 81       	ldd	r18, Y+4	; 0x04
     ed8:	3d 81       	ldd	r19, Y+5	; 0x05
     eda:	22 30       	cpi	r18, 0x02	; 2
     edc:	31 05       	cpc	r19, r1
     ede:	09 f4       	brne	.+2      	; 0xee2 <DIO_SetPinValue+0x4a>
     ee0:	67 c0       	rjmp	.+206    	; 0xfb0 <DIO_SetPinValue+0x118>
     ee2:	8c 81       	ldd	r24, Y+4	; 0x04
     ee4:	9d 81       	ldd	r25, Y+5	; 0x05
     ee6:	83 30       	cpi	r24, 0x03	; 3
     ee8:	91 05       	cpc	r25, r1
     eea:	09 f4       	brne	.+2      	; 0xeee <DIO_SetPinValue+0x56>
     eec:	91 c0       	rjmp	.+290    	; 0x1010 <DIO_SetPinValue+0x178>
     eee:	be c0       	rjmp	.+380    	; 0x106c <DIO_SetPinValue+0x1d4>
	{
		case DIO_PORTA: 
		if(Value == DIO_HIGH)
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	a1 f4       	brne	.+40     	; 0xf1e <DIO_SetPinValue+0x86>
		{ 
			SET_BIT(PORTA_REG,Pin);
     ef6:	ab e3       	ldi	r26, 0x3B	; 59
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	eb e3       	ldi	r30, 0x3B	; 59
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	48 2f       	mov	r20, r24
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	02 2e       	mov	r0, r18
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <DIO_SetPinValue+0x7c>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	0a 94       	dec	r0
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <DIO_SetPinValue+0x78>
     f18:	84 2b       	or	r24, r20
     f1a:	8c 93       	st	X, r24
     f1c:	a7 c0       	rjmp	.+334    	; 0x106c <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	88 23       	and	r24, r24
     f22:	09 f0       	breq	.+2      	; 0xf26 <DIO_SetPinValue+0x8e>
     f24:	a3 c0       	rjmp	.+326    	; 0x106c <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTA_REG,Pin);
     f26:	ab e3       	ldi	r26, 0x3B	; 59
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	eb e3       	ldi	r30, 0x3B	; 59
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_SetPinValue+0xac>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_SetPinValue+0xa8>
     f48:	80 95       	com	r24
     f4a:	84 23       	and	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	8e c0       	rjmp	.+284    	; 0x106c <DIO_SetPinValue+0x1d4>
		}  
		break;
		case DIO_PORTB: 
		if(Value == DIO_HIGH)
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	a1 f4       	brne	.+40     	; 0xf7e <DIO_SetPinValue+0xe6>
		{ 
			SET_BIT(PORTB_REG,Pin);
     f56:	a8 e3       	ldi	r26, 0x38	; 56
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e8 e3       	ldi	r30, 0x38	; 56
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <DIO_SetPinValue+0xdc>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <DIO_SetPinValue+0xd8>
     f78:	84 2b       	or	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	77 c0       	rjmp	.+238    	; 0x106c <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	88 23       	and	r24, r24
     f82:	09 f0       	breq	.+2      	; 0xf86 <DIO_SetPinValue+0xee>
     f84:	73 c0       	rjmp	.+230    	; 0x106c <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTB_REG,Pin);
     f86:	a8 e3       	ldi	r26, 0x38	; 56
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e8 e3       	ldi	r30, 0x38	; 56
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_SetPinValue+0x10c>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_SetPinValue+0x108>
     fa8:	80 95       	com	r24
     faa:	84 23       	and	r24, r20
     fac:	8c 93       	st	X, r24
     fae:	5e c0       	rjmp	.+188    	; 0x106c <DIO_SetPinValue+0x1d4>
		}  
		break;
		case DIO_PORTC: 
		if(Value == DIO_HIGH)
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	a1 f4       	brne	.+40     	; 0xfde <DIO_SetPinValue+0x146>
		{ 
			SET_BIT(PORTC_REG,Pin);
     fb6:	a5 e3       	ldi	r26, 0x35	; 53
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e5 e3       	ldi	r30, 0x35	; 53
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <DIO_SetPinValue+0x13c>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <DIO_SetPinValue+0x138>
     fd8:	84 2b       	or	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	47 c0       	rjmp	.+142    	; 0x106c <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	88 23       	and	r24, r24
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <DIO_SetPinValue+0x14e>
     fe4:	43 c0       	rjmp	.+134    	; 0x106c <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTC_REG,Pin);
     fe6:	a5 e3       	ldi	r26, 0x35	; 53
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e5 e3       	ldi	r30, 0x35	; 53
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 2e       	mov	r0, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <DIO_SetPinValue+0x16c>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	0a 94       	dec	r0
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <DIO_SetPinValue+0x168>
    1008:	80 95       	com	r24
    100a:	84 23       	and	r24, r20
    100c:	8c 93       	st	X, r24
    100e:	2e c0       	rjmp	.+92     	; 0x106c <DIO_SetPinValue+0x1d4>
		}  
		break;
		case DIO_PORTD: 
		if(Value == DIO_HIGH)
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	a1 f4       	brne	.+40     	; 0x103e <DIO_SetPinValue+0x1a6>
		{ 
			SET_BIT(PORTD_REG,Pin);
    1016:	a2 e3       	ldi	r26, 0x32	; 50
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e2 e3       	ldi	r30, 0x32	; 50
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_SetPinValue+0x19c>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_SetPinValue+0x198>
    1038:	84 2b       	or	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	17 c0       	rjmp	.+46     	; 0x106c <DIO_SetPinValue+0x1d4>
		} 
		else if(Value == DIO_LOW)
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	88 23       	and	r24, r24
    1042:	a1 f4       	brne	.+40     	; 0x106c <DIO_SetPinValue+0x1d4>
		{
			CLR_BIT(PORTD_REG,Pin);
    1044:	a2 e3       	ldi	r26, 0x32	; 50
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e2 e3       	ldi	r30, 0x32	; 50
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 2e       	mov	r0, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <DIO_SetPinValue+0x1ca>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	0a 94       	dec	r0
    1064:	e2 f7       	brpl	.-8      	; 0x105e <DIO_SetPinValue+0x1c6>
    1066:	80 95       	com	r24
    1068:	84 23       	and	r24, r20
    106a:	8c 93       	st	X, r24
		default:
		// " Port or Pin or Value not valid "
		break;
	}
	
}
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <DIO_GetPinValue>:

u8   DIO_GetPinValue    (u8 Port , u8 Pin )
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	00 d0       	rcall	.+0      	; 0x1082 <DIO_GetPinValue+0x6>
    1082:	00 d0       	rcall	.+0      	; 0x1084 <DIO_GetPinValue+0x8>
    1084:	0f 92       	push	r0
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	8a 83       	std	Y+2, r24	; 0x02
    108c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Value;
	switch(Port)
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	3d 83       	std	Y+5, r19	; 0x05
    1096:	2c 83       	std	Y+4, r18	; 0x04
    1098:	4c 81       	ldd	r20, Y+4	; 0x04
    109a:	5d 81       	ldd	r21, Y+5	; 0x05
    109c:	41 30       	cpi	r20, 0x01	; 1
    109e:	51 05       	cpc	r21, r1
    10a0:	41 f1       	breq	.+80     	; 0x10f2 <DIO_GetPinValue+0x76>
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	9d 81       	ldd	r25, Y+5	; 0x05
    10a6:	82 30       	cpi	r24, 0x02	; 2
    10a8:	91 05       	cpc	r25, r1
    10aa:	34 f4       	brge	.+12     	; 0x10b8 <DIO_GetPinValue+0x3c>
    10ac:	2c 81       	ldd	r18, Y+4	; 0x04
    10ae:	3d 81       	ldd	r19, Y+5	; 0x05
    10b0:	21 15       	cp	r18, r1
    10b2:	31 05       	cpc	r19, r1
    10b4:	61 f0       	breq	.+24     	; 0x10ce <DIO_GetPinValue+0x52>
    10b6:	52 c0       	rjmp	.+164    	; 0x115c <DIO_GetPinValue+0xe0>
    10b8:	4c 81       	ldd	r20, Y+4	; 0x04
    10ba:	5d 81       	ldd	r21, Y+5	; 0x05
    10bc:	42 30       	cpi	r20, 0x02	; 2
    10be:	51 05       	cpc	r21, r1
    10c0:	51 f1       	breq	.+84     	; 0x1116 <DIO_GetPinValue+0x9a>
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	9d 81       	ldd	r25, Y+5	; 0x05
    10c6:	83 30       	cpi	r24, 0x03	; 3
    10c8:	91 05       	cpc	r25, r1
    10ca:	b9 f1       	breq	.+110    	; 0x113a <DIO_GetPinValue+0xbe>
    10cc:	47 c0       	rjmp	.+142    	; 0x115c <DIO_GetPinValue+0xe0>
	{
		case DIO_PORTA: Value = GET_BIT(PINA_REG,Pin); break;
    10ce:	e9 e3       	ldi	r30, 0x39	; 57
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a9 01       	movw	r20, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_GetPinValue+0x6a>
    10e2:	55 95       	asr	r21
    10e4:	47 95       	ror	r20
    10e6:	8a 95       	dec	r24
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_GetPinValue+0x66>
    10ea:	ca 01       	movw	r24, r20
    10ec:	81 70       	andi	r24, 0x01	; 1
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	35 c0       	rjmp	.+106    	; 0x115c <DIO_GetPinValue+0xe0>
		case DIO_PORTB: Value = GET_BIT(PINB_REG,Pin); break;
    10f2:	e6 e3       	ldi	r30, 0x36	; 54
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	a9 01       	movw	r20, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <DIO_GetPinValue+0x8e>
    1106:	55 95       	asr	r21
    1108:	47 95       	ror	r20
    110a:	8a 95       	dec	r24
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <DIO_GetPinValue+0x8a>
    110e:	ca 01       	movw	r24, r20
    1110:	81 70       	andi	r24, 0x01	; 1
    1112:	89 83       	std	Y+1, r24	; 0x01
    1114:	23 c0       	rjmp	.+70     	; 0x115c <DIO_GetPinValue+0xe0>
		case DIO_PORTC: Value = GET_BIT(PINC_REG,Pin); break;
    1116:	e3 e3       	ldi	r30, 0x33	; 51
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	a9 01       	movw	r20, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_GetPinValue+0xb2>
    112a:	55 95       	asr	r21
    112c:	47 95       	ror	r20
    112e:	8a 95       	dec	r24
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO_GetPinValue+0xae>
    1132:	ca 01       	movw	r24, r20
    1134:	81 70       	andi	r24, 0x01	; 1
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	11 c0       	rjmp	.+34     	; 0x115c <DIO_GetPinValue+0xe0>
		case DIO_PORTD: Value = GET_BIT(PIND_REG,Pin); break;
    113a:	e0 e3       	ldi	r30, 0x30	; 48
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	a9 01       	movw	r20, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_GetPinValue+0xd6>
    114e:	55 95       	asr	r21
    1150:	47 95       	ror	r20
    1152:	8a 95       	dec	r24
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_GetPinValue+0xd2>
    1156:	ca 01       	movw	r24, r20
    1158:	81 70       	andi	r24, 0x01	; 1
    115a:	89 83       	std	Y+1, r24	; 0x01
		default:
		break;
	}
	return Value;
    115c:	89 81       	ldd	r24, Y+1	; 0x01
}
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <DIO_SetPortDirection>:

void DIO_SetPortDirection(u8 Port , u8 Direction)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	00 d0       	rcall	.+0      	; 0x1174 <DIO_SetPortDirection+0x6>
    1174:	00 d0       	rcall	.+0      	; 0x1176 <DIO_SetPortDirection+0x8>
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	3c 83       	std	Y+4, r19	; 0x04
    1186:	2b 83       	std	Y+3, r18	; 0x03
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	91 05       	cpc	r25, r1
    1190:	d1 f0       	breq	.+52     	; 0x11c6 <DIO_SetPortDirection+0x58>
    1192:	2b 81       	ldd	r18, Y+3	; 0x03
    1194:	3c 81       	ldd	r19, Y+4	; 0x04
    1196:	22 30       	cpi	r18, 0x02	; 2
    1198:	31 05       	cpc	r19, r1
    119a:	2c f4       	brge	.+10     	; 0x11a6 <DIO_SetPortDirection+0x38>
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	61 f0       	breq	.+24     	; 0x11bc <DIO_SetPortDirection+0x4e>
    11a4:	1e c0       	rjmp	.+60     	; 0x11e2 <DIO_SetPortDirection+0x74>
    11a6:	2b 81       	ldd	r18, Y+3	; 0x03
    11a8:	3c 81       	ldd	r19, Y+4	; 0x04
    11aa:	22 30       	cpi	r18, 0x02	; 2
    11ac:	31 05       	cpc	r19, r1
    11ae:	81 f0       	breq	.+32     	; 0x11d0 <DIO_SetPortDirection+0x62>
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	9c 81       	ldd	r25, Y+4	; 0x04
    11b4:	83 30       	cpi	r24, 0x03	; 3
    11b6:	91 05       	cpc	r25, r1
    11b8:	81 f0       	breq	.+32     	; 0x11da <DIO_SetPortDirection+0x6c>
    11ba:	13 c0       	rjmp	.+38     	; 0x11e2 <DIO_SetPortDirection+0x74>
	{
		case DIO_PORTA: DDRA_REG = Direction; break;
    11bc:	ea e3       	ldi	r30, 0x3A	; 58
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	80 83       	st	Z, r24
    11c4:	0e c0       	rjmp	.+28     	; 0x11e2 <DIO_SetPortDirection+0x74>
		case DIO_PORTB: DDRB_REG = Direction; break;
    11c6:	e7 e3       	ldi	r30, 0x37	; 55
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	80 83       	st	Z, r24
    11ce:	09 c0       	rjmp	.+18     	; 0x11e2 <DIO_SetPortDirection+0x74>
		case DIO_PORTC: DDRC_REG = Direction; break;
    11d0:	e4 e3       	ldi	r30, 0x34	; 52
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	80 83       	st	Z, r24
    11d8:	04 c0       	rjmp	.+8      	; 0x11e2 <DIO_SetPortDirection+0x74>
		case DIO_PORTD: DDRD_REG = Direction; break;
    11da:	e1 e3       	ldi	r30, 0x31	; 49
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	80 83       	st	Z, r24
		default:
		break;
	}
}
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <DIO_SetPortValue>:


void DIO_SetPortValue    (u8 Port , u8 Value   )
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <DIO_SetPortValue+0x6>
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <DIO_SetPortValue+0x8>
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	3c 83       	std	Y+4, r19	; 0x04
    1208:	2b 83       	std	Y+3, r18	; 0x03
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	9c 81       	ldd	r25, Y+4	; 0x04
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	91 05       	cpc	r25, r1
    1212:	d1 f0       	breq	.+52     	; 0x1248 <DIO_SetPortValue+0x58>
    1214:	2b 81       	ldd	r18, Y+3	; 0x03
    1216:	3c 81       	ldd	r19, Y+4	; 0x04
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	2c f4       	brge	.+10     	; 0x1228 <DIO_SetPortValue+0x38>
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	61 f0       	breq	.+24     	; 0x123e <DIO_SetPortValue+0x4e>
    1226:	1e c0       	rjmp	.+60     	; 0x1264 <DIO_SetPortValue+0x74>
    1228:	2b 81       	ldd	r18, Y+3	; 0x03
    122a:	3c 81       	ldd	r19, Y+4	; 0x04
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	31 05       	cpc	r19, r1
    1230:	81 f0       	breq	.+32     	; 0x1252 <DIO_SetPortValue+0x62>
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	9c 81       	ldd	r25, Y+4	; 0x04
    1236:	83 30       	cpi	r24, 0x03	; 3
    1238:	91 05       	cpc	r25, r1
    123a:	81 f0       	breq	.+32     	; 0x125c <DIO_SetPortValue+0x6c>
    123c:	13 c0       	rjmp	.+38     	; 0x1264 <DIO_SetPortValue+0x74>
	{
		case DIO_PORTA: PORTA_REG = Value; break;
    123e:	eb e3       	ldi	r30, 0x3B	; 59
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	80 83       	st	Z, r24
    1246:	0e c0       	rjmp	.+28     	; 0x1264 <DIO_SetPortValue+0x74>
		case DIO_PORTB: PORTB_REG = Value; break;
    1248:	e8 e3       	ldi	r30, 0x38	; 56
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	80 83       	st	Z, r24
    1250:	09 c0       	rjmp	.+18     	; 0x1264 <DIO_SetPortValue+0x74>
		case DIO_PORTC: PORTC_REG = Value; break;
    1252:	e5 e3       	ldi	r30, 0x35	; 53
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	80 83       	st	Z, r24
    125a:	04 c0       	rjmp	.+8      	; 0x1264 <DIO_SetPortValue+0x74>
		case DIO_PORTD: PORTD_REG = Value; break;
    125c:	e2 e3       	ldi	r30, 0x32	; 50
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	80 83       	st	Z, r24
		default:
		break;
	}
}
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <LCD_Init>:
#include "LCD_INTERFACE.h"



void LCD_Init(void)
{
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	e8 97       	sbiw	r28, 0x38	; 56
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinDirection(RS,DIO_OUTPUT); //RS
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	41 e0       	ldi	r20, 0x01	; 1
    128c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_SetPinDirection>
	DIO_SetPinDirection(EN,DIO_OUTPUT); //EN
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	61 e0       	ldi	r22, 0x01	; 1
    1294:	41 e0       	ldi	r20, 0x01	; 1
    1296:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_SetPinDirection>

	DIO_SetPortDirection(LCD_PORT,0xFF);
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	6f ef       	ldi	r22, 0xFF	; 255
    129e:	0e 94 b7 08 	call	0x116e	; 0x116e <DIO_SetPortDirection>
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	a8 ec       	ldi	r26, 0xC8	; 200
    12a8:	b2 e4       	ldi	r27, 0x42	; 66
    12aa:	8d ab       	std	Y+53, r24	; 0x35
    12ac:	9e ab       	std	Y+54, r25	; 0x36
    12ae:	af ab       	std	Y+55, r26	; 0x37
    12b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b2:	6d a9       	ldd	r22, Y+53	; 0x35
    12b4:	7e a9       	ldd	r23, Y+54	; 0x36
    12b6:	8f a9       	ldd	r24, Y+55	; 0x37
    12b8:	98 ad       	ldd	r25, Y+56	; 0x38
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	4a ef       	ldi	r20, 0xFA	; 250
    12c0:	54 e4       	ldi	r21, 0x44	; 68
    12c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	89 ab       	std	Y+49, r24	; 0x31
    12cc:	9a ab       	std	Y+50, r25	; 0x32
    12ce:	ab ab       	std	Y+51, r26	; 0x33
    12d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12d2:	69 a9       	ldd	r22, Y+49	; 0x31
    12d4:	7a a9       	ldd	r23, Y+50	; 0x32
    12d6:	8b a9       	ldd	r24, Y+51	; 0x33
    12d8:	9c a9       	ldd	r25, Y+52	; 0x34
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	40 e8       	ldi	r20, 0x80	; 128
    12e0:	5f e3       	ldi	r21, 0x3F	; 63
    12e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12e6:	88 23       	and	r24, r24
    12e8:	2c f4       	brge	.+10     	; 0x12f4 <LCD_Init+0x82>
		__ticks = 1;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	98 ab       	std	Y+48, r25	; 0x30
    12f0:	8f a7       	std	Y+47, r24	; 0x2f
    12f2:	3f c0       	rjmp	.+126    	; 0x1372 <LCD_Init+0x100>
	else if (__tmp > 65535)
    12f4:	69 a9       	ldd	r22, Y+49	; 0x31
    12f6:	7a a9       	ldd	r23, Y+50	; 0x32
    12f8:	8b a9       	ldd	r24, Y+51	; 0x33
    12fa:	9c a9       	ldd	r25, Y+52	; 0x34
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	3f ef       	ldi	r19, 0xFF	; 255
    1300:	4f e7       	ldi	r20, 0x7F	; 127
    1302:	57 e4       	ldi	r21, 0x47	; 71
    1304:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1308:	18 16       	cp	r1, r24
    130a:	4c f5       	brge	.+82     	; 0x135e <LCD_Init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    130c:	6d a9       	ldd	r22, Y+53	; 0x35
    130e:	7e a9       	ldd	r23, Y+54	; 0x36
    1310:	8f a9       	ldd	r24, Y+55	; 0x37
    1312:	98 ad       	ldd	r25, Y+56	; 0x38
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e2       	ldi	r20, 0x20	; 32
    131a:	51 e4       	ldi	r21, 0x41	; 65
    131c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	bc 01       	movw	r22, r24
    1326:	cd 01       	movw	r24, r26
    1328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	98 ab       	std	Y+48, r25	; 0x30
    1332:	8f a7       	std	Y+47, r24	; 0x2f
    1334:	0f c0       	rjmp	.+30     	; 0x1354 <LCD_Init+0xe2>
    1336:	88 ec       	ldi	r24, 0xC8	; 200
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	9e a7       	std	Y+46, r25	; 0x2e
    133c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    133e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1340:	9e a5       	ldd	r25, Y+46	; 0x2e
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	f1 f7       	brne	.-4      	; 0x1342 <LCD_Init+0xd0>
    1346:	9e a7       	std	Y+46, r25	; 0x2e
    1348:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    134a:	8f a5       	ldd	r24, Y+47	; 0x2f
    134c:	98 a9       	ldd	r25, Y+48	; 0x30
    134e:	01 97       	sbiw	r24, 0x01	; 1
    1350:	98 ab       	std	Y+48, r25	; 0x30
    1352:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1354:	8f a5       	ldd	r24, Y+47	; 0x2f
    1356:	98 a9       	ldd	r25, Y+48	; 0x30
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	69 f7       	brne	.-38     	; 0x1336 <LCD_Init+0xc4>
    135c:	14 c0       	rjmp	.+40     	; 0x1386 <LCD_Init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    135e:	69 a9       	ldd	r22, Y+49	; 0x31
    1360:	7a a9       	ldd	r23, Y+50	; 0x32
    1362:	8b a9       	ldd	r24, Y+51	; 0x33
    1364:	9c a9       	ldd	r25, Y+52	; 0x34
    1366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	98 ab       	std	Y+48, r25	; 0x30
    1370:	8f a7       	std	Y+47, r24	; 0x2f
    1372:	8f a5       	ldd	r24, Y+47	; 0x2f
    1374:	98 a9       	ldd	r25, Y+48	; 0x30
    1376:	9c a7       	std	Y+44, r25	; 0x2c
    1378:	8b a7       	std	Y+43, r24	; 0x2b
    137a:	8b a5       	ldd	r24, Y+43	; 0x2b
    137c:	9c a5       	ldd	r25, Y+44	; 0x2c
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	f1 f7       	brne	.-4      	; 0x137e <LCD_Init+0x10c>
    1382:	9c a7       	std	Y+44, r25	; 0x2c
    1384:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);

	LCD_WriteCommand(0x38);
    1386:	88 e3       	ldi	r24, 0x38	; 56
    1388:	0e 94 2e 0b 	call	0x165c	; 0x165c <LCD_WriteCommand>
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	a0 e8       	ldi	r26, 0x80	; 128
    1392:	bf e3       	ldi	r27, 0x3F	; 63
    1394:	8f a3       	std	Y+39, r24	; 0x27
    1396:	98 a7       	std	Y+40, r25	; 0x28
    1398:	a9 a7       	std	Y+41, r26	; 0x29
    139a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    139c:	6f a1       	ldd	r22, Y+39	; 0x27
    139e:	78 a5       	ldd	r23, Y+40	; 0x28
    13a0:	89 a5       	ldd	r24, Y+41	; 0x29
    13a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	4a ef       	ldi	r20, 0xFA	; 250
    13aa:	54 e4       	ldi	r21, 0x44	; 68
    13ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	8b a3       	std	Y+35, r24	; 0x23
    13b6:	9c a3       	std	Y+36, r25	; 0x24
    13b8:	ad a3       	std	Y+37, r26	; 0x25
    13ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13bc:	6b a1       	ldd	r22, Y+35	; 0x23
    13be:	7c a1       	ldd	r23, Y+36	; 0x24
    13c0:	8d a1       	ldd	r24, Y+37	; 0x25
    13c2:	9e a1       	ldd	r25, Y+38	; 0x26
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	40 e8       	ldi	r20, 0x80	; 128
    13ca:	5f e3       	ldi	r21, 0x3F	; 63
    13cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13d0:	88 23       	and	r24, r24
    13d2:	2c f4       	brge	.+10     	; 0x13de <LCD_Init+0x16c>
		__ticks = 1;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	9a a3       	std	Y+34, r25	; 0x22
    13da:	89 a3       	std	Y+33, r24	; 0x21
    13dc:	3f c0       	rjmp	.+126    	; 0x145c <LCD_Init+0x1ea>
	else if (__tmp > 65535)
    13de:	6b a1       	ldd	r22, Y+35	; 0x23
    13e0:	7c a1       	ldd	r23, Y+36	; 0x24
    13e2:	8d a1       	ldd	r24, Y+37	; 0x25
    13e4:	9e a1       	ldd	r25, Y+38	; 0x26
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	3f ef       	ldi	r19, 0xFF	; 255
    13ea:	4f e7       	ldi	r20, 0x7F	; 127
    13ec:	57 e4       	ldi	r21, 0x47	; 71
    13ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13f2:	18 16       	cp	r1, r24
    13f4:	4c f5       	brge	.+82     	; 0x1448 <LCD_Init+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f6:	6f a1       	ldd	r22, Y+39	; 0x27
    13f8:	78 a5       	ldd	r23, Y+40	; 0x28
    13fa:	89 a5       	ldd	r24, Y+41	; 0x29
    13fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	40 e2       	ldi	r20, 0x20	; 32
    1404:	51 e4       	ldi	r21, 0x41	; 65
    1406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	bc 01       	movw	r22, r24
    1410:	cd 01       	movw	r24, r26
    1412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	9a a3       	std	Y+34, r25	; 0x22
    141c:	89 a3       	std	Y+33, r24	; 0x21
    141e:	0f c0       	rjmp	.+30     	; 0x143e <LCD_Init+0x1cc>
    1420:	88 ec       	ldi	r24, 0xC8	; 200
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	98 a3       	std	Y+32, r25	; 0x20
    1426:	8f 8f       	std	Y+31, r24	; 0x1f
    1428:	8f 8d       	ldd	r24, Y+31	; 0x1f
    142a:	98 a1       	ldd	r25, Y+32	; 0x20
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	f1 f7       	brne	.-4      	; 0x142c <LCD_Init+0x1ba>
    1430:	98 a3       	std	Y+32, r25	; 0x20
    1432:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1434:	89 a1       	ldd	r24, Y+33	; 0x21
    1436:	9a a1       	ldd	r25, Y+34	; 0x22
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	9a a3       	std	Y+34, r25	; 0x22
    143c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    143e:	89 a1       	ldd	r24, Y+33	; 0x21
    1440:	9a a1       	ldd	r25, Y+34	; 0x22
    1442:	00 97       	sbiw	r24, 0x00	; 0
    1444:	69 f7       	brne	.-38     	; 0x1420 <LCD_Init+0x1ae>
    1446:	14 c0       	rjmp	.+40     	; 0x1470 <LCD_Init+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1448:	6b a1       	ldd	r22, Y+35	; 0x23
    144a:	7c a1       	ldd	r23, Y+36	; 0x24
    144c:	8d a1       	ldd	r24, Y+37	; 0x25
    144e:	9e a1       	ldd	r25, Y+38	; 0x26
    1450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	9a a3       	std	Y+34, r25	; 0x22
    145a:	89 a3       	std	Y+33, r24	; 0x21
    145c:	89 a1       	ldd	r24, Y+33	; 0x21
    145e:	9a a1       	ldd	r25, Y+34	; 0x22
    1460:	9e 8f       	std	Y+30, r25	; 0x1e
    1462:	8d 8f       	std	Y+29, r24	; 0x1d
    1464:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1466:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	f1 f7       	brne	.-4      	; 0x1468 <LCD_Init+0x1f6>
    146c:	9e 8f       	std	Y+30, r25	; 0x1e
    146e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_WriteCommand(0x0C);
    1470:	8c e0       	ldi	r24, 0x0C	; 12
    1472:	0e 94 2e 0b 	call	0x165c	; 0x165c <LCD_WriteCommand>
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	a0 e8       	ldi	r26, 0x80	; 128
    147c:	bf e3       	ldi	r27, 0x3F	; 63
    147e:	89 8f       	std	Y+25, r24	; 0x19
    1480:	9a 8f       	std	Y+26, r25	; 0x1a
    1482:	ab 8f       	std	Y+27, r26	; 0x1b
    1484:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1486:	69 8d       	ldd	r22, Y+25	; 0x19
    1488:	7a 8d       	ldd	r23, Y+26	; 0x1a
    148a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    148c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	4a ef       	ldi	r20, 0xFA	; 250
    1494:	54 e4       	ldi	r21, 0x44	; 68
    1496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	8d 8b       	std	Y+21, r24	; 0x15
    14a0:	9e 8b       	std	Y+22, r25	; 0x16
    14a2:	af 8b       	std	Y+23, r26	; 0x17
    14a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14a6:	6d 89       	ldd	r22, Y+21	; 0x15
    14a8:	7e 89       	ldd	r23, Y+22	; 0x16
    14aa:	8f 89       	ldd	r24, Y+23	; 0x17
    14ac:	98 8d       	ldd	r25, Y+24	; 0x18
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	40 e8       	ldi	r20, 0x80	; 128
    14b4:	5f e3       	ldi	r21, 0x3F	; 63
    14b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ba:	88 23       	and	r24, r24
    14bc:	2c f4       	brge	.+10     	; 0x14c8 <LCD_Init+0x256>
		__ticks = 1;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	9c 8b       	std	Y+20, r25	; 0x14
    14c4:	8b 8b       	std	Y+19, r24	; 0x13
    14c6:	3f c0       	rjmp	.+126    	; 0x1546 <LCD_Init+0x2d4>
	else if (__tmp > 65535)
    14c8:	6d 89       	ldd	r22, Y+21	; 0x15
    14ca:	7e 89       	ldd	r23, Y+22	; 0x16
    14cc:	8f 89       	ldd	r24, Y+23	; 0x17
    14ce:	98 8d       	ldd	r25, Y+24	; 0x18
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	3f ef       	ldi	r19, 0xFF	; 255
    14d4:	4f e7       	ldi	r20, 0x7F	; 127
    14d6:	57 e4       	ldi	r21, 0x47	; 71
    14d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14dc:	18 16       	cp	r1, r24
    14de:	4c f5       	brge	.+82     	; 0x1532 <LCD_Init+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e0:	69 8d       	ldd	r22, Y+25	; 0x19
    14e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e2       	ldi	r20, 0x20	; 32
    14ee:	51 e4       	ldi	r21, 0x41	; 65
    14f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	bc 01       	movw	r22, r24
    14fa:	cd 01       	movw	r24, r26
    14fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	9c 8b       	std	Y+20, r25	; 0x14
    1506:	8b 8b       	std	Y+19, r24	; 0x13
    1508:	0f c0       	rjmp	.+30     	; 0x1528 <LCD_Init+0x2b6>
    150a:	88 ec       	ldi	r24, 0xC8	; 200
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	9a 8b       	std	Y+18, r25	; 0x12
    1510:	89 8b       	std	Y+17, r24	; 0x11
    1512:	89 89       	ldd	r24, Y+17	; 0x11
    1514:	9a 89       	ldd	r25, Y+18	; 0x12
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	f1 f7       	brne	.-4      	; 0x1516 <LCD_Init+0x2a4>
    151a:	9a 8b       	std	Y+18, r25	; 0x12
    151c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    151e:	8b 89       	ldd	r24, Y+19	; 0x13
    1520:	9c 89       	ldd	r25, Y+20	; 0x14
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	9c 8b       	std	Y+20, r25	; 0x14
    1526:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1528:	8b 89       	ldd	r24, Y+19	; 0x13
    152a:	9c 89       	ldd	r25, Y+20	; 0x14
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	69 f7       	brne	.-38     	; 0x150a <LCD_Init+0x298>
    1530:	14 c0       	rjmp	.+40     	; 0x155a <LCD_Init+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1532:	6d 89       	ldd	r22, Y+21	; 0x15
    1534:	7e 89       	ldd	r23, Y+22	; 0x16
    1536:	8f 89       	ldd	r24, Y+23	; 0x17
    1538:	98 8d       	ldd	r25, Y+24	; 0x18
    153a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	9c 8b       	std	Y+20, r25	; 0x14
    1544:	8b 8b       	std	Y+19, r24	; 0x13
    1546:	8b 89       	ldd	r24, Y+19	; 0x13
    1548:	9c 89       	ldd	r25, Y+20	; 0x14
    154a:	98 8b       	std	Y+16, r25	; 0x10
    154c:	8f 87       	std	Y+15, r24	; 0x0f
    154e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1550:	98 89       	ldd	r25, Y+16	; 0x10
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <LCD_Init+0x2e0>
    1556:	98 8b       	std	Y+16, r25	; 0x10
    1558:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_WriteCommand(0x01);
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	0e 94 2e 0b 	call	0x165c	; 0x165c <LCD_WriteCommand>
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	a0 e0       	ldi	r26, 0x00	; 0
    1566:	b0 e4       	ldi	r27, 0x40	; 64
    1568:	8b 87       	std	Y+11, r24	; 0x0b
    156a:	9c 87       	std	Y+12, r25	; 0x0c
    156c:	ad 87       	std	Y+13, r26	; 0x0d
    156e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1570:	6b 85       	ldd	r22, Y+11	; 0x0b
    1572:	7c 85       	ldd	r23, Y+12	; 0x0c
    1574:	8d 85       	ldd	r24, Y+13	; 0x0d
    1576:	9e 85       	ldd	r25, Y+14	; 0x0e
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	4a ef       	ldi	r20, 0xFA	; 250
    157e:	54 e4       	ldi	r21, 0x44	; 68
    1580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	8f 83       	std	Y+7, r24	; 0x07
    158a:	98 87       	std	Y+8, r25	; 0x08
    158c:	a9 87       	std	Y+9, r26	; 0x09
    158e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1590:	6f 81       	ldd	r22, Y+7	; 0x07
    1592:	78 85       	ldd	r23, Y+8	; 0x08
    1594:	89 85       	ldd	r24, Y+9	; 0x09
    1596:	9a 85       	ldd	r25, Y+10	; 0x0a
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e8       	ldi	r20, 0x80	; 128
    159e:	5f e3       	ldi	r21, 0x3F	; 63
    15a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15a4:	88 23       	and	r24, r24
    15a6:	2c f4       	brge	.+10     	; 0x15b2 <LCD_Init+0x340>
		__ticks = 1;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	9e 83       	std	Y+6, r25	; 0x06
    15ae:	8d 83       	std	Y+5, r24	; 0x05
    15b0:	3f c0       	rjmp	.+126    	; 0x1630 <LCD_Init+0x3be>
	else if (__tmp > 65535)
    15b2:	6f 81       	ldd	r22, Y+7	; 0x07
    15b4:	78 85       	ldd	r23, Y+8	; 0x08
    15b6:	89 85       	ldd	r24, Y+9	; 0x09
    15b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	3f ef       	ldi	r19, 0xFF	; 255
    15be:	4f e7       	ldi	r20, 0x7F	; 127
    15c0:	57 e4       	ldi	r21, 0x47	; 71
    15c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15c6:	18 16       	cp	r1, r24
    15c8:	4c f5       	brge	.+82     	; 0x161c <LCD_Init+0x3aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    15cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	40 e2       	ldi	r20, 0x20	; 32
    15d8:	51 e4       	ldi	r21, 0x41	; 65
    15da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	bc 01       	movw	r22, r24
    15e4:	cd 01       	movw	r24, r26
    15e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	9e 83       	std	Y+6, r25	; 0x06
    15f0:	8d 83       	std	Y+5, r24	; 0x05
    15f2:	0f c0       	rjmp	.+30     	; 0x1612 <LCD_Init+0x3a0>
    15f4:	88 ec       	ldi	r24, 0xC8	; 200
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	9c 83       	std	Y+4, r25	; 0x04
    15fa:	8b 83       	std	Y+3, r24	; 0x03
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	f1 f7       	brne	.-4      	; 0x1600 <LCD_Init+0x38e>
    1604:	9c 83       	std	Y+4, r25	; 0x04
    1606:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1608:	8d 81       	ldd	r24, Y+5	; 0x05
    160a:	9e 81       	ldd	r25, Y+6	; 0x06
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	9e 83       	std	Y+6, r25	; 0x06
    1610:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
    1614:	9e 81       	ldd	r25, Y+6	; 0x06
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	69 f7       	brne	.-38     	; 0x15f4 <LCD_Init+0x382>
    161a:	14 c0       	rjmp	.+40     	; 0x1644 <LCD_Init+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161c:	6f 81       	ldd	r22, Y+7	; 0x07
    161e:	78 85       	ldd	r23, Y+8	; 0x08
    1620:	89 85       	ldd	r24, Y+9	; 0x09
    1622:	9a 85       	ldd	r25, Y+10	; 0x0a
    1624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	9e 83       	std	Y+6, r25	; 0x06
    162e:	8d 83       	std	Y+5, r24	; 0x05
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
    1632:	9e 81       	ldd	r25, Y+6	; 0x06
    1634:	9a 83       	std	Y+2, r25	; 0x02
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	9a 81       	ldd	r25, Y+2	; 0x02
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	f1 f7       	brne	.-4      	; 0x163c <LCD_Init+0x3ca>
    1640:	9a 83       	std	Y+2, r25	; 0x02
    1642:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_WriteCommand(0x06);
    1644:	86 e0       	ldi	r24, 0x06	; 6
    1646:	0e 94 2e 0b 	call	0x165c	; 0x165c <LCD_WriteCommand>
}
    164a:	e8 96       	adiw	r28, 0x38	; 56
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <LCD_WriteCommand>:

void LCD_WriteCommand(u8 Command)
{
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	6d 97       	sbiw	r28, 0x1d	; 29
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	f8 94       	cli
    166a:	de bf       	out	0x3e, r29	; 62
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	cd bf       	out	0x3d, r28	; 61
    1670:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Rs = 0*/
	DIO_SetPinValue(RS,DIO_LOW);
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	0e 94 4c 07 	call	0xe98	; 0xe98 <DIO_SetPinValue>
	/* Rw = 0*/

	DIO_SetPortValue(LCD_PORT,Command);
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1680:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_SetPortValue>
	/*Set Enable */
	DIO_SetPinValue(EN,DIO_HIGH); //EN
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	61 e0       	ldi	r22, 0x01	; 1
    1688:	41 e0       	ldi	r20, 0x01	; 1
    168a:	0e 94 4c 07 	call	0xe98	; 0xe98 <DIO_SetPinValue>
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	a0 e8       	ldi	r26, 0x80	; 128
    1694:	bf e3       	ldi	r27, 0x3F	; 63
    1696:	89 8f       	std	Y+25, r24	; 0x19
    1698:	9a 8f       	std	Y+26, r25	; 0x1a
    169a:	ab 8f       	std	Y+27, r26	; 0x1b
    169c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169e:	69 8d       	ldd	r22, Y+25	; 0x19
    16a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	4a ef       	ldi	r20, 0xFA	; 250
    16ac:	54 e4       	ldi	r21, 0x44	; 68
    16ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	8d 8b       	std	Y+21, r24	; 0x15
    16b8:	9e 8b       	std	Y+22, r25	; 0x16
    16ba:	af 8b       	std	Y+23, r26	; 0x17
    16bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16be:	6d 89       	ldd	r22, Y+21	; 0x15
    16c0:	7e 89       	ldd	r23, Y+22	; 0x16
    16c2:	8f 89       	ldd	r24, Y+23	; 0x17
    16c4:	98 8d       	ldd	r25, Y+24	; 0x18
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e8       	ldi	r20, 0x80	; 128
    16cc:	5f e3       	ldi	r21, 0x3F	; 63
    16ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16d2:	88 23       	and	r24, r24
    16d4:	2c f4       	brge	.+10     	; 0x16e0 <LCD_WriteCommand+0x84>
		__ticks = 1;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	9c 8b       	std	Y+20, r25	; 0x14
    16dc:	8b 8b       	std	Y+19, r24	; 0x13
    16de:	3f c0       	rjmp	.+126    	; 0x175e <LCD_WriteCommand+0x102>
	else if (__tmp > 65535)
    16e0:	6d 89       	ldd	r22, Y+21	; 0x15
    16e2:	7e 89       	ldd	r23, Y+22	; 0x16
    16e4:	8f 89       	ldd	r24, Y+23	; 0x17
    16e6:	98 8d       	ldd	r25, Y+24	; 0x18
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	3f ef       	ldi	r19, 0xFF	; 255
    16ec:	4f e7       	ldi	r20, 0x7F	; 127
    16ee:	57 e4       	ldi	r21, 0x47	; 71
    16f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16f4:	18 16       	cp	r1, r24
    16f6:	4c f5       	brge	.+82     	; 0x174a <LCD_WriteCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f8:	69 8d       	ldd	r22, Y+25	; 0x19
    16fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e2       	ldi	r20, 0x20	; 32
    1706:	51 e4       	ldi	r21, 0x41	; 65
    1708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	bc 01       	movw	r22, r24
    1712:	cd 01       	movw	r24, r26
    1714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	9c 8b       	std	Y+20, r25	; 0x14
    171e:	8b 8b       	std	Y+19, r24	; 0x13
    1720:	0f c0       	rjmp	.+30     	; 0x1740 <LCD_WriteCommand+0xe4>
    1722:	88 ec       	ldi	r24, 0xC8	; 200
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9a 8b       	std	Y+18, r25	; 0x12
    1728:	89 8b       	std	Y+17, r24	; 0x11
    172a:	89 89       	ldd	r24, Y+17	; 0x11
    172c:	9a 89       	ldd	r25, Y+18	; 0x12
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	f1 f7       	brne	.-4      	; 0x172e <LCD_WriteCommand+0xd2>
    1732:	9a 8b       	std	Y+18, r25	; 0x12
    1734:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1736:	8b 89       	ldd	r24, Y+19	; 0x13
    1738:	9c 89       	ldd	r25, Y+20	; 0x14
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	9c 8b       	std	Y+20, r25	; 0x14
    173e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1740:	8b 89       	ldd	r24, Y+19	; 0x13
    1742:	9c 89       	ldd	r25, Y+20	; 0x14
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	69 f7       	brne	.-38     	; 0x1722 <LCD_WriteCommand+0xc6>
    1748:	14 c0       	rjmp	.+40     	; 0x1772 <LCD_WriteCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174a:	6d 89       	ldd	r22, Y+21	; 0x15
    174c:	7e 89       	ldd	r23, Y+22	; 0x16
    174e:	8f 89       	ldd	r24, Y+23	; 0x17
    1750:	98 8d       	ldd	r25, Y+24	; 0x18
    1752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	9c 8b       	std	Y+20, r25	; 0x14
    175c:	8b 8b       	std	Y+19, r24	; 0x13
    175e:	8b 89       	ldd	r24, Y+19	; 0x13
    1760:	9c 89       	ldd	r25, Y+20	; 0x14
    1762:	98 8b       	std	Y+16, r25	; 0x10
    1764:	8f 87       	std	Y+15, r24	; 0x0f
    1766:	8f 85       	ldd	r24, Y+15	; 0x0f
    1768:	98 89       	ldd	r25, Y+16	; 0x10
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <LCD_WriteCommand+0x10e>
    176e:	98 8b       	std	Y+16, r25	; 0x10
    1770:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_SetPinValue(EN,DIO_LOW);
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	61 e0       	ldi	r22, 0x01	; 1
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	0e 94 4c 07 	call	0xe98	; 0xe98 <DIO_SetPinValue>
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	a0 ea       	ldi	r26, 0xA0	; 160
    1782:	b0 e4       	ldi	r27, 0x40	; 64
    1784:	8b 87       	std	Y+11, r24	; 0x0b
    1786:	9c 87       	std	Y+12, r25	; 0x0c
    1788:	ad 87       	std	Y+13, r26	; 0x0d
    178a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178c:	6b 85       	ldd	r22, Y+11	; 0x0b
    178e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1790:	8d 85       	ldd	r24, Y+13	; 0x0d
    1792:	9e 85       	ldd	r25, Y+14	; 0x0e
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	4a ef       	ldi	r20, 0xFA	; 250
    179a:	54 e4       	ldi	r21, 0x44	; 68
    179c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	8f 83       	std	Y+7, r24	; 0x07
    17a6:	98 87       	std	Y+8, r25	; 0x08
    17a8:	a9 87       	std	Y+9, r26	; 0x09
    17aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17ac:	6f 81       	ldd	r22, Y+7	; 0x07
    17ae:	78 85       	ldd	r23, Y+8	; 0x08
    17b0:	89 85       	ldd	r24, Y+9	; 0x09
    17b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e8       	ldi	r20, 0x80	; 128
    17ba:	5f e3       	ldi	r21, 0x3F	; 63
    17bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c0:	88 23       	and	r24, r24
    17c2:	2c f4       	brge	.+10     	; 0x17ce <LCD_WriteCommand+0x172>
		__ticks = 1;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	9e 83       	std	Y+6, r25	; 0x06
    17ca:	8d 83       	std	Y+5, r24	; 0x05
    17cc:	3f c0       	rjmp	.+126    	; 0x184c <LCD_WriteCommand+0x1f0>
	else if (__tmp > 65535)
    17ce:	6f 81       	ldd	r22, Y+7	; 0x07
    17d0:	78 85       	ldd	r23, Y+8	; 0x08
    17d2:	89 85       	ldd	r24, Y+9	; 0x09
    17d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	3f ef       	ldi	r19, 0xFF	; 255
    17da:	4f e7       	ldi	r20, 0x7F	; 127
    17dc:	57 e4       	ldi	r21, 0x47	; 71
    17de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e2:	18 16       	cp	r1, r24
    17e4:	4c f5       	brge	.+82     	; 0x1838 <LCD_WriteCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 e2       	ldi	r20, 0x20	; 32
    17f4:	51 e4       	ldi	r21, 0x41	; 65
    17f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	bc 01       	movw	r22, r24
    1800:	cd 01       	movw	r24, r26
    1802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	9e 83       	std	Y+6, r25	; 0x06
    180c:	8d 83       	std	Y+5, r24	; 0x05
    180e:	0f c0       	rjmp	.+30     	; 0x182e <LCD_WriteCommand+0x1d2>
    1810:	88 ec       	ldi	r24, 0xC8	; 200
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	9c 83       	std	Y+4, r25	; 0x04
    1816:	8b 83       	std	Y+3, r24	; 0x03
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	9c 81       	ldd	r25, Y+4	; 0x04
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <LCD_WriteCommand+0x1c0>
    1820:	9c 83       	std	Y+4, r25	; 0x04
    1822:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1824:	8d 81       	ldd	r24, Y+5	; 0x05
    1826:	9e 81       	ldd	r25, Y+6	; 0x06
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	9e 83       	std	Y+6, r25	; 0x06
    182c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182e:	8d 81       	ldd	r24, Y+5	; 0x05
    1830:	9e 81       	ldd	r25, Y+6	; 0x06
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	69 f7       	brne	.-38     	; 0x1810 <LCD_WriteCommand+0x1b4>
    1836:	14 c0       	rjmp	.+40     	; 0x1860 <LCD_WriteCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1838:	6f 81       	ldd	r22, Y+7	; 0x07
    183a:	78 85       	ldd	r23, Y+8	; 0x08
    183c:	89 85       	ldd	r24, Y+9	; 0x09
    183e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	9e 83       	std	Y+6, r25	; 0x06
    184a:	8d 83       	std	Y+5, r24	; 0x05
    184c:	8d 81       	ldd	r24, Y+5	; 0x05
    184e:	9e 81       	ldd	r25, Y+6	; 0x06
    1850:	9a 83       	std	Y+2, r25	; 0x02
    1852:	89 83       	std	Y+1, r24	; 0x01
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	9a 81       	ldd	r25, Y+2	; 0x02
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <LCD_WriteCommand+0x1fc>
    185c:	9a 83       	std	Y+2, r25	; 0x02
    185e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    1860:	6d 96       	adiw	r28, 0x1d	; 29
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <LCD_WriteData>:
void LCD_WriteData(u8 Data)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	6d 97       	sbiw	r28, 0x1d	; 29
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Rs = 0*/
	DIO_SetPinValue(RS,DIO_HIGH);
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	60 e0       	ldi	r22, 0x00	; 0
    188c:	41 e0       	ldi	r20, 0x01	; 1
    188e:	0e 94 4c 07 	call	0xe98	; 0xe98 <DIO_SetPinValue>
	/* Rw = 0*/

	DIO_SetPortValue(LCD_PORT,Data);
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1896:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_SetPortValue>
	/*Set Enable */
	DIO_SetPinValue(EN,DIO_HIGH); //EN
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	61 e0       	ldi	r22, 0x01	; 1
    189e:	41 e0       	ldi	r20, 0x01	; 1
    18a0:	0e 94 4c 07 	call	0xe98	; 0xe98 <DIO_SetPinValue>
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	a0 e8       	ldi	r26, 0x80	; 128
    18aa:	bf e3       	ldi	r27, 0x3F	; 63
    18ac:	89 8f       	std	Y+25, r24	; 0x19
    18ae:	9a 8f       	std	Y+26, r25	; 0x1a
    18b0:	ab 8f       	std	Y+27, r26	; 0x1b
    18b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b4:	69 8d       	ldd	r22, Y+25	; 0x19
    18b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	4a ef       	ldi	r20, 0xFA	; 250
    18c2:	54 e4       	ldi	r21, 0x44	; 68
    18c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	8d 8b       	std	Y+21, r24	; 0x15
    18ce:	9e 8b       	std	Y+22, r25	; 0x16
    18d0:	af 8b       	std	Y+23, r26	; 0x17
    18d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18d4:	6d 89       	ldd	r22, Y+21	; 0x15
    18d6:	7e 89       	ldd	r23, Y+22	; 0x16
    18d8:	8f 89       	ldd	r24, Y+23	; 0x17
    18da:	98 8d       	ldd	r25, Y+24	; 0x18
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	40 e8       	ldi	r20, 0x80	; 128
    18e2:	5f e3       	ldi	r21, 0x3F	; 63
    18e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18e8:	88 23       	and	r24, r24
    18ea:	2c f4       	brge	.+10     	; 0x18f6 <LCD_WriteData+0x84>
		__ticks = 1;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	9c 8b       	std	Y+20, r25	; 0x14
    18f2:	8b 8b       	std	Y+19, r24	; 0x13
    18f4:	3f c0       	rjmp	.+126    	; 0x1974 <LCD_WriteData+0x102>
	else if (__tmp > 65535)
    18f6:	6d 89       	ldd	r22, Y+21	; 0x15
    18f8:	7e 89       	ldd	r23, Y+22	; 0x16
    18fa:	8f 89       	ldd	r24, Y+23	; 0x17
    18fc:	98 8d       	ldd	r25, Y+24	; 0x18
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	3f ef       	ldi	r19, 0xFF	; 255
    1902:	4f e7       	ldi	r20, 0x7F	; 127
    1904:	57 e4       	ldi	r21, 0x47	; 71
    1906:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    190a:	18 16       	cp	r1, r24
    190c:	4c f5       	brge	.+82     	; 0x1960 <LCD_WriteData+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190e:	69 8d       	ldd	r22, Y+25	; 0x19
    1910:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1912:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1914:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e2       	ldi	r20, 0x20	; 32
    191c:	51 e4       	ldi	r21, 0x41	; 65
    191e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	bc 01       	movw	r22, r24
    1928:	cd 01       	movw	r24, r26
    192a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	9c 8b       	std	Y+20, r25	; 0x14
    1934:	8b 8b       	std	Y+19, r24	; 0x13
    1936:	0f c0       	rjmp	.+30     	; 0x1956 <LCD_WriteData+0xe4>
    1938:	88 ec       	ldi	r24, 0xC8	; 200
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	9a 8b       	std	Y+18, r25	; 0x12
    193e:	89 8b       	std	Y+17, r24	; 0x11
    1940:	89 89       	ldd	r24, Y+17	; 0x11
    1942:	9a 89       	ldd	r25, Y+18	; 0x12
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <LCD_WriteData+0xd2>
    1948:	9a 8b       	std	Y+18, r25	; 0x12
    194a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194c:	8b 89       	ldd	r24, Y+19	; 0x13
    194e:	9c 89       	ldd	r25, Y+20	; 0x14
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	9c 8b       	std	Y+20, r25	; 0x14
    1954:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1956:	8b 89       	ldd	r24, Y+19	; 0x13
    1958:	9c 89       	ldd	r25, Y+20	; 0x14
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	69 f7       	brne	.-38     	; 0x1938 <LCD_WriteData+0xc6>
    195e:	14 c0       	rjmp	.+40     	; 0x1988 <LCD_WriteData+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1960:	6d 89       	ldd	r22, Y+21	; 0x15
    1962:	7e 89       	ldd	r23, Y+22	; 0x16
    1964:	8f 89       	ldd	r24, Y+23	; 0x17
    1966:	98 8d       	ldd	r25, Y+24	; 0x18
    1968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	9c 8b       	std	Y+20, r25	; 0x14
    1972:	8b 8b       	std	Y+19, r24	; 0x13
    1974:	8b 89       	ldd	r24, Y+19	; 0x13
    1976:	9c 89       	ldd	r25, Y+20	; 0x14
    1978:	98 8b       	std	Y+16, r25	; 0x10
    197a:	8f 87       	std	Y+15, r24	; 0x0f
    197c:	8f 85       	ldd	r24, Y+15	; 0x0f
    197e:	98 89       	ldd	r25, Y+16	; 0x10
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	f1 f7       	brne	.-4      	; 0x1980 <LCD_WriteData+0x10e>
    1984:	98 8b       	std	Y+16, r25	; 0x10
    1986:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_SetPinValue(EN,DIO_LOW);
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	61 e0       	ldi	r22, 0x01	; 1
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	0e 94 4c 07 	call	0xe98	; 0xe98 <DIO_SetPinValue>
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	a0 ea       	ldi	r26, 0xA0	; 160
    1998:	b0 e4       	ldi	r27, 0x40	; 64
    199a:	8b 87       	std	Y+11, r24	; 0x0b
    199c:	9c 87       	std	Y+12, r25	; 0x0c
    199e:	ad 87       	std	Y+13, r26	; 0x0d
    19a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	4a ef       	ldi	r20, 0xFA	; 250
    19b0:	54 e4       	ldi	r21, 0x44	; 68
    19b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	8f 83       	std	Y+7, r24	; 0x07
    19bc:	98 87       	std	Y+8, r25	; 0x08
    19be:	a9 87       	std	Y+9, r26	; 0x09
    19c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19c2:	6f 81       	ldd	r22, Y+7	; 0x07
    19c4:	78 85       	ldd	r23, Y+8	; 0x08
    19c6:	89 85       	ldd	r24, Y+9	; 0x09
    19c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e8       	ldi	r20, 0x80	; 128
    19d0:	5f e3       	ldi	r21, 0x3F	; 63
    19d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19d6:	88 23       	and	r24, r24
    19d8:	2c f4       	brge	.+10     	; 0x19e4 <LCD_WriteData+0x172>
		__ticks = 1;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	9e 83       	std	Y+6, r25	; 0x06
    19e0:	8d 83       	std	Y+5, r24	; 0x05
    19e2:	3f c0       	rjmp	.+126    	; 0x1a62 <LCD_WriteData+0x1f0>
	else if (__tmp > 65535)
    19e4:	6f 81       	ldd	r22, Y+7	; 0x07
    19e6:	78 85       	ldd	r23, Y+8	; 0x08
    19e8:	89 85       	ldd	r24, Y+9	; 0x09
    19ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	3f ef       	ldi	r19, 0xFF	; 255
    19f0:	4f e7       	ldi	r20, 0x7F	; 127
    19f2:	57 e4       	ldi	r21, 0x47	; 71
    19f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19f8:	18 16       	cp	r1, r24
    19fa:	4c f5       	brge	.+82     	; 0x1a4e <LCD_WriteData+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e2       	ldi	r20, 0x20	; 32
    1a0a:	51 e4       	ldi	r21, 0x41	; 65
    1a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	bc 01       	movw	r22, r24
    1a16:	cd 01       	movw	r24, r26
    1a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	9e 83       	std	Y+6, r25	; 0x06
    1a22:	8d 83       	std	Y+5, r24	; 0x05
    1a24:	0f c0       	rjmp	.+30     	; 0x1a44 <LCD_WriteData+0x1d2>
    1a26:	88 ec       	ldi	r24, 0xC8	; 200
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	9c 83       	std	Y+4, r25	; 0x04
    1a2c:	8b 83       	std	Y+3, r24	; 0x03
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	9c 81       	ldd	r25, Y+4	; 0x04
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	f1 f7       	brne	.-4      	; 0x1a32 <LCD_WriteData+0x1c0>
    1a36:	9c 83       	std	Y+4, r25	; 0x04
    1a38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	9e 83       	std	Y+6, r25	; 0x06
    1a42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a44:	8d 81       	ldd	r24, Y+5	; 0x05
    1a46:	9e 81       	ldd	r25, Y+6	; 0x06
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	69 f7       	brne	.-38     	; 0x1a26 <LCD_WriteData+0x1b4>
    1a4c:	14 c0       	rjmp	.+40     	; 0x1a76 <LCD_WriteData+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a50:	78 85       	ldd	r23, Y+8	; 0x08
    1a52:	89 85       	ldd	r24, Y+9	; 0x09
    1a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	9e 83       	std	Y+6, r25	; 0x06
    1a60:	8d 83       	std	Y+5, r24	; 0x05
    1a62:	8d 81       	ldd	r24, Y+5	; 0x05
    1a64:	9e 81       	ldd	r25, Y+6	; 0x06
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <LCD_WriteData+0x1fc>
    1a72:	9a 83       	std	Y+2, r25	; 0x02
    1a74:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    1a76:	6d 96       	adiw	r28, 0x1d	; 29
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	de bf       	out	0x3e, r29	; 62
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	cd bf       	out	0x3d, r28	; 61
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <LCD_WriteString>:




void LCD_WriteString(char *Ptr)
{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <LCD_WriteString+0x6>
    1a8e:	0f 92       	push	r0
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	9b 83       	std	Y+3, r25	; 0x03
    1a96:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1a98:	19 82       	std	Y+1, r1	; 0x01
    1a9a:	0e c0       	rjmp	.+28     	; 0x1ab8 <LCD_WriteString+0x30>
	while(Ptr[i] != '\0')
	{
		LCD_WriteData(Ptr[i]);
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	e2 0f       	add	r30, r18
    1aaa:	f3 1f       	adc	r31, r19
    1aac:	80 81       	ld	r24, Z
    1aae:	0e 94 39 0c 	call	0x1872	; 0x1872 <LCD_WriteData>
		i++;
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	8f 5f       	subi	r24, 0xFF	; 255
    1ab6:	89 83       	std	Y+1, r24	; 0x01


void LCD_WriteString(char *Ptr)
{
	u8 i = 0;
	while(Ptr[i] != '\0')
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	e2 0f       	add	r30, r18
    1ac6:	f3 1f       	adc	r31, r19
    1ac8:	80 81       	ld	r24, Z
    1aca:	88 23       	and	r24, r24
    1acc:	39 f7       	brne	.-50     	; 0x1a9c <LCD_WriteString+0x14>
	{
		LCD_WriteData(Ptr[i]);
		i++;
	}
}
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <LCD_GoToXY>:




void LCD_GoToXY(u8 X_Pos , u8 Y_Pos)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <LCD_GoToXY+0x6>
    1ae0:	0f 92       	push	r0
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	8a 83       	std	Y+2, r24	; 0x02
    1ae8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Adress;

	if (X_Pos==0)
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	88 23       	and	r24, r24
    1aee:	19 f4       	brne	.+6      	; 0x1af6 <LCD_GoToXY+0x1c>
	{
		Local_Adress=Y_Pos;
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	06 c0       	rjmp	.+12     	; 0x1b02 <LCD_GoToXY+0x28>

	}

	else if (X_Pos==1)
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	81 30       	cpi	r24, 0x01	; 1
    1afa:	19 f4       	brne	.+6      	; 0x1b02 <LCD_GoToXY+0x28>
	{
		Local_Adress = Y_Pos+ 0x40 ;
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	80 5c       	subi	r24, 0xC0	; 192
    1b00:	89 83       	std	Y+1, r24	; 0x01
	}

	/* set the calculated address into DDRAM */
	LCD_WriteCommand(Local_Adress+128);
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	80 58       	subi	r24, 0x80	; 128
    1b06:	0e 94 2e 0b 	call	0x165c	; 0x165c <LCD_WriteCommand>


}
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <LCD_voidDisplayIntegar>:


void LCD_voidDisplayIntegar(u32 COPY_u32Number)
{
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	64 97       	sbiw	r28, 0x14	; 20
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	69 8b       	std	Y+17, r22	; 0x11
    1b2c:	7a 8b       	std	Y+18, r23	; 0x12
    1b2e:	8b 8b       	std	Y+19, r24	; 0x13
    1b30:	9c 8b       	std	Y+20, r25	; 0x14
	u8 LOCAL_u8Num[10]={0};
    1b32:	8a e0       	ldi	r24, 0x0A	; 10
    1b34:	fe 01       	movw	r30, r28
    1b36:	37 96       	adiw	r30, 0x07	; 7
    1b38:	df 01       	movw	r26, r30
    1b3a:	98 2f       	mov	r25, r24
    1b3c:	1d 92       	st	X+, r1
    1b3e:	9a 95       	dec	r25
    1b40:	e9 f7       	brne	.-6      	; 0x1b3c <LCD_voidDisplayIntegar+0x26>
	s16 i=0;
    1b42:	1e 82       	std	Y+6, r1	; 0x06
    1b44:	1d 82       	std	Y+5, r1	; 0x05
	u32 LOCAL_u32Remainder;
	if(COPY_u32Number==0)
    1b46:	89 89       	ldd	r24, Y+17	; 0x11
    1b48:	9a 89       	ldd	r25, Y+18	; 0x12
    1b4a:	ab 89       	ldd	r26, Y+19	; 0x13
    1b4c:	bc 89       	ldd	r27, Y+20	; 0x14
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	a1 05       	cpc	r26, r1
    1b52:	b1 05       	cpc	r27, r1
    1b54:	19 f4       	brne	.+6      	; 0x1b5c <LCD_voidDisplayIntegar+0x46>
	{
		LCD_WriteData('0');
    1b56:	80 e3       	ldi	r24, 0x30	; 48
    1b58:	0e 94 39 0c 	call	0x1872	; 0x1872 <LCD_WriteData>
	}

	if(COPY_u32Number>0)
    1b5c:	89 89       	ldd	r24, Y+17	; 0x11
    1b5e:	9a 89       	ldd	r25, Y+18	; 0x12
    1b60:	ab 89       	ldd	r26, Y+19	; 0x13
    1b62:	bc 89       	ldd	r27, Y+20	; 0x14
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	a1 05       	cpc	r26, r1
    1b68:	b1 05       	cpc	r27, r1
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <LCD_voidDisplayIntegar+0x58>
    1b6c:	55 c0       	rjmp	.+170    	; 0x1c18 <LCD_voidDisplayIntegar+0x102>
    1b6e:	32 c0       	rjmp	.+100    	; 0x1bd4 <LCD_voidDisplayIntegar+0xbe>
	{
		while(COPY_u32Number!=0)
		{
			LOCAL_u32Remainder=COPY_u32Number%10;
    1b70:	89 89       	ldd	r24, Y+17	; 0x11
    1b72:	9a 89       	ldd	r25, Y+18	; 0x12
    1b74:	ab 89       	ldd	r26, Y+19	; 0x13
    1b76:	bc 89       	ldd	r27, Y+20	; 0x14
    1b78:	2a e0       	ldi	r18, 0x0A	; 10
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e0       	ldi	r20, 0x00	; 0
    1b7e:	50 e0       	ldi	r21, 0x00	; 0
    1b80:	bc 01       	movw	r22, r24
    1b82:	cd 01       	movw	r24, r26
    1b84:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__udivmodsi4>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	9a 83       	std	Y+2, r25	; 0x02
    1b90:	ab 83       	std	Y+3, r26	; 0x03
    1b92:	bc 83       	std	Y+4, r27	; 0x04
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
    1b94:	2d 81       	ldd	r18, Y+5	; 0x05
    1b96:	3e 81       	ldd	r19, Y+6	; 0x06
    1b98:	49 81       	ldd	r20, Y+1	; 0x01
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	07 96       	adiw	r24, 0x07	; 7
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	e2 0f       	add	r30, r18
    1ba2:	f3 1f       	adc	r31, r19
    1ba4:	40 83       	st	Z, r20
			COPY_u32Number=COPY_u32Number/10;
    1ba6:	89 89       	ldd	r24, Y+17	; 0x11
    1ba8:	9a 89       	ldd	r25, Y+18	; 0x12
    1baa:	ab 89       	ldd	r26, Y+19	; 0x13
    1bac:	bc 89       	ldd	r27, Y+20	; 0x14
    1bae:	2a e0       	ldi	r18, 0x0A	; 10
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	50 e0       	ldi	r21, 0x00	; 0
    1bb6:	bc 01       	movw	r22, r24
    1bb8:	cd 01       	movw	r24, r26
    1bba:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__udivmodsi4>
    1bbe:	da 01       	movw	r26, r20
    1bc0:	c9 01       	movw	r24, r18
    1bc2:	89 8b       	std	Y+17, r24	; 0x11
    1bc4:	9a 8b       	std	Y+18, r25	; 0x12
    1bc6:	ab 8b       	std	Y+19, r26	; 0x13
    1bc8:	bc 8b       	std	Y+20, r27	; 0x14
			i++;
    1bca:	8d 81       	ldd	r24, Y+5	; 0x05
    1bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bce:	01 96       	adiw	r24, 0x01	; 1
    1bd0:	9e 83       	std	Y+6, r25	; 0x06
    1bd2:	8d 83       	std	Y+5, r24	; 0x05
		LCD_WriteData('0');
	}

	if(COPY_u32Number>0)
	{
		while(COPY_u32Number!=0)
    1bd4:	89 89       	ldd	r24, Y+17	; 0x11
    1bd6:	9a 89       	ldd	r25, Y+18	; 0x12
    1bd8:	ab 89       	ldd	r26, Y+19	; 0x13
    1bda:	bc 89       	ldd	r27, Y+20	; 0x14
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	a1 05       	cpc	r26, r1
    1be0:	b1 05       	cpc	r27, r1
    1be2:	31 f6       	brne	.-116    	; 0x1b70 <LCD_voidDisplayIntegar+0x5a>
			LOCAL_u32Remainder=COPY_u32Number%10;
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
			COPY_u32Number=COPY_u32Number/10;
			i++;
		}
        i--;
    1be4:	8d 81       	ldd	r24, Y+5	; 0x05
    1be6:	9e 81       	ldd	r25, Y+6	; 0x06
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	9e 83       	std	Y+6, r25	; 0x06
    1bec:	8d 83       	std	Y+5, r24	; 0x05
    1bee:	10 c0       	rjmp	.+32     	; 0x1c10 <LCD_voidDisplayIntegar+0xfa>
		while(i>=0)
		{
			LCD_WriteData(LOCAL_u8Num[i]+48);
    1bf0:	2d 81       	ldd	r18, Y+5	; 0x05
    1bf2:	3e 81       	ldd	r19, Y+6	; 0x06
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	07 96       	adiw	r24, 0x07	; 7
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	e2 0f       	add	r30, r18
    1bfc:	f3 1f       	adc	r31, r19
    1bfe:	80 81       	ld	r24, Z
    1c00:	80 5d       	subi	r24, 0xD0	; 208
    1c02:	0e 94 39 0c 	call	0x1872	; 0x1872 <LCD_WriteData>
			i--;
    1c06:	8d 81       	ldd	r24, Y+5	; 0x05
    1c08:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	9e 83       	std	Y+6, r25	; 0x06
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
			LOCAL_u8Num[i]=LOCAL_u32Remainder;
			COPY_u32Number=COPY_u32Number/10;
			i++;
		}
        i--;
		while(i>=0)
    1c10:	8d 81       	ldd	r24, Y+5	; 0x05
    1c12:	9e 81       	ldd	r25, Y+6	; 0x06
    1c14:	99 23       	and	r25, r25
    1c16:	64 f7       	brge	.-40     	; 0x1bf0 <LCD_voidDisplayIntegar+0xda>
		{
			LCD_WriteData(LOCAL_u8Num[i]+48);
			i--;
		}
	}
}
    1c18:	64 96       	adiw	r28, 0x14	; 20
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <LCD_voidDisplaySpecialChar>:


void LCD_voidDisplaySpecialChar(u8* Ptr_u8PtrChar,u8 CGRam_index,u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	27 97       	sbiw	r28, 0x07	; 7
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	9c 83       	std	Y+4, r25	; 0x04
    1c40:	8b 83       	std	Y+3, r24	; 0x03
    1c42:	6d 83       	std	Y+5, r22	; 0x05
    1c44:	4e 83       	std	Y+6, r20	; 0x06
    1c46:	2f 83       	std	Y+7, r18	; 0x07
	LCD_GoToXY( Copy_u8RowNum, Copy_u8ColNum);
    1c48:	8e 81       	ldd	r24, Y+6	; 0x06
    1c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_GoToXY>
	LCD_WriteData(CGRam_index);
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	0e 94 39 0c 	call	0x1872	; 0x1872 <LCD_WriteData>
	u8 Local_u8address;
	u8 Local_u8Index;
	if (CGRam_index < 8)
    1c56:	8d 81       	ldd	r24, Y+5	; 0x05
    1c58:	88 30       	cpi	r24, 0x08	; 8
    1c5a:	18 f5       	brcc	.+70     	; 0x1ca2 <LCD_voidDisplaySpecialChar+0x78>
	{
		Local_u8address= CGRam_index * 8;
    1c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5e:	88 2f       	mov	r24, r24
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8address=SET_BIT(Local_u8address,6);
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	80 64       	ori	r24, 0x40	; 64
    1c74:	8a 83       	std	Y+2, r24	; 0x02
		LCD_WriteCommand(Local_u8address);
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	0e 94 2e 0b 	call	0x165c	; 0x165c <LCD_WriteCommand>
		for(Local_u8Index = 0;Local_u8Index < 8;Local_u8Index++)
    1c7c:	19 82       	std	Y+1, r1	; 0x01
    1c7e:	0e c0       	rjmp	.+28     	; 0x1c9c <LCD_voidDisplaySpecialChar+0x72>
		{
			LCD_WriteData(Ptr_u8PtrChar[Local_u8Index]);
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	e2 0f       	add	r30, r18
    1c8e:	f3 1f       	adc	r31, r19
    1c90:	80 81       	ld	r24, Z
    1c92:	0e 94 39 0c 	call	0x1872	; 0x1872 <LCD_WriteData>
	if (CGRam_index < 8)
	{
		Local_u8address= CGRam_index * 8;
		Local_u8address=SET_BIT(Local_u8address,6);
		LCD_WriteCommand(Local_u8address);
		for(Local_u8Index = 0;Local_u8Index < 8;Local_u8Index++)
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	8f 5f       	subi	r24, 0xFF	; 255
    1c9a:	89 83       	std	Y+1, r24	; 0x01
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	88 30       	cpi	r24, 0x08	; 8
    1ca0:	78 f3       	brcs	.-34     	; 0x1c80 <LCD_voidDisplaySpecialChar+0x56>
		{
			LCD_WriteData(Ptr_u8PtrChar[Local_u8Index]);
		}
	}
	LCD_WriteCommand(0x02);
    1ca2:	82 e0       	ldi	r24, 0x02	; 2
    1ca4:	0e 94 2e 0b 	call	0x165c	; 0x165c <LCD_WriteCommand>

}
    1ca8:	27 96       	adiw	r28, 0x07	; 7
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	de bf       	out	0x3e, r29	; 62
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	cd bf       	out	0x3d, r28	; 61
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <KPD_Init>:
#include "KPD_CONFIG.h"
#include "KPD_INTERFACE.h"


void KPD_Init()
{
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
			DIO_SetPinDirection(KPD_PORT,KPD_COULMN0_PIN,DIO_OUTPUT);
    1cc2:	83 e0       	ldi	r24, 0x03	; 3
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	41 e0       	ldi	r20, 0x01	; 1
    1cc8:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_COULMN1_PIN,DIO_OUTPUT);
    1ccc:	83 e0       	ldi	r24, 0x03	; 3
    1cce:	61 e0       	ldi	r22, 0x01	; 1
    1cd0:	41 e0       	ldi	r20, 0x01	; 1
    1cd2:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_COULMN2_PIN,DIO_OUTPUT);
    1cd6:	83 e0       	ldi	r24, 0x03	; 3
    1cd8:	62 e0       	ldi	r22, 0x02	; 2
    1cda:	41 e0       	ldi	r20, 0x01	; 1
    1cdc:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_COULMN3_PIN,DIO_OUTPUT);
    1ce0:	83 e0       	ldi	r24, 0x03	; 3
    1ce2:	63 e0       	ldi	r22, 0x03	; 3
    1ce4:	41 e0       	ldi	r20, 0x01	; 1
    1ce6:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_SetPinDirection>

			DIO_SetPinDirection(KPD_PORT,KPD_ROW0_PIN,DIO_INPUT);
    1cea:	83 e0       	ldi	r24, 0x03	; 3
    1cec:	64 e0       	ldi	r22, 0x04	; 4
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_ROW1_PIN,DIO_INPUT);
    1cf4:	83 e0       	ldi	r24, 0x03	; 3
    1cf6:	65 e0       	ldi	r22, 0x05	; 5
    1cf8:	40 e0       	ldi	r20, 0x00	; 0
    1cfa:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_ROW2_PIN,DIO_INPUT);
    1cfe:	83 e0       	ldi	r24, 0x03	; 3
    1d00:	66 e0       	ldi	r22, 0x06	; 6
    1d02:	40 e0       	ldi	r20, 0x00	; 0
    1d04:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_SetPinDirection>
			DIO_SetPinDirection(KPD_PORT,KPD_ROW3_PIN,DIO_INPUT);
    1d08:	83 e0       	ldi	r24, 0x03	; 3
    1d0a:	67 e0       	ldi	r22, 0x07	; 7
    1d0c:	40 e0       	ldi	r20, 0x00	; 0
    1d0e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_SetPinDirection>
			//DIO_SetPortValue(KPD_PORT,0b00001111);
			DIO_SetPortValue(KPD_PORT,0xff);
    1d12:	83 e0       	ldi	r24, 0x03	; 3
    1d14:	6f ef       	ldi	r22, 0xFF	; 255
    1d16:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_SetPortValue>
}
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <KPD_u8GetPressedKye>:

u8 KPD_u8GetPressedKye(void)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	a1 97       	sbiw	r28, 0x21	; 33
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61

	/*Indication for the pressed key value*/
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY;
    1d34:	8f ef       	ldi	r24, 0xFF	; 255
    1d36:	8b 83       	std	Y+3, r24	; 0x03

	u8 Local_u8CoulmnArr[COULMN_NUM]={KPD_COULMN0_PIN,KPD_COULMN1_PIN,KPD_COULMN2_PIN,KPD_COULMN3_PIN};
    1d38:	1c 82       	std	Y+4, r1	; 0x04
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	82 e0       	ldi	r24, 0x02	; 2
    1d40:	8e 83       	std	Y+6, r24	; 0x06
    1d42:	83 e0       	ldi	r24, 0x03	; 3
    1d44:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8RowArr[COULMN_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
    1d46:	84 e0       	ldi	r24, 0x04	; 4
    1d48:	88 87       	std	Y+8, r24	; 0x08
    1d4a:	85 e0       	ldi	r24, 0x05	; 5
    1d4c:	89 87       	std	Y+9, r24	; 0x09
    1d4e:	86 e0       	ldi	r24, 0x06	; 6
    1d50:	8a 87       	std	Y+10, r24	; 0x0a
    1d52:	87 e0       	ldi	r24, 0x07	; 7
    1d54:	8b 87       	std	Y+11, r24	; 0x0b

	/*Array of values of key pad*/
	u8 Local_u8KPDArr[ROW_NUM][COULMN_NUM]= KPD_ARR_VAL;
    1d56:	ce 01       	movw	r24, r28
    1d58:	0c 96       	adiw	r24, 0x0c	; 12
    1d5a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d5c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d5e:	ef e7       	ldi	r30, 0x7F	; 127
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	f8 a3       	std	Y+32, r31	; 0x20
    1d64:	ef 8f       	std	Y+31, r30	; 0x1f
    1d66:	f0 e1       	ldi	r31, 0x10	; 16
    1d68:	f9 a3       	std	Y+33, r31	; 0x21
    1d6a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1d6c:	f8 a1       	ldd	r31, Y+32	; 0x20
    1d6e:	00 80       	ld	r0, Z
    1d70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d72:	98 a1       	ldd	r25, Y+32	; 0x20
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	98 a3       	std	Y+32, r25	; 0x20
    1d78:	8f 8f       	std	Y+31, r24	; 0x1f
    1d7a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1d7c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1d7e:	00 82       	st	Z, r0
    1d80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d84:	01 96       	adiw	r24, 0x01	; 1
    1d86:	9e 8f       	std	Y+30, r25	; 0x1e
    1d88:	8d 8f       	std	Y+29, r24	; 0x1d
    1d8a:	99 a1       	ldd	r25, Y+33	; 0x21
    1d8c:	91 50       	subi	r25, 0x01	; 1
    1d8e:	99 a3       	std	Y+33, r25	; 0x21
    1d90:	e9 a1       	ldd	r30, Y+33	; 0x21
    1d92:	ee 23       	and	r30, r30
    1d94:	51 f7       	brne	.-44     	; 0x1d6a <KPD_u8GetPressedKye+0x4a>

	u8 Local_u8ColumnIndex,Local_u8RowIndex;

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex < COULMN_NUM; Local_u8ColumnIndex++)
    1d96:	1a 82       	std	Y+2, r1	; 0x02
    1d98:	72 c0       	rjmp	.+228    	; 0x1e7e <KPD_u8GetPressedKye+0x15e>
	{

		DIO_SetPinValue(KPD_PORT,Local_u8CoulmnArr[Local_u8ColumnIndex],DIO_LOW);
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	ce 01       	movw	r24, r28
    1da2:	04 96       	adiw	r24, 0x04	; 4
    1da4:	fc 01       	movw	r30, r24
    1da6:	e2 0f       	add	r30, r18
    1da8:	f3 1f       	adc	r31, r19
    1daa:	90 81       	ld	r25, Z
    1dac:	83 e0       	ldi	r24, 0x03	; 3
    1dae:	69 2f       	mov	r22, r25
    1db0:	40 e0       	ldi	r20, 0x00	; 0
    1db2:	0e 94 4c 07 	call	0xe98	; 0xe98 <DIO_SetPinValue>

		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
    1db6:	19 82       	std	Y+1, r1	; 0x01
    1db8:	4d c0       	rjmp	.+154    	; 0x1e54 <KPD_u8GetPressedKye+0x134>
		{
			if(DIO_GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex])==DIO_LOW)
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	08 96       	adiw	r24, 0x08	; 8
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	e2 0f       	add	r30, r18
    1dc8:	f3 1f       	adc	r31, r19
    1dca:	90 81       	ld	r25, Z
    1dcc:	83 e0       	ldi	r24, 0x03	; 3
    1dce:	69 2f       	mov	r22, r25
    1dd0:	0e 94 3e 08 	call	0x107c	; 0x107c <DIO_GetPinValue>
    1dd4:	88 23       	and	r24, r24
    1dd6:	d9 f5       	brne	.+118    	; 0x1e4e <KPD_u8GetPressedKye+0x12e>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	48 2f       	mov	r20, r24
    1de2:	50 e0       	ldi	r21, 0x00	; 0
    1de4:	22 0f       	add	r18, r18
    1de6:	33 1f       	adc	r19, r19
    1de8:	22 0f       	add	r18, r18
    1dea:	33 1f       	adc	r19, r19
    1dec:	ce 01       	movw	r24, r28
    1dee:	01 96       	adiw	r24, 0x01	; 1
    1df0:	82 0f       	add	r24, r18
    1df2:	93 1f       	adc	r25, r19
    1df4:	84 0f       	add	r24, r20
    1df6:	95 1f       	adc	r25, r21
    1df8:	fc 01       	movw	r30, r24
    1dfa:	3b 96       	adiw	r30, 0x0b	; 11
    1dfc:	80 81       	ld	r24, Z
    1dfe:	8b 83       	std	Y+3, r24	; 0x03
    1e00:	14 c0       	rjmp	.+40     	; 0x1e2a <KPD_u8GetPressedKye+0x10a>
				while(DIO_GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex])==DIO_LOW)
				{
					Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	48 2f       	mov	r20, r24
    1e0c:	50 e0       	ldi	r21, 0x00	; 0
    1e0e:	22 0f       	add	r18, r18
    1e10:	33 1f       	adc	r19, r19
    1e12:	22 0f       	add	r18, r18
    1e14:	33 1f       	adc	r19, r19
    1e16:	ce 01       	movw	r24, r28
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	82 0f       	add	r24, r18
    1e1c:	93 1f       	adc	r25, r19
    1e1e:	84 0f       	add	r24, r20
    1e20:	95 1f       	adc	r25, r21
    1e22:	fc 01       	movw	r30, r24
    1e24:	3b 96       	adiw	r30, 0x0b	; 11
    1e26:	80 81       	ld	r24, Z
    1e28:	8b 83       	std	Y+3, r24	; 0x03
		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
		{
			if(DIO_GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex])==DIO_LOW)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
				while(DIO_GetPinValue(KPD_PORT,Local_u8RowArr[Local_u8RowIndex])==DIO_LOW)
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	ce 01       	movw	r24, r28
    1e32:	08 96       	adiw	r24, 0x08	; 8
    1e34:	fc 01       	movw	r30, r24
    1e36:	e2 0f       	add	r30, r18
    1e38:	f3 1f       	adc	r31, r19
    1e3a:	90 81       	ld	r25, Z
    1e3c:	83 e0       	ldi	r24, 0x03	; 3
    1e3e:	69 2f       	mov	r22, r25
    1e40:	0e 94 3e 08 	call	0x107c	; 0x107c <DIO_GetPinValue>
    1e44:	88 23       	and	r24, r24
    1e46:	e9 f2       	breq	.-70     	; 0x1e02 <KPD_u8GetPressedKye+0xe2>
				{
					Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
				}

				return Local_u8PressedKey;
    1e48:	fb 81       	ldd	r31, Y+3	; 0x03
    1e4a:	fc 8f       	std	Y+28, r31	; 0x1c
    1e4c:	1e c0       	rjmp	.+60     	; 0x1e8a <KPD_u8GetPressedKye+0x16a>
	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex < COULMN_NUM; Local_u8ColumnIndex++)
	{

		DIO_SetPinValue(KPD_PORT,Local_u8CoulmnArr[Local_u8ColumnIndex],DIO_LOW);

		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	8f 5f       	subi	r24, 0xFF	; 255
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	84 30       	cpi	r24, 0x04	; 4
    1e58:	08 f4       	brcc	.+2      	; 0x1e5c <KPD_u8GetPressedKye+0x13c>
    1e5a:	af cf       	rjmp	.-162    	; 0x1dba <KPD_u8GetPressedKye+0x9a>
				}

				return Local_u8PressedKey;
			}
		}
		DIO_SetPinValue(KPD_PORT,Local_u8CoulmnArr[Local_u8ColumnIndex],DIO_HIGH);
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	ce 01       	movw	r24, r28
    1e64:	04 96       	adiw	r24, 0x04	; 4
    1e66:	fc 01       	movw	r30, r24
    1e68:	e2 0f       	add	r30, r18
    1e6a:	f3 1f       	adc	r31, r19
    1e6c:	90 81       	ld	r25, Z
    1e6e:	83 e0       	ldi	r24, 0x03	; 3
    1e70:	69 2f       	mov	r22, r25
    1e72:	41 e0       	ldi	r20, 0x01	; 1
    1e74:	0e 94 4c 07 	call	0xe98	; 0xe98 <DIO_SetPinValue>
	/*Array of values of key pad*/
	u8 Local_u8KPDArr[ROW_NUM][COULMN_NUM]= KPD_ARR_VAL;

	u8 Local_u8ColumnIndex,Local_u8RowIndex;

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex < COULMN_NUM; Local_u8ColumnIndex++)
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	8f 5f       	subi	r24, 0xFF	; 255
    1e7c:	8a 83       	std	Y+2, r24	; 0x02
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	84 30       	cpi	r24, 0x04	; 4
    1e82:	08 f4       	brcc	.+2      	; 0x1e86 <KPD_u8GetPressedKye+0x166>
    1e84:	8a cf       	rjmp	.-236    	; 0x1d9a <KPD_u8GetPressedKye+0x7a>
				return Local_u8PressedKey;
			}
		}
		DIO_SetPinValue(KPD_PORT,Local_u8CoulmnArr[Local_u8ColumnIndex],DIO_HIGH);
	}
	return Local_u8PressedKey;
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	8c 8f       	std	Y+28, r24	; 0x1c
    1e8a:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    1e8c:	a1 96       	adiw	r28, 0x21	; 33
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <main>:
#include "../HAL/LCD/LCD_INTERFACE.h"
#include "../MCAL/DIO/DIO_INTERFACE.h"
#include "../MCAL/USART/USART_INTERFACE.h"
#include <avr/delay.h>
int main(void)
{
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	00 d0       	rcall	.+0      	; 0x1ea4 <main+0x6>
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN0,DIO_INPUT);		//RXD pin
    1ea8:	83 e0       	ldi	r24, 0x03	; 3
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN1,DIO_OUTPUT);		//TXD pin
    1eb2:	83 e0       	ldi	r24, 0x03	; 3
    1eb4:	61 e0       	ldi	r22, 0x01	; 1
    1eb6:	41 e0       	ldi	r20, 0x01	; 1
    1eb8:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_SetPinDirection>
	LCD_Init();
    1ebc:	0e 94 39 09 	call	0x1272	; 0x1272 <LCD_Init>
	USART_voidInit();
    1ec0:	0e 94 a3 05 	call	0xb46	; 0xb46 <USART_voidInit>


	USART_SendString("Enter your name: ");
    1ec4:	80 e6       	ldi	r24, 0x60	; 96
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0e 94 0f 06 	call	0xc1e	; 0xc1e <USART_SendString>
	u8 * z=USART_ReciveString();
    1ecc:	0e 94 38 06 	call	0xc70	; 0xc70 <USART_ReciveString>
    1ed0:	9a 83       	std	Y+2, r25	; 0x02
    1ed2:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteString(z);
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed8:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <LCD_WriteString>
	LCD_GoToXY(1,0);
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_GoToXY>
	LCD_WriteString("DONE");
    1ee4:	82 e7       	ldi	r24, 0x72	; 114
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <LCD_WriteString>
    1eec:	ff cf       	rjmp	.-2      	; 0x1eec <main+0x4e>

00001eee <__udivmodsi4>:
    1eee:	a1 e2       	ldi	r26, 0x21	; 33
    1ef0:	1a 2e       	mov	r1, r26
    1ef2:	aa 1b       	sub	r26, r26
    1ef4:	bb 1b       	sub	r27, r27
    1ef6:	fd 01       	movw	r30, r26
    1ef8:	0d c0       	rjmp	.+26     	; 0x1f14 <__udivmodsi4_ep>

00001efa <__udivmodsi4_loop>:
    1efa:	aa 1f       	adc	r26, r26
    1efc:	bb 1f       	adc	r27, r27
    1efe:	ee 1f       	adc	r30, r30
    1f00:	ff 1f       	adc	r31, r31
    1f02:	a2 17       	cp	r26, r18
    1f04:	b3 07       	cpc	r27, r19
    1f06:	e4 07       	cpc	r30, r20
    1f08:	f5 07       	cpc	r31, r21
    1f0a:	20 f0       	brcs	.+8      	; 0x1f14 <__udivmodsi4_ep>
    1f0c:	a2 1b       	sub	r26, r18
    1f0e:	b3 0b       	sbc	r27, r19
    1f10:	e4 0b       	sbc	r30, r20
    1f12:	f5 0b       	sbc	r31, r21

00001f14 <__udivmodsi4_ep>:
    1f14:	66 1f       	adc	r22, r22
    1f16:	77 1f       	adc	r23, r23
    1f18:	88 1f       	adc	r24, r24
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	1a 94       	dec	r1
    1f1e:	69 f7       	brne	.-38     	; 0x1efa <__udivmodsi4_loop>
    1f20:	60 95       	com	r22
    1f22:	70 95       	com	r23
    1f24:	80 95       	com	r24
    1f26:	90 95       	com	r25
    1f28:	9b 01       	movw	r18, r22
    1f2a:	ac 01       	movw	r20, r24
    1f2c:	bd 01       	movw	r22, r26
    1f2e:	cf 01       	movw	r24, r30
    1f30:	08 95       	ret

00001f32 <__prologue_saves__>:
    1f32:	2f 92       	push	r2
    1f34:	3f 92       	push	r3
    1f36:	4f 92       	push	r4
    1f38:	5f 92       	push	r5
    1f3a:	6f 92       	push	r6
    1f3c:	7f 92       	push	r7
    1f3e:	8f 92       	push	r8
    1f40:	9f 92       	push	r9
    1f42:	af 92       	push	r10
    1f44:	bf 92       	push	r11
    1f46:	cf 92       	push	r12
    1f48:	df 92       	push	r13
    1f4a:	ef 92       	push	r14
    1f4c:	ff 92       	push	r15
    1f4e:	0f 93       	push	r16
    1f50:	1f 93       	push	r17
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	ca 1b       	sub	r28, r26
    1f5c:	db 0b       	sbc	r29, r27
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	de bf       	out	0x3e, r29	; 62
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	09 94       	ijmp

00001f6a <__epilogue_restores__>:
    1f6a:	2a 88       	ldd	r2, Y+18	; 0x12
    1f6c:	39 88       	ldd	r3, Y+17	; 0x11
    1f6e:	48 88       	ldd	r4, Y+16	; 0x10
    1f70:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f72:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f74:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f76:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f78:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f7a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f7c:	b9 84       	ldd	r11, Y+9	; 0x09
    1f7e:	c8 84       	ldd	r12, Y+8	; 0x08
    1f80:	df 80       	ldd	r13, Y+7	; 0x07
    1f82:	ee 80       	ldd	r14, Y+6	; 0x06
    1f84:	fd 80       	ldd	r15, Y+5	; 0x05
    1f86:	0c 81       	ldd	r16, Y+4	; 0x04
    1f88:	1b 81       	ldd	r17, Y+3	; 0x03
    1f8a:	aa 81       	ldd	r26, Y+2	; 0x02
    1f8c:	b9 81       	ldd	r27, Y+1	; 0x01
    1f8e:	ce 0f       	add	r28, r30
    1f90:	d1 1d       	adc	r29, r1
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	ed 01       	movw	r28, r26
    1f9e:	08 95       	ret

00001fa0 <_exit>:
    1fa0:	f8 94       	cli

00001fa2 <__stop_program>:
    1fa2:	ff cf       	rjmp	.-2      	; 0x1fa2 <__stop_program>
